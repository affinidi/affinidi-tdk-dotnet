/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// SupportedCredentialMetadataDisplayInner
    /// </summary>
    [DataContract(Name = "SupportedCredentialMetadata_display_inner")]
    public partial class SupportedCredentialMetadataDisplayInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedCredentialMetadataDisplayInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupportedCredentialMetadataDisplayInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedCredentialMetadataDisplayInner" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="locale">locale.</param>
        /// <param name="logo">logo.</param>
        /// <param name="backgroundColor">backgroundColor.</param>
        /// <param name="textColor">textColor.</param>
        public SupportedCredentialMetadataDisplayInner(string name = default, string locale = default, SupportedCredentialMetadataItemLogo logo = default, string backgroundColor = default, string textColor = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SupportedCredentialMetadataDisplayInner and cannot be null");
            }
            this.Name = name;
            this.Locale = locale;
            this.Logo = logo;
            this.BackgroundColor = backgroundColor;
            this.TextColor = textColor;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name = "logo", EmitDefaultValue = false)]
        public SupportedCredentialMetadataItemLogo Logo { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name = "backgroundColor", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets TextColor
        /// </summary>
        [DataMember(Name = "textColor", EmitDefaultValue = false)]
        public string TextColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupportedCredentialMetadataDisplayInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  TextColor: ").Append(TextColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }

            // Locale (string) maxLength
            if (this.Locale != null && this.Locale.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Locale, length must be less than 16.", new [] { "Locale" });
            }

            yield break;
        }
    }

}
