/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// GetCredentialOffer400Response
    /// </summary>
    [JsonConverter(typeof(GetCredentialOffer400ResponseJsonConverter))]
    [DataContract(Name = "getCredentialOffer_400_response")]
    public partial class GetCredentialOffer400Response : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCredentialOffer400Response" /> class
        /// with the <see cref="InvalidParameterError" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InvalidParameterError.</param>
        public GetCredentialOffer400Response(InvalidParameterError actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCredentialOffer400Response" /> class
        /// with the <see cref="ProjectCredentialConfigNotExistError" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ProjectCredentialConfigNotExistError.</param>
        public GetCredentialOffer400Response(ProjectCredentialConfigNotExistError actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCredentialOffer400Response" /> class
        /// with the <see cref="CredentialOfferExpiredError" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CredentialOfferExpiredError.</param>
        public GetCredentialOffer400Response(CredentialOfferExpiredError actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCredentialOffer400Response" /> class
        /// with the <see cref="CredentialOfferClaimedError" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CredentialOfferClaimedError.</param>
        public GetCredentialOffer400Response(CredentialOfferClaimedError actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCredentialOffer400Response" /> class
        /// with the <see cref="VcClaimedError" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VcClaimedError.</param>
        public GetCredentialOffer400Response(VcClaimedError actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(CredentialOfferClaimedError) || value is CredentialOfferClaimedError)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CredentialOfferExpiredError) || value is CredentialOfferExpiredError)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(InvalidParameterError) || value is InvalidParameterError)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ProjectCredentialConfigNotExistError) || value is ProjectCredentialConfigNotExistError)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VcClaimedError) || value is VcClaimedError)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: CredentialOfferClaimedError, CredentialOfferExpiredError, InvalidParameterError, ProjectCredentialConfigNotExistError, VcClaimedError");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `InvalidParameterError`. If the actual instance is not `InvalidParameterError`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InvalidParameterError</returns>
        public InvalidParameterError GetInvalidParameterError()
        {
            return (InvalidParameterError)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ProjectCredentialConfigNotExistError`. If the actual instance is not `ProjectCredentialConfigNotExistError`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ProjectCredentialConfigNotExistError</returns>
        public ProjectCredentialConfigNotExistError GetProjectCredentialConfigNotExistError()
        {
            return (ProjectCredentialConfigNotExistError)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CredentialOfferExpiredError`. If the actual instance is not `CredentialOfferExpiredError`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CredentialOfferExpiredError</returns>
        public CredentialOfferExpiredError GetCredentialOfferExpiredError()
        {
            return (CredentialOfferExpiredError)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CredentialOfferClaimedError`. If the actual instance is not `CredentialOfferClaimedError`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CredentialOfferClaimedError</returns>
        public CredentialOfferClaimedError GetCredentialOfferClaimedError()
        {
            return (CredentialOfferClaimedError)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VcClaimedError`. If the actual instance is not `VcClaimedError`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VcClaimedError</returns>
        public VcClaimedError GetVcClaimedError()
        {
            return (VcClaimedError)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCredentialOffer400Response {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, GetCredentialOffer400Response.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of GetCredentialOffer400Response
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of GetCredentialOffer400Response</returns>
        public static GetCredentialOffer400Response FromJson(string jsonString)
        {
            GetCredentialOffer400Response newGetCredentialOffer400Response = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newGetCredentialOffer400Response;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CredentialOfferClaimedError).GetProperty("AdditionalProperties") == null)
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<CredentialOfferClaimedError>(jsonString, GetCredentialOffer400Response.SerializerSettings));
                }
                else
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<CredentialOfferClaimedError>(jsonString, GetCredentialOffer400Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CredentialOfferClaimedError");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CredentialOfferClaimedError: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CredentialOfferExpiredError).GetProperty("AdditionalProperties") == null)
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<CredentialOfferExpiredError>(jsonString, GetCredentialOffer400Response.SerializerSettings));
                }
                else
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<CredentialOfferExpiredError>(jsonString, GetCredentialOffer400Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CredentialOfferExpiredError");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CredentialOfferExpiredError: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InvalidParameterError).GetProperty("AdditionalProperties") == null)
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<InvalidParameterError>(jsonString, GetCredentialOffer400Response.SerializerSettings));
                }
                else
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<InvalidParameterError>(jsonString, GetCredentialOffer400Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InvalidParameterError");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InvalidParameterError: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ProjectCredentialConfigNotExistError).GetProperty("AdditionalProperties") == null)
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<ProjectCredentialConfigNotExistError>(jsonString, GetCredentialOffer400Response.SerializerSettings));
                }
                else
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<ProjectCredentialConfigNotExistError>(jsonString, GetCredentialOffer400Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ProjectCredentialConfigNotExistError");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ProjectCredentialConfigNotExistError: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VcClaimedError).GetProperty("AdditionalProperties") == null)
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<VcClaimedError>(jsonString, GetCredentialOffer400Response.SerializerSettings));
                }
                else
                {
                    newGetCredentialOffer400Response = new GetCredentialOffer400Response(JsonConvert.DeserializeObject<VcClaimedError>(jsonString, GetCredentialOffer400Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VcClaimedError");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VcClaimedError: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newGetCredentialOffer400Response;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for GetCredentialOffer400Response
    /// </summary>
    public class GetCredentialOffer400ResponseJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(GetCredentialOffer400Response).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return GetCredentialOffer400Response.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return GetCredentialOffer400Response.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
