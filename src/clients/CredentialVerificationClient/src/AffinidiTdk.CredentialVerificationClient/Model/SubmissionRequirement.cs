/*
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialVerificationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialVerificationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialVerificationClient.Model
{
    /// <summary>
    /// SubmissionRequirement
    /// </summary>
    [DataContract(Name = "SubmissionRequirement")]
    public partial class SubmissionRequirement : IValidatableObject
    {
        /// <summary>
        /// Defines Rule
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuleEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum Pick for value: pick
            /// </summary>
            [EnumMember(Value = "pick")]
            Pick = 2
        }


        /// <summary>
        /// Gets or Sets Rule
        /// </summary>
        [DataMember(Name = "rule", IsRequired = true, EmitDefaultValue = true)]
        public RuleEnum Rule { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionRequirement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmissionRequirement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionRequirement" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="purpose">purpose.</param>
        /// <param name="rule">rule (required).</param>
        /// <param name="count">count.</param>
        /// <param name="min">min.</param>
        /// <param name="max">max.</param>
        /// <param name="from">from.</param>
        /// <param name="fromNested">fromNested.</param>
        public SubmissionRequirement(string name = default, string purpose = default, RuleEnum rule = default, int count = default, int min = default, int max = default, string from = default, List<SubmissionRequirement> fromNested = default)
        {
            this.Rule = rule;
            this.Name = name;
            this.Purpose = purpose;
            this.Count = count;
            this.Min = min;
            this.Max = max;
            this.From = from;
            this.FromNested = fromNested;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name = "min", EmitDefaultValue = false)]
        public int Min { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name = "max", EmitDefaultValue = false)]
        public int Max { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets FromNested
        /// </summary>
        [DataMember(Name = "from_nested", EmitDefaultValue = false)]
        public List<SubmissionRequirement> FromNested { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmissionRequirement {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromNested: ").Append(FromNested).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
