/*
 * IotaService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.IotaClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IotaClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IotaClient.Model
{
    /// <summary>
    /// ConsentDto
    /// </summary>
    [DataContract(Name = "ConsentDto")]
    public partial class ConsentDto : IValidatableObject
    {
        /// <summary>
        /// Status of the consent.
        /// </summary>
        /// <value>Status of the consent.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum GIVEN for value: GIVEN
            /// </summary>
            [EnumMember(Value = "GIVEN")]
            GIVEN = 1
        }


        /// <summary>
        /// Status of the consent.
        /// </summary>
        /// <value>Status of the consent.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentDto" /> class.
        /// </summary>
        /// <param name="projectId">The ID of the project. (required).</param>
        /// <param name="id">Unique identifier for the record. (required).</param>
        /// <param name="userId">Unique identifier for the user. (required).</param>
        /// <param name="vcType">Type of the VC shared by the user. It creates a consent record for each  VC type shared except for the base type VerifiableCredential. (required).</param>
        /// <param name="status">Status of the consent. (required).</param>
        /// <param name="modifiedAt">modifiedAt (required).</param>
        /// <param name="modifiedBy">modifiedBy (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        public ConsentDto(string projectId = default, string id = default, string userId = default, string vcType = default, StatusEnum status = default, string modifiedAt = default, string modifiedBy = default, string createdAt = default, string createdBy = default)
        {
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for ConsentDto and cannot be null");
            }
            this.ProjectId = projectId;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ConsentDto and cannot be null");
            }
            this.Id = id;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for ConsentDto and cannot be null");
            }
            this.UserId = userId;
            // to ensure "vcType" is required (not null)
            if (vcType == null)
            {
                throw new ArgumentNullException("vcType is a required property for ConsentDto and cannot be null");
            }
            this.VcType = vcType;
            this.Status = status;
            // to ensure "modifiedAt" is required (not null)
            if (modifiedAt == null)
            {
                throw new ArgumentNullException("modifiedAt is a required property for ConsentDto and cannot be null");
            }
            this.ModifiedAt = modifiedAt;
            // to ensure "modifiedBy" is required (not null)
            if (modifiedBy == null)
            {
                throw new ArgumentNullException("modifiedBy is a required property for ConsentDto and cannot be null");
            }
            this.ModifiedBy = modifiedBy;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for ConsentDto and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new ArgumentNullException("createdBy is a required property for ConsentDto and cannot be null");
            }
            this.CreatedBy = createdBy;
        }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        /// <value>The ID of the project.</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Unique identifier for the record.
        /// </summary>
        /// <value>Unique identifier for the record.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier for the user.
        /// </summary>
        /// <value>Unique identifier for the user.</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Type of the VC shared by the user. It creates a consent record for each  VC type shared except for the base type VerifiableCredential.
        /// </summary>
        /// <value>Type of the VC shared by the user. It creates a consent record for each  VC type shared except for the base type VerifiableCredential.</value>
        [DataMember(Name = "vcType", IsRequired = true, EmitDefaultValue = true)]
        public string VcType { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedAt
        /// </summary>
        [DataMember(Name = "modifiedAt", IsRequired = true, EmitDefaultValue = true)]
        public string ModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name = "modifiedBy", IsRequired = true, EmitDefaultValue = true)]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsentDto {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  VcType: ").Append(VcType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
