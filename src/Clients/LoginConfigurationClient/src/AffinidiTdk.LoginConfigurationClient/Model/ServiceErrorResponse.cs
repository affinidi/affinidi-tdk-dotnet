/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.LoginConfigurationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.LoginConfigurationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.LoginConfigurationClient.Model
{
    /// <summary>
    /// Service Error Response
    /// </summary>
    [DataContract(Name = "ServiceErrorResponse")]
    public partial class ServiceErrorResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceErrorResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceErrorResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceErrorResponse" /> class.
        /// </summary>
        /// <param name="debugId">unique id for correlating this specific error to logs (required).</param>
        /// <param name="name">name of the error (required).</param>
        /// <param name="code">backwards compatible Affinidi error code (required).</param>
        /// <param name="details">error details.</param>
        public ServiceErrorResponse(Guid debugId = default, string name = default, string code = default, List<ServiceErrorResponseDetailsInner> details = default)
        {
            this.DebugId = debugId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ServiceErrorResponse and cannot be null");
            }
            this.Name = name;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for ServiceErrorResponse and cannot be null");
            }
            this.Code = code;
            this.Details = details;
        }

        /// <summary>
        /// unique id for correlating this specific error to logs
        /// </summary>
        /// <value>unique id for correlating this specific error to logs</value>
        [DataMember(Name = "debugId", IsRequired = true, EmitDefaultValue = true)]
        public Guid DebugId { get; set; }

        /// <summary>
        /// name of the error
        /// </summary>
        /// <value>name of the error</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// backwards compatible Affinidi error code
        /// </summary>
        /// <value>backwards compatible Affinidi error code</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// error details
        /// </summary>
        /// <value>error details</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public List<ServiceErrorResponseDetailsInner> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceErrorResponse {\n");
            sb.Append("  DebugId: ").Append(DebugId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
