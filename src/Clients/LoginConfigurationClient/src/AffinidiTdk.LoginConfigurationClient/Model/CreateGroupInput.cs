/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.LoginConfigurationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.LoginConfigurationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.LoginConfigurationClient.Model
{
    /// <summary>
    /// CreateGroupInput
    /// </summary>
    [DataContract(Name = "CreateGroupInput")]
    public partial class CreateGroupInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateGroupInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateGroupInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateGroupInput" /> class.
        /// </summary>
        /// <param name="groupName">name of the group for users, used as an id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        public CreateGroupInput(string groupName = default, string name = default, string description = default)
        {
            // to ensure "groupName" is required (not null)
            if (groupName == null)
            {
                throw new ArgumentNullException("groupName is a required property for CreateGroupInput and cannot be null");
            }
            this.GroupName = groupName;
            this.Name = name;
            this.Description = description;
        }

        /// <summary>
        /// name of the group for users, used as an id
        /// </summary>
        /// <value>name of the group for users, used as an id</value>
        [DataMember(Name = "groupName", IsRequired = true, EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateGroupInput {\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GroupName (string) maxLength
            if (this.GroupName != null && this.GroupName.Length > 24)
            {
                yield return new ValidationResult("Invalid value for GroupName, length must be less than 24.", new[] { "GroupName" });
            }

            if (this.GroupName != null)
            {
                // GroupName (string) pattern
                Regex regexGroupName = new Regex(@"^[a-z_]+$", RegexOptions.CultureInvariant);
                if (!regexGroupName.Match(this.GroupName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupName, must match a pattern of " + regexGroupName, new[] { "GroupName" });
                }
            }

            yield break;
        }
    }

}
