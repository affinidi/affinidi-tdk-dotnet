/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.LoginConfigurationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.LoginConfigurationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.LoginConfigurationClient.Model
{
    /// <summary>
    /// AuthorizationRequestDcql
    /// </summary>
    [DataContract(Name = "AuthorizationRequestDcql")]
    public partial class AuthorizationRequestDcql : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationRequestDcql" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorizationRequestDcql() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationRequestDcql" /> class.
        /// </summary>
        /// <param name="state">State parameter (required).</param>
        /// <param name="dcqlQuery">DCQL query to ask from the user. In JSON Stringify format. (required).</param>
        /// <param name="ari">ARI is used for analytics proposals..</param>
        /// <param name="clientId">clientId used for detect origin..</param>
        /// <param name="nonce">nonce for VP Token proof challenge.</param>
        public AuthorizationRequestDcql(string state = default, string dcqlQuery = default, string ari = default, string clientId = default, string nonce = default)
        {
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for AuthorizationRequestDcql and cannot be null");
            }
            this.State = state;
            // to ensure "dcqlQuery" is required (not null)
            if (dcqlQuery == null)
            {
                throw new ArgumentNullException("dcqlQuery is a required property for AuthorizationRequestDcql and cannot be null");
            }
            this.DcqlQuery = dcqlQuery;
            this.Ari = ari;
            this.ClientId = clientId;
            this.Nonce = nonce;
        }

        /// <summary>
        /// State parameter
        /// </summary>
        /// <value>State parameter</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// DCQL query to ask from the user. In JSON Stringify format.
        /// </summary>
        /// <value>DCQL query to ask from the user. In JSON Stringify format.</value>
        [DataMember(Name = "dcqlQuery", IsRequired = true, EmitDefaultValue = true)]
        public string DcqlQuery { get; set; }

        /// <summary>
        /// ARI is used for analytics proposals.
        /// </summary>
        /// <value>ARI is used for analytics proposals.</value>
        [DataMember(Name = "ari", EmitDefaultValue = false)]
        public string Ari { get; set; }

        /// <summary>
        /// clientId used for detect origin.
        /// </summary>
        /// <value>clientId used for detect origin.</value>
        [DataMember(Name = "clientId", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// nonce for VP Token proof challenge
        /// </summary>
        /// <value>nonce for VP Token proof challenge</value>
        [DataMember(Name = "nonce", EmitDefaultValue = false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizationRequestDcql {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  DcqlQuery: ").Append(DcqlQuery).Append("\n");
            sb.Append("  Ari: ").Append(Ari).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
