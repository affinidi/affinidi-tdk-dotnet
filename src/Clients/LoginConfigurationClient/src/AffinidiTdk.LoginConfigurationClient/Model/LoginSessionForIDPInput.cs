/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.LoginConfigurationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.LoginConfigurationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.LoginConfigurationClient.Model
{
    /// <summary>
    /// Input for Creating a Login Session
    /// </summary>
    [DataContract(Name = "LoginSessionForIDPInput")]
    public partial class LoginSessionForIDPInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginSessionForIDPInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoginSessionForIDPInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginSessionForIDPInput" /> class.
        /// </summary>
        /// <param name="loginChallenge">IDP Login Challenge to Associate the Session with (required).</param>
        /// <param name="clientId">IDP client id to Associate the Session with (required).</param>
        public LoginSessionForIDPInput(string loginChallenge = default, string clientId = default)
        {
            // to ensure "loginChallenge" is required (not null)
            if (loginChallenge == null)
            {
                throw new ArgumentNullException("loginChallenge is a required property for LoginSessionForIDPInput and cannot be null");
            }
            this.LoginChallenge = loginChallenge;
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for LoginSessionForIDPInput and cannot be null");
            }
            this.ClientId = clientId;
        }

        /// <summary>
        /// IDP Login Challenge to Associate the Session with
        /// </summary>
        /// <value>IDP Login Challenge to Associate the Session with</value>
        [DataMember(Name = "loginChallenge", IsRequired = true, EmitDefaultValue = true)]
        public string LoginChallenge { get; set; }

        /// <summary>
        /// IDP client id to Associate the Session with
        /// </summary>
        /// <value>IDP client id to Associate the Session with</value>
        [DataMember(Name = "clientId", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginSessionForIDPInput {\n");
            sb.Append("  LoginChallenge: ").Append(LoginChallenge).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
