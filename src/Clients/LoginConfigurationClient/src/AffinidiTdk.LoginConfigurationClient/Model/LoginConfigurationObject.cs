/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.LoginConfigurationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.LoginConfigurationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.LoginConfigurationClient.Model
{
    /// <summary>
    /// LoginConfigurationObject
    /// </summary>
    [DataContract(Name = "LoginConfigurationObject")]
    public partial class LoginConfigurationObject : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TokenEndpointAuthMethod
        /// </summary>
        [DataMember(Name = "tokenEndpointAuthMethod", IsRequired = true, EmitDefaultValue = true)]
        public TokenEndpointAuthMethod TokenEndpointAuthMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginConfigurationObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoginConfigurationObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginConfigurationObject" /> class.
        /// </summary>
        /// <param name="ari">Configuration ari (required).</param>
        /// <param name="configurationId">Configuration id.</param>
        /// <param name="projectId">Project id (required).</param>
        /// <param name="name">User defined login configuration name (required).</param>
        /// <param name="redirectUris">OAuth 2.0 Redirect URIs.</param>
        /// <param name="postLogoutRedirectUris">Post Logout Redirect URIs, Used to redirect the user&#39;s browser to a specified URL after the logout process is complete. Must match the domain, port, scheme of at least one of the registered redirect URIs.</param>
        /// <param name="scope">OAuth 2.0 Client Scope.</param>
        /// <param name="clientId">OAuth 2.0 Client ID.</param>
        /// <param name="creationDate">OAuth 2.0 Client Creation Date (required).</param>
        /// <param name="vpDefinition">VP definition in JSON stringify format.</param>
        /// <param name="presentationDefinition">Presentation Definition.</param>
        /// <param name="dcqlQuery">DCQL query.</param>
        /// <param name="idTokenMapping">Fields name/path mapping between the vp_token and the id_token (required).</param>
        /// <param name="clientMetadata">clientMetadata (required).</param>
        /// <param name="tokenEndpointAuthMethod">tokenEndpointAuthMethod (required).</param>
        public LoginConfigurationObject(string ari = default, string configurationId = default, string projectId = default, string name = default, List<string> redirectUris = default, List<string> postLogoutRedirectUris = default, string scope = default, string clientId = default, string creationDate = default, string vpDefinition = default, Object presentationDefinition = default, Object dcqlQuery = default, List<IdTokenMappingItem> idTokenMapping = default, LoginConfigurationClientMetadataOutput clientMetadata = default, TokenEndpointAuthMethod tokenEndpointAuthMethod = default)
        {
            // to ensure "ari" is required (not null)
            if (ari == null)
            {
                throw new ArgumentNullException("ari is a required property for LoginConfigurationObject and cannot be null");
            }
            this.Ari = ari;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for LoginConfigurationObject and cannot be null");
            }
            this.ProjectId = projectId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LoginConfigurationObject and cannot be null");
            }
            this.Name = name;
            // to ensure "creationDate" is required (not null)
            if (creationDate == null)
            {
                throw new ArgumentNullException("creationDate is a required property for LoginConfigurationObject and cannot be null");
            }
            this.CreationDate = creationDate;
            // to ensure "idTokenMapping" is required (not null)
            if (idTokenMapping == null)
            {
                throw new ArgumentNullException("idTokenMapping is a required property for LoginConfigurationObject and cannot be null");
            }
            this.IdTokenMapping = idTokenMapping;
            // to ensure "clientMetadata" is required (not null)
            if (clientMetadata == null)
            {
                throw new ArgumentNullException("clientMetadata is a required property for LoginConfigurationObject and cannot be null");
            }
            this.ClientMetadata = clientMetadata;
            this.TokenEndpointAuthMethod = tokenEndpointAuthMethod;
            this.ConfigurationId = configurationId;
            this.RedirectUris = redirectUris;
            this.PostLogoutRedirectUris = postLogoutRedirectUris;
            this.Scope = scope;
            this.ClientId = clientId;
            this.VpDefinition = vpDefinition;
            this.PresentationDefinition = presentationDefinition;
            this.DcqlQuery = dcqlQuery;
        }

        /// <summary>
        /// Configuration ari
        /// </summary>
        /// <value>Configuration ari</value>
        [DataMember(Name = "ari", IsRequired = true, EmitDefaultValue = true)]
        public string Ari { get; set; }

        /// <summary>
        /// Configuration id
        /// </summary>
        /// <value>Configuration id</value>
        [DataMember(Name = "configurationId", EmitDefaultValue = false)]
        public string ConfigurationId { get; set; }

        /// <summary>
        /// Project id
        /// </summary>
        /// <value>Project id</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// User defined login configuration name
        /// </summary>
        /// <value>User defined login configuration name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// OAuth 2.0 Redirect URIs
        /// </summary>
        /// <value>OAuth 2.0 Redirect URIs</value>
        [DataMember(Name = "redirectUris", EmitDefaultValue = false)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// Post Logout Redirect URIs, Used to redirect the user&#39;s browser to a specified URL after the logout process is complete. Must match the domain, port, scheme of at least one of the registered redirect URIs
        /// </summary>
        /// <value>Post Logout Redirect URIs, Used to redirect the user&#39;s browser to a specified URL after the logout process is complete. Must match the domain, port, scheme of at least one of the registered redirect URIs</value>
        [DataMember(Name = "postLogoutRedirectUris", EmitDefaultValue = false)]
        public List<string> PostLogoutRedirectUris { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Scope
        /// </summary>
        /// <value>OAuth 2.0 Client Scope</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// OAuth 2.0 Client ID
        /// </summary>
        /// <value>OAuth 2.0 Client ID</value>
        [DataMember(Name = "clientId", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Creation Date
        /// </summary>
        /// <value>OAuth 2.0 Client Creation Date</value>
        [DataMember(Name = "creationDate", IsRequired = true, EmitDefaultValue = true)]
        public string CreationDate { get; set; }

        /// <summary>
        /// VP definition in JSON stringify format
        /// </summary>
        /// <value>VP definition in JSON stringify format</value>
        [DataMember(Name = "vpDefinition", EmitDefaultValue = false)]
        public string VpDefinition { get; set; }

        /// <summary>
        /// Presentation Definition
        /// </summary>
        /// <value>Presentation Definition</value>
        [DataMember(Name = "presentationDefinition", EmitDefaultValue = false)]
        public Object PresentationDefinition { get; set; }

        /// <summary>
        /// DCQL query
        /// </summary>
        /// <value>DCQL query</value>
        [DataMember(Name = "dcqlQuery", EmitDefaultValue = false)]
        public Object DcqlQuery { get; set; }

        /// <summary>
        /// Fields name/path mapping between the vp_token and the id_token
        /// </summary>
        /// <value>Fields name/path mapping between the vp_token and the id_token</value>
        [DataMember(Name = "idTokenMapping", IsRequired = true, EmitDefaultValue = true)]
        public List<IdTokenMappingItem> IdTokenMapping { get; set; }

        /// <summary>
        /// Gets or Sets ClientMetadata
        /// </summary>
        [DataMember(Name = "clientMetadata", IsRequired = true, EmitDefaultValue = true)]
        public LoginConfigurationClientMetadataOutput ClientMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginConfigurationObject {\n");
            sb.Append("  Ari: ").Append(Ari).Append("\n");
            sb.Append("  ConfigurationId: ").Append(ConfigurationId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  PostLogoutRedirectUris: ").Append(PostLogoutRedirectUris).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  VpDefinition: ").Append(VpDefinition).Append("\n");
            sb.Append("  PresentationDefinition: ").Append(PresentationDefinition).Append("\n");
            sb.Append("  DcqlQuery: ").Append(DcqlQuery).Append("\n");
            sb.Append("  IdTokenMapping: ").Append(IdTokenMapping).Append("\n");
            sb.Append("  ClientMetadata: ").Append(ClientMetadata).Append("\n");
            sb.Append("  TokenEndpointAuthMethod: ").Append(TokenEndpointAuthMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
