/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.LoginConfigurationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.LoginConfigurationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.LoginConfigurationClient.Model
{
    /// <summary>
    /// OAuth2Token
    /// </summary>
    [DataContract(Name = "OAuth2Token")]
    public partial class OAuth2Token : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Token" /> class.
        /// </summary>
        /// <param name="accessToken">The access token issued by the authorization server. .</param>
        /// <param name="expiresIn">The lifetime in seconds of the access token.  For example, the value \&quot;3600\&quot; denotes that the access  token will expire in one hour from the time the response was generated. .</param>
        /// <param name="idToken">To retrieve a refresh token request the id_token scope. .</param>
        /// <param name="refreshToken">The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \&quot;offline\&quot; to your access token request. .</param>
        /// <param name="scope">The scope of the access token .</param>
        /// <param name="tokenType">The type of the token issued .</param>
        /// <param name="authorizationDetails">is used to request issuance of a certain Credential type. This optional field is only applicable in batch credential operations. .</param>
        public OAuth2Token(string accessToken = default, int expiresIn = default, int idToken = default, string refreshToken = default, string scope = default, string tokenType = default, List<OAuth2TokenAuthorizationDetailsInner> authorizationDetails = default)
        {
            this.AccessToken = accessToken;
            this.ExpiresIn = expiresIn;
            this.IdToken = idToken;
            this.RefreshToken = refreshToken;
            this.Scope = scope;
            this.TokenType = tokenType;
            this.AuthorizationDetails = authorizationDetails;
        }

        /// <summary>
        /// The access token issued by the authorization server. 
        /// </summary>
        /// <value>The access token issued by the authorization server. </value>
        [DataMember(Name = "access_token", EmitDefaultValue = false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The lifetime in seconds of the access token.  For example, the value \&quot;3600\&quot; denotes that the access  token will expire in one hour from the time the response was generated. 
        /// </summary>
        /// <value>The lifetime in seconds of the access token.  For example, the value \&quot;3600\&quot; denotes that the access  token will expire in one hour from the time the response was generated. </value>
        [DataMember(Name = "expires_in", EmitDefaultValue = false)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// To retrieve a refresh token request the id_token scope. 
        /// </summary>
        /// <value>To retrieve a refresh token request the id_token scope. </value>
        [DataMember(Name = "id_token", EmitDefaultValue = false)]
        public int IdToken { get; set; }

        /// <summary>
        /// The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \&quot;offline\&quot; to your access token request. 
        /// </summary>
        /// <value>The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \&quot;offline\&quot; to your access token request. </value>
        [DataMember(Name = "refresh_token", EmitDefaultValue = false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// The scope of the access token 
        /// </summary>
        /// <value>The scope of the access token </value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// The type of the token issued 
        /// </summary>
        /// <value>The type of the token issued </value>
        [DataMember(Name = "token_type", EmitDefaultValue = false)]
        public string TokenType { get; set; }

        /// <summary>
        /// is used to request issuance of a certain Credential type. This optional field is only applicable in batch credential operations. 
        /// </summary>
        /// <value>is used to request issuance of a certain Credential type. This optional field is only applicable in batch credential operations. </value>
        [DataMember(Name = "authorization_details", EmitDefaultValue = false)]
        public List<OAuth2TokenAuthorizationDetailsInner> AuthorizationDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuth2Token {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  IdToken: ").Append(IdToken).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  AuthorizationDetails: ").Append(AuthorizationDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
