/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.LoginConfigurationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.LoginConfigurationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.LoginConfigurationClient.Model
{
    /// <summary>
    /// GroupDto
    /// </summary>
    [DataContract(Name = "GroupDto")]
    public partial class GroupDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupDto" /> class.
        /// </summary>
        /// <param name="ari">Group ari (required).</param>
        /// <param name="projectId">Project id (required).</param>
        /// <param name="groupName">name of the group, identifier within a project (required).</param>
        /// <param name="creationDate">Group creation date (required).</param>
        public GroupDto(string ari = default, string projectId = default, string groupName = default, string creationDate = default)
        {
            // to ensure "ari" is required (not null)
            if (ari == null)
            {
                throw new ArgumentNullException("ari is a required property for GroupDto and cannot be null");
            }
            this.Ari = ari;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for GroupDto and cannot be null");
            }
            this.ProjectId = projectId;
            // to ensure "groupName" is required (not null)
            if (groupName == null)
            {
                throw new ArgumentNullException("groupName is a required property for GroupDto and cannot be null");
            }
            this.GroupName = groupName;
            // to ensure "creationDate" is required (not null)
            if (creationDate == null)
            {
                throw new ArgumentNullException("creationDate is a required property for GroupDto and cannot be null");
            }
            this.CreationDate = creationDate;
        }

        /// <summary>
        /// Group ari
        /// </summary>
        /// <value>Group ari</value>
        [DataMember(Name = "ari", IsRequired = true, EmitDefaultValue = true)]
        public string Ari { get; set; }

        /// <summary>
        /// Project id
        /// </summary>
        /// <value>Project id</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// name of the group, identifier within a project
        /// </summary>
        /// <value>name of the group, identifier within a project</value>
        [DataMember(Name = "groupName", IsRequired = true, EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Group creation date
        /// </summary>
        /// <value>Group creation date</value>
        [DataMember(Name = "creationDate", IsRequired = true, EmitDefaultValue = true)]
        public string CreationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupDto {\n");
            sb.Append("  Ari: ").Append(Ari).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
