/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.LoginConfigurationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.LoginConfigurationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.LoginConfigurationClient.Model
{
    /// <summary>
    /// IdTokenMappingItem
    /// </summary>
    [DataContract(Name = "IdTokenMappingItem")]
    public partial class IdTokenMappingItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdTokenMappingItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdTokenMappingItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdTokenMappingItem" /> class.
        /// </summary>
        /// <param name="sourceField">Name(path) of the corresponding field in the vp_token (required).</param>
        /// <param name="idTokenClaim">Name of the corresponding field in the id_token (required).</param>
        /// <param name="inputDescriptorId">Id of related input descriptor from presentation definition.</param>
        public IdTokenMappingItem(string sourceField = default, string idTokenClaim = default, string inputDescriptorId = default)
        {
            // to ensure "sourceField" is required (not null)
            if (sourceField == null)
            {
                throw new ArgumentNullException("sourceField is a required property for IdTokenMappingItem and cannot be null");
            }
            this.SourceField = sourceField;
            // to ensure "idTokenClaim" is required (not null)
            if (idTokenClaim == null)
            {
                throw new ArgumentNullException("idTokenClaim is a required property for IdTokenMappingItem and cannot be null");
            }
            this.IdTokenClaim = idTokenClaim;
            this.InputDescriptorId = inputDescriptorId;
        }

        /// <summary>
        /// Name(path) of the corresponding field in the vp_token
        /// </summary>
        /// <value>Name(path) of the corresponding field in the vp_token</value>
        [DataMember(Name = "sourceField", IsRequired = true, EmitDefaultValue = true)]
        public string SourceField { get; set; }

        /// <summary>
        /// Name of the corresponding field in the id_token
        /// </summary>
        /// <value>Name of the corresponding field in the id_token</value>
        [DataMember(Name = "idTokenClaim", IsRequired = true, EmitDefaultValue = true)]
        public string IdTokenClaim { get; set; }

        /// <summary>
        /// Id of related input descriptor from presentation definition
        /// </summary>
        /// <value>Id of related input descriptor from presentation definition</value>
        [DataMember(Name = "inputDescriptorId", EmitDefaultValue = false)]
        public string InputDescriptorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdTokenMappingItem {\n");
            sb.Append("  SourceField: ").Append(SourceField).Append("\n");
            sb.Append("  IdTokenClaim: ").Append(IdTokenClaim).Append("\n");
            sb.Append("  InputDescriptorId: ").Append(InputDescriptorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
