/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.LoginConfigurationClient.Client;
using AffinidiTdk.LoginConfigurationClient.Model;

namespace AffinidiTdk.LoginConfigurationClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdpApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// The authorization endpoint is one of the components in the OAuth 2.0 flow. It&#39;s the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        void V1LoginProjectProjectIdOauth2AuthGet(string projectId);

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// The authorization endpoint is one of the components in the OAuth 2.0 flow. It&#39;s the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1LoginProjectProjectIdOauth2AuthGetWithHttpInfo(string projectId);
        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        void V1LoginProjectProjectIdOauth2RevokePost(string projectId);

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1LoginProjectProjectIdOauth2RevokePostWithHttpInfo(string projectId);
        /// <summary>
        /// OpenID Connect Front- and Back-channel Enabled Logout
        /// </summary>
        /// <remarks>
        /// This endpoint initiates and completes user logout at the IdP OAuth2 &amp; OpenID provider and initiates OpenID Connect Front- / Back-channel logout: https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html Back-channel logout is performed asynchronously and does not affect logout flow. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        void V1LoginProjectProjectIdOauth2SessionsLogoutGet(string projectId);

        /// <summary>
        /// OpenID Connect Front- and Back-channel Enabled Logout
        /// </summary>
        /// <remarks>
        /// This endpoint initiates and completes user logout at the IdP OAuth2 &amp; OpenID provider and initiates OpenID Connect Front- / Back-channel logout: https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html Back-channel logout is performed asynchronously and does not affect logout flow. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1LoginProjectProjectIdOauth2SessionsLogoutGetWithHttpInfo(string projectId);
        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// The token endpoint is a critical component in the OAuth 2.0 protocol. It&#39;s the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user&#39;s resources on the protected server. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>OAuth2Token</returns>
        OAuth2Token V1LoginProjectProjectIdOauth2TokenPost(string projectId);

        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// The token endpoint is a critical component in the OAuth 2.0 protocol. It&#39;s the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user&#39;s resources on the protected server. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of OAuth2Token</returns>
        ApiResponse<OAuth2Token> V1LoginProjectProjectIdOauth2TokenPostWithHttpInfo(string projectId);
        /// <summary>
        /// OpenID Connect Userinfo
        /// </summary>
        /// <remarks>
        /// This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token&#39;s consent request. In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>GetUserInfo</returns>
        GetUserInfo V1LoginProjectProjectIdUserinfoGet(string projectId);

        /// <summary>
        /// OpenID Connect Userinfo
        /// </summary>
        /// <remarks>
        /// This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token&#39;s consent request. In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of GetUserInfo</returns>
        ApiResponse<GetUserInfo> V1LoginProjectProjectIdUserinfoGetWithHttpInfo(string projectId);
        /// <summary>
        /// Discover Well-Known JSON Web Keys
        /// </summary>
        /// <remarks>
        /// This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like node-jwks-rsa among others.
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey V1LoginProjectProjectIdWellKnownJwksJsonGet(string projectId);

        /// <summary>
        /// Discover Well-Known JSON Web Keys
        /// </summary>
        /// <remarks>
        /// This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like node-jwks-rsa among others.
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> V1LoginProjectProjectIdWellKnownJwksJsonGetWithHttpInfo(string projectId);
        /// <summary>
        /// OpenID Connect Discovery
        /// </summary>
        /// <remarks>
        /// A mechanism for an OpenID Connect Relying Party to discover the End-User&#39;s  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>OIDCConfig</returns>
        OIDCConfig V1LoginProjectProjectIdWellKnownOpenidConfigurationGet(string projectId);

        /// <summary>
        /// OpenID Connect Discovery
        /// </summary>
        /// <remarks>
        /// A mechanism for an OpenID Connect Relying Party to discover the End-User&#39;s  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of OIDCConfig</returns>
        ApiResponse<OIDCConfig> V1LoginProjectProjectIdWellKnownOpenidConfigurationGetWithHttpInfo(string projectId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdpApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// The authorization endpoint is one of the components in the OAuth 2.0 flow. It&#39;s the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1LoginProjectProjectIdOauth2AuthGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// The authorization endpoint is one of the components in the OAuth 2.0 flow. It&#39;s the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1LoginProjectProjectIdOauth2AuthGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1LoginProjectProjectIdOauth2RevokePostAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1LoginProjectProjectIdOauth2RevokePostWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// OpenID Connect Front- and Back-channel Enabled Logout
        /// </summary>
        /// <remarks>
        /// This endpoint initiates and completes user logout at the IdP OAuth2 &amp; OpenID provider and initiates OpenID Connect Front- / Back-channel logout: https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html Back-channel logout is performed asynchronously and does not affect logout flow. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1LoginProjectProjectIdOauth2SessionsLogoutGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// OpenID Connect Front- and Back-channel Enabled Logout
        /// </summary>
        /// <remarks>
        /// This endpoint initiates and completes user logout at the IdP OAuth2 &amp; OpenID provider and initiates OpenID Connect Front- / Back-channel logout: https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html Back-channel logout is performed asynchronously and does not affect logout flow. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1LoginProjectProjectIdOauth2SessionsLogoutGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// The token endpoint is a critical component in the OAuth 2.0 protocol. It&#39;s the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user&#39;s resources on the protected server. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Token</returns>
        System.Threading.Tasks.Task<OAuth2Token> V1LoginProjectProjectIdOauth2TokenPostAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// The token endpoint is a critical component in the OAuth 2.0 protocol. It&#39;s the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user&#39;s resources on the protected server. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Token>> V1LoginProjectProjectIdOauth2TokenPostWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// OpenID Connect Userinfo
        /// </summary>
        /// <remarks>
        /// This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token&#39;s consent request. In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserInfo</returns>
        System.Threading.Tasks.Task<GetUserInfo> V1LoginProjectProjectIdUserinfoGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// OpenID Connect Userinfo
        /// </summary>
        /// <remarks>
        /// This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token&#39;s consent request. In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserInfo>> V1LoginProjectProjectIdUserinfoGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Discover Well-Known JSON Web Keys
        /// </summary>
        /// <remarks>
        /// This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like node-jwks-rsa among others.
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> V1LoginProjectProjectIdWellKnownJwksJsonGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Discover Well-Known JSON Web Keys
        /// </summary>
        /// <remarks>
        /// This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like node-jwks-rsa among others.
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> V1LoginProjectProjectIdWellKnownJwksJsonGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// OpenID Connect Discovery
        /// </summary>
        /// <remarks>
        /// A mechanism for an OpenID Connect Relying Party to discover the End-User&#39;s  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OIDCConfig</returns>
        System.Threading.Tasks.Task<OIDCConfig> V1LoginProjectProjectIdWellKnownOpenidConfigurationGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// OpenID Connect Discovery
        /// </summary>
        /// <remarks>
        /// A mechanism for an OpenID Connect Relying Party to discover the End-User&#39;s  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OIDCConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<OIDCConfig>> V1LoginProjectProjectIdWellKnownOpenidConfigurationGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdpApi : IIdpApiSync, IIdpApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdpApi : IDisposable, IIdpApi
    {
        private AffinidiTdk.LoginConfigurationClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdpApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public IdpApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdpApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public IdpApi(string basePath)
        {
            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.LoginConfigurationClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdpApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public IdpApi(AffinidiTdk.LoginConfigurationClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdpApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IdpApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdpApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IdpApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.LoginConfigurationClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdpApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IdpApi(HttpClient client, AffinidiTdk.LoginConfigurationClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdpApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public IdpApi(AffinidiTdk.LoginConfigurationClient.Client.ISynchronousClient client, AffinidiTdk.LoginConfigurationClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.LoginConfigurationClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.LoginConfigurationClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint The authorization endpoint is one of the components in the OAuth 2.0 flow. It&#39;s the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        public void V1LoginProjectProjectIdOauth2AuthGet(string projectId)
        {
            V1LoginProjectProjectIdOauth2AuthGetWithHttpInfo(projectId);
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint The authorization endpoint is one of the components in the OAuth 2.0 flow. It&#39;s the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object> V1LoginProjectProjectIdOauth2AuthGetWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdOauth2AuthGet");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/login/project/{projectId}/oauth2/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdOauth2AuthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint The authorization endpoint is one of the components in the OAuth 2.0 flow. It&#39;s the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1LoginProjectProjectIdOauth2AuthGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1LoginProjectProjectIdOauth2AuthGetWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint The authorization endpoint is one of the components in the OAuth 2.0 flow. It&#39;s the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object>> V1LoginProjectProjectIdOauth2AuthGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdOauth2AuthGet");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/login/project/{projectId}/oauth2/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdOauth2AuthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        public void V1LoginProjectProjectIdOauth2RevokePost(string projectId)
        {
            V1LoginProjectProjectIdOauth2RevokePostWithHttpInfo(projectId);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object> V1LoginProjectProjectIdOauth2RevokePostWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdOauth2RevokePost");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/login/project/{projectId}/oauth2/revoke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdOauth2RevokePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1LoginProjectProjectIdOauth2RevokePostAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1LoginProjectProjectIdOauth2RevokePostWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object>> V1LoginProjectProjectIdOauth2RevokePostWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdOauth2RevokePost");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/login/project/{projectId}/oauth2/revoke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdOauth2RevokePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OpenID Connect Front- and Back-channel Enabled Logout This endpoint initiates and completes user logout at the IdP OAuth2 &amp; OpenID provider and initiates OpenID Connect Front- / Back-channel logout: https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html Back-channel logout is performed asynchronously and does not affect logout flow. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        public void V1LoginProjectProjectIdOauth2SessionsLogoutGet(string projectId)
        {
            V1LoginProjectProjectIdOauth2SessionsLogoutGetWithHttpInfo(projectId);
        }

        /// <summary>
        /// OpenID Connect Front- and Back-channel Enabled Logout This endpoint initiates and completes user logout at the IdP OAuth2 &amp; OpenID provider and initiates OpenID Connect Front- / Back-channel logout: https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html Back-channel logout is performed asynchronously and does not affect logout flow. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object> V1LoginProjectProjectIdOauth2SessionsLogoutGetWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdOauth2SessionsLogoutGet");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/login/project/{projectId}/oauth2/sessions/logout", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdOauth2SessionsLogoutGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OpenID Connect Front- and Back-channel Enabled Logout This endpoint initiates and completes user logout at the IdP OAuth2 &amp; OpenID provider and initiates OpenID Connect Front- / Back-channel logout: https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html Back-channel logout is performed asynchronously and does not affect logout flow. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1LoginProjectProjectIdOauth2SessionsLogoutGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1LoginProjectProjectIdOauth2SessionsLogoutGetWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OpenID Connect Front- and Back-channel Enabled Logout This endpoint initiates and completes user logout at the IdP OAuth2 &amp; OpenID provider and initiates OpenID Connect Front- / Back-channel logout: https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html Back-channel logout is performed asynchronously and does not affect logout flow. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object>> V1LoginProjectProjectIdOauth2SessionsLogoutGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdOauth2SessionsLogoutGet");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/login/project/{projectId}/oauth2/sessions/logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdOauth2SessionsLogoutGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint The token endpoint is a critical component in the OAuth 2.0 protocol. It&#39;s the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user&#39;s resources on the protected server. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>OAuth2Token</returns>
        public OAuth2Token V1LoginProjectProjectIdOauth2TokenPost(string projectId)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<OAuth2Token> localVarResponse = V1LoginProjectProjectIdOauth2TokenPostWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint The token endpoint is a critical component in the OAuth 2.0 protocol. It&#39;s the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user&#39;s resources on the protected server. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of OAuth2Token</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<OAuth2Token> V1LoginProjectProjectIdOauth2TokenPostWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdOauth2TokenPost");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuth2Token>("/v1/login/project/{projectId}/oauth2/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdOauth2TokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint The token endpoint is a critical component in the OAuth 2.0 protocol. It&#39;s the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user&#39;s resources on the protected server. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Token</returns>
        public async System.Threading.Tasks.Task<OAuth2Token> V1LoginProjectProjectIdOauth2TokenPostAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<OAuth2Token> localVarResponse = await V1LoginProjectProjectIdOauth2TokenPostWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint The token endpoint is a critical component in the OAuth 2.0 protocol. It&#39;s the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user&#39;s resources on the protected server. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Token)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<OAuth2Token>> V1LoginProjectProjectIdOauth2TokenPostWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdOauth2TokenPost");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuth2Token>("/v1/login/project/{projectId}/oauth2/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdOauth2TokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OpenID Connect Userinfo This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token&#39;s consent request. In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>GetUserInfo</returns>
        public GetUserInfo V1LoginProjectProjectIdUserinfoGet(string projectId)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GetUserInfo> localVarResponse = V1LoginProjectProjectIdUserinfoGetWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OpenID Connect Userinfo This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token&#39;s consent request. In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of GetUserInfo</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GetUserInfo> V1LoginProjectProjectIdUserinfoGetWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdUserinfoGet");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserInfo>("/v1/login/project/{projectId}/userinfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdUserinfoGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OpenID Connect Userinfo This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token&#39;s consent request. In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserInfo</returns>
        public async System.Threading.Tasks.Task<GetUserInfo> V1LoginProjectProjectIdUserinfoGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GetUserInfo> localVarResponse = await V1LoginProjectProjectIdUserinfoGetWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OpenID Connect Userinfo This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token&#39;s consent request. In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserInfo)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GetUserInfo>> V1LoginProjectProjectIdUserinfoGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdUserinfoGet");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUserInfo>("/v1/login/project/{projectId}/userinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdUserinfoGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Discover Well-Known JSON Web Keys This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like node-jwks-rsa among others.
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey V1LoginProjectProjectIdWellKnownJwksJsonGet(string projectId)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<JsonWebKey> localVarResponse = V1LoginProjectProjectIdWellKnownJwksJsonGetWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Discover Well-Known JSON Web Keys This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like node-jwks-rsa among others.
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<JsonWebKey> V1LoginProjectProjectIdWellKnownJwksJsonGetWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdWellKnownJwksJsonGet");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<JsonWebKey>("/v1/login/project/{projectId}/.well-known/jwks.json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdWellKnownJwksJsonGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Discover Well-Known JSON Web Keys This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like node-jwks-rsa among others.
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> V1LoginProjectProjectIdWellKnownJwksJsonGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<JsonWebKey> localVarResponse = await V1LoginProjectProjectIdWellKnownJwksJsonGetWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Discover Well-Known JSON Web Keys This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like node-jwks-rsa among others.
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<JsonWebKey>> V1LoginProjectProjectIdWellKnownJwksJsonGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdWellKnownJwksJsonGet");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JsonWebKey>("/v1/login/project/{projectId}/.well-known/jwks.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdWellKnownJwksJsonGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OpenID Connect Discovery A mechanism for an OpenID Connect Relying Party to discover the End-User&#39;s  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>OIDCConfig</returns>
        public OIDCConfig V1LoginProjectProjectIdWellKnownOpenidConfigurationGet(string projectId)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<OIDCConfig> localVarResponse = V1LoginProjectProjectIdWellKnownOpenidConfigurationGetWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OpenID Connect Discovery A mechanism for an OpenID Connect Relying Party to discover the End-User&#39;s  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of OIDCConfig</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<OIDCConfig> V1LoginProjectProjectIdWellKnownOpenidConfigurationGetWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdWellKnownOpenidConfigurationGet");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OIDCConfig>("/v1/login/project/{projectId}/.well-known/openid-configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdWellKnownOpenidConfigurationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OpenID Connect Discovery A mechanism for an OpenID Connect Relying Party to discover the End-User&#39;s  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OIDCConfig</returns>
        public async System.Threading.Tasks.Task<OIDCConfig> V1LoginProjectProjectIdWellKnownOpenidConfigurationGetAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<OIDCConfig> localVarResponse = await V1LoginProjectProjectIdWellKnownOpenidConfigurationGetWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OpenID Connect Discovery A mechanism for an OpenID Connect Relying Party to discover the End-User&#39;s  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OIDCConfig)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<OIDCConfig>> V1LoginProjectProjectIdWellKnownOpenidConfigurationGetWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling IdpApi->V1LoginProjectProjectIdWellKnownOpenidConfigurationGet");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OIDCConfig>("/v1/login/project/{projectId}/.well-known/openid-configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1LoginProjectProjectIdWellKnownOpenidConfigurationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
