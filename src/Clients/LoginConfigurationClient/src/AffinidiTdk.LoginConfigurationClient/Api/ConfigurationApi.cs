/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.LoginConfigurationClient.Client;
using AffinidiTdk.LoginConfigurationClient.Model;

namespace AffinidiTdk.LoginConfigurationClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new login configuration
        /// </summary>
        /// <remarks>
        /// Create a new login configuration  &#x60;vpDefinition&#x60; and &#x60;idTokenMapping&#x60; have default settings that provide user email VP presentation definitions.  An essential default definition is in place when it comes to the login process for end users using the Chrome extension.  This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoginConfigurationInput">CreateLoginConfigurations (optional)</param>
        /// <returns>CreateLoginConfigurationOutput</returns>
        CreateLoginConfigurationOutput CreateLoginConfigurations(CreateLoginConfigurationInput? createLoginConfigurationInput = default);

        /// <summary>
        /// Create a new login configuration
        /// </summary>
        /// <remarks>
        /// Create a new login configuration  &#x60;vpDefinition&#x60; and &#x60;idTokenMapping&#x60; have default settings that provide user email VP presentation definitions.  An essential default definition is in place when it comes to the login process for end users using the Chrome extension.  This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoginConfigurationInput">CreateLoginConfigurations (optional)</param>
        /// <returns>ApiResponse of CreateLoginConfigurationOutput</returns>
        ApiResponse<CreateLoginConfigurationOutput> CreateLoginConfigurationsWithHttpInfo(CreateLoginConfigurationInput? createLoginConfigurationInput = default);
        /// <summary>
        /// Delete login configurations by ID
        /// </summary>
        /// <remarks>
        /// Delete login configurations by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <returns></returns>
        void DeleteLoginConfigurationsById(string configurationId);

        /// <summary>
        /// Delete login configurations by ID
        /// </summary>
        /// <remarks>
        /// Delete login configurations by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLoginConfigurationsByIdWithHttpInfo(string configurationId);
        /// <summary>
        /// Get Client Metadata By  OAuth 2.0 Client ID
        /// </summary>
        /// <remarks>
        /// Get Client Metadata By  OAuth 2.0 Client ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <returns>LoginConfigurationClientMetadataOutput</returns>
        LoginConfigurationClientMetadataOutput GetClientMetadataByClientId(string clientId);

        /// <summary>
        /// Get Client Metadata By  OAuth 2.0 Client ID
        /// </summary>
        /// <remarks>
        /// Get Client Metadata By  OAuth 2.0 Client ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <returns>ApiResponse of LoginConfigurationClientMetadataOutput</returns>
        ApiResponse<LoginConfigurationClientMetadataOutput> GetClientMetadataByClientIdWithHttpInfo(string clientId);
        /// <summary>
        /// Get login configuration by ID
        /// </summary>
        /// <remarks>
        /// Get login configuration by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <returns>LoginConfigurationObject</returns>
        LoginConfigurationObject GetLoginConfigurationsById(string configurationId);

        /// <summary>
        /// Get login configuration by ID
        /// </summary>
        /// <remarks>
        /// Get login configuration by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <returns>ApiResponse of LoginConfigurationObject</returns>
        ApiResponse<LoginConfigurationObject> GetLoginConfigurationsByIdWithHttpInfo(string configurationId);
        /// <summary>
        /// List login configurations
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve list of login configurations
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ListLoginConfigurationOutput</returns>
        ListLoginConfigurationOutput ListLoginConfigurations(int? limit = default, string? exclusiveStartKey = default);

        /// <summary>
        /// List login configurations
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve list of login configurations
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of ListLoginConfigurationOutput</returns>
        ApiResponse<ListLoginConfigurationOutput> ListLoginConfigurationsWithHttpInfo(int? limit = default, string? exclusiveStartKey = default);
        /// <summary>
        /// Update login configurations by ID
        /// </summary>
        /// <remarks>
        /// Update login configurations by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="updateLoginConfigurationInput">UpdateLoginConfigurationsById (optional)</param>
        /// <returns>LoginConfigurationObject</returns>
        LoginConfigurationObject UpdateLoginConfigurationsById(string configurationId, UpdateLoginConfigurationInput? updateLoginConfigurationInput = default);

        /// <summary>
        /// Update login configurations by ID
        /// </summary>
        /// <remarks>
        /// Update login configurations by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="updateLoginConfigurationInput">UpdateLoginConfigurationsById (optional)</param>
        /// <returns>ApiResponse of LoginConfigurationObject</returns>
        ApiResponse<LoginConfigurationObject> UpdateLoginConfigurationsByIdWithHttpInfo(string configurationId, UpdateLoginConfigurationInput? updateLoginConfigurationInput = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new login configuration
        /// </summary>
        /// <remarks>
        /// Create a new login configuration  &#x60;vpDefinition&#x60; and &#x60;idTokenMapping&#x60; have default settings that provide user email VP presentation definitions.  An essential default definition is in place when it comes to the login process for end users using the Chrome extension.  This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoginConfigurationInput">CreateLoginConfigurations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateLoginConfigurationOutput</returns>
        System.Threading.Tasks.Task<CreateLoginConfigurationOutput> CreateLoginConfigurationsAsync(CreateLoginConfigurationInput? createLoginConfigurationInput = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new login configuration
        /// </summary>
        /// <remarks>
        /// Create a new login configuration  &#x60;vpDefinition&#x60; and &#x60;idTokenMapping&#x60; have default settings that provide user email VP presentation definitions.  An essential default definition is in place when it comes to the login process for end users using the Chrome extension.  This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoginConfigurationInput">CreateLoginConfigurations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateLoginConfigurationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLoginConfigurationOutput>> CreateLoginConfigurationsWithHttpInfoAsync(CreateLoginConfigurationInput? createLoginConfigurationInput = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete login configurations by ID
        /// </summary>
        /// <remarks>
        /// Delete login configurations by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLoginConfigurationsByIdAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete login configurations by ID
        /// </summary>
        /// <remarks>
        /// Delete login configurations by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoginConfigurationsByIdWithHttpInfoAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Client Metadata By  OAuth 2.0 Client ID
        /// </summary>
        /// <remarks>
        /// Get Client Metadata By  OAuth 2.0 Client ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginConfigurationClientMetadataOutput</returns>
        System.Threading.Tasks.Task<LoginConfigurationClientMetadataOutput> GetClientMetadataByClientIdAsync(string clientId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Client Metadata By  OAuth 2.0 Client ID
        /// </summary>
        /// <remarks>
        /// Get Client Metadata By  OAuth 2.0 Client ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginConfigurationClientMetadataOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginConfigurationClientMetadataOutput>> GetClientMetadataByClientIdWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get login configuration by ID
        /// </summary>
        /// <remarks>
        /// Get login configuration by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginConfigurationObject</returns>
        System.Threading.Tasks.Task<LoginConfigurationObject> GetLoginConfigurationsByIdAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get login configuration by ID
        /// </summary>
        /// <remarks>
        /// Get login configuration by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginConfigurationObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginConfigurationObject>> GetLoginConfigurationsByIdWithHttpInfoAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List login configurations
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve list of login configurations
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLoginConfigurationOutput</returns>
        System.Threading.Tasks.Task<ListLoginConfigurationOutput> ListLoginConfigurationsAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List login configurations
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve list of login configurations
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLoginConfigurationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListLoginConfigurationOutput>> ListLoginConfigurationsWithHttpInfoAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update login configurations by ID
        /// </summary>
        /// <remarks>
        /// Update login configurations by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="updateLoginConfigurationInput">UpdateLoginConfigurationsById (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginConfigurationObject</returns>
        System.Threading.Tasks.Task<LoginConfigurationObject> UpdateLoginConfigurationsByIdAsync(string configurationId, UpdateLoginConfigurationInput? updateLoginConfigurationInput = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update login configurations by ID
        /// </summary>
        /// <remarks>
        /// Update login configurations by ID
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="updateLoginConfigurationInput">UpdateLoginConfigurationsById (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginConfigurationObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginConfigurationObject>> UpdateLoginConfigurationsByIdWithHttpInfoAsync(string configurationId, UpdateLoginConfigurationInput? updateLoginConfigurationInput = default, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApi : IConfigurationApiSync, IConfigurationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigurationApi : IDisposable, IConfigurationApi
    {
        private AffinidiTdk.LoginConfigurationClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ConfigurationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ConfigurationApi(string basePath)
        {
            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.LoginConfigurationClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ConfigurationApi(AffinidiTdk.LoginConfigurationClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ConfigurationApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ConfigurationApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.LoginConfigurationClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ConfigurationApi(HttpClient client, AffinidiTdk.LoginConfigurationClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ConfigurationApi(AffinidiTdk.LoginConfigurationClient.Client.ISynchronousClient client, AffinidiTdk.LoginConfigurationClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.LoginConfigurationClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.LoginConfigurationClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new login configuration Create a new login configuration  &#x60;vpDefinition&#x60; and &#x60;idTokenMapping&#x60; have default settings that provide user email VP presentation definitions.  An essential default definition is in place when it comes to the login process for end users using the Chrome extension.  This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoginConfigurationInput">CreateLoginConfigurations (optional)</param>
        /// <returns>CreateLoginConfigurationOutput</returns>
        public CreateLoginConfigurationOutput CreateLoginConfigurations(CreateLoginConfigurationInput? createLoginConfigurationInput = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<CreateLoginConfigurationOutput> localVarResponse = CreateLoginConfigurationsWithHttpInfo(createLoginConfigurationInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new login configuration Create a new login configuration  &#x60;vpDefinition&#x60; and &#x60;idTokenMapping&#x60; have default settings that provide user email VP presentation definitions.  An essential default definition is in place when it comes to the login process for end users using the Chrome extension.  This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoginConfigurationInput">CreateLoginConfigurations (optional)</param>
        /// <returns>ApiResponse of CreateLoginConfigurationOutput</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<CreateLoginConfigurationOutput> CreateLoginConfigurationsWithHttpInfo(CreateLoginConfigurationInput? createLoginConfigurationInput = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createLoginConfigurationInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateLoginConfigurationOutput>("/v1/login/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLoginConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new login configuration Create a new login configuration  &#x60;vpDefinition&#x60; and &#x60;idTokenMapping&#x60; have default settings that provide user email VP presentation definitions.  An essential default definition is in place when it comes to the login process for end users using the Chrome extension.  This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoginConfigurationInput">CreateLoginConfigurations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateLoginConfigurationOutput</returns>
        public async System.Threading.Tasks.Task<CreateLoginConfigurationOutput> CreateLoginConfigurationsAsync(CreateLoginConfigurationInput? createLoginConfigurationInput = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<CreateLoginConfigurationOutput> localVarResponse = await CreateLoginConfigurationsWithHttpInfoAsync(createLoginConfigurationInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new login configuration Create a new login configuration  &#x60;vpDefinition&#x60; and &#x60;idTokenMapping&#x60; have default settings that provide user email VP presentation definitions.  An essential default definition is in place when it comes to the login process for end users using the Chrome extension.  This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service. 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoginConfigurationInput">CreateLoginConfigurations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateLoginConfigurationOutput)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<CreateLoginConfigurationOutput>> CreateLoginConfigurationsWithHttpInfoAsync(CreateLoginConfigurationInput? createLoginConfigurationInput = default, System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createLoginConfigurationInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateLoginConfigurationOutput>("/v1/login/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLoginConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete login configurations by ID Delete login configurations by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <returns></returns>
        public void DeleteLoginConfigurationsById(string configurationId)
        {
            DeleteLoginConfigurationsByIdWithHttpInfo(configurationId);
        }

        /// <summary>
        /// Delete login configurations by ID Delete login configurations by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object> DeleteLoginConfigurationsByIdWithHttpInfo(string configurationId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationApi->DeleteLoginConfigurationsById");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/login/configurations/{configurationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLoginConfigurationsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete login configurations by ID Delete login configurations by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLoginConfigurationsByIdAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteLoginConfigurationsByIdWithHttpInfoAsync(configurationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete login configurations by ID Delete login configurations by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object>> DeleteLoginConfigurationsByIdWithHttpInfoAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationApi->DeleteLoginConfigurationsById");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/login/configurations/{configurationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLoginConfigurationsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Metadata By  OAuth 2.0 Client ID Get Client Metadata By  OAuth 2.0 Client ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <returns>LoginConfigurationClientMetadataOutput</returns>
        public LoginConfigurationClientMetadataOutput GetClientMetadataByClientId(string clientId)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationClientMetadataOutput> localVarResponse = GetClientMetadataByClientIdWithHttpInfo(clientId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Metadata By  OAuth 2.0 Client ID Get Client Metadata By  OAuth 2.0 Client ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <returns>ApiResponse of LoginConfigurationClientMetadataOutput</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationClientMetadataOutput> GetClientMetadataByClientIdWithHttpInfo(string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'clientId' when calling ConfigurationApi->GetClientMetadataByClientId");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(clientId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<LoginConfigurationClientMetadataOutput>("/v1/login/configurations/metadata/{clientId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientMetadataByClientId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Metadata By  OAuth 2.0 Client ID Get Client Metadata By  OAuth 2.0 Client ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginConfigurationClientMetadataOutput</returns>
        public async System.Threading.Tasks.Task<LoginConfigurationClientMetadataOutput> GetClientMetadataByClientIdAsync(string clientId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationClientMetadataOutput> localVarResponse = await GetClientMetadataByClientIdWithHttpInfoAsync(clientId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Metadata By  OAuth 2.0 Client ID Get Client Metadata By  OAuth 2.0 Client ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginConfigurationClientMetadataOutput)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationClientMetadataOutput>> GetClientMetadataByClientIdWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'clientId' when calling ConfigurationApi->GetClientMetadataByClientId");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(clientId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoginConfigurationClientMetadataOutput>("/v1/login/configurations/metadata/{clientId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientMetadataByClientId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get login configuration by ID Get login configuration by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <returns>LoginConfigurationObject</returns>
        public LoginConfigurationObject GetLoginConfigurationsById(string configurationId)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationObject> localVarResponse = GetLoginConfigurationsByIdWithHttpInfo(configurationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get login configuration by ID Get login configuration by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <returns>ApiResponse of LoginConfigurationObject</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationObject> GetLoginConfigurationsByIdWithHttpInfo(string configurationId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationApi->GetLoginConfigurationsById");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoginConfigurationObject>("/v1/login/configurations/{configurationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoginConfigurationsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get login configuration by ID Get login configuration by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginConfigurationObject</returns>
        public async System.Threading.Tasks.Task<LoginConfigurationObject> GetLoginConfigurationsByIdAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationObject> localVarResponse = await GetLoginConfigurationsByIdWithHttpInfoAsync(configurationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get login configuration by ID Get login configuration by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginConfigurationObject)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationObject>> GetLoginConfigurationsByIdWithHttpInfoAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationApi->GetLoginConfigurationsById");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoginConfigurationObject>("/v1/login/configurations/{configurationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoginConfigurationsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List login configurations Endpoint to retrieve list of login configurations
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ListLoginConfigurationOutput</returns>
        public ListLoginConfigurationOutput ListLoginConfigurations(int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<ListLoginConfigurationOutput> localVarResponse = ListLoginConfigurationsWithHttpInfo(limit, exclusiveStartKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List login configurations Endpoint to retrieve list of login configurations
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of ListLoginConfigurationOutput</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<ListLoginConfigurationOutput> ListLoginConfigurationsWithHttpInfo(int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListLoginConfigurationOutput>("/v1/login/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoginConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List login configurations Endpoint to retrieve list of login configurations
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLoginConfigurationOutput</returns>
        public async System.Threading.Tasks.Task<ListLoginConfigurationOutput> ListLoginConfigurationsAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<ListLoginConfigurationOutput> localVarResponse = await ListLoginConfigurationsWithHttpInfoAsync(limit, exclusiveStartKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List login configurations Endpoint to retrieve list of login configurations
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLoginConfigurationOutput)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<ListLoginConfigurationOutput>> ListLoginConfigurationsWithHttpInfoAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListLoginConfigurationOutput>("/v1/login/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoginConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update login configurations by ID Update login configurations by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="updateLoginConfigurationInput">UpdateLoginConfigurationsById (optional)</param>
        /// <returns>LoginConfigurationObject</returns>
        public LoginConfigurationObject UpdateLoginConfigurationsById(string configurationId, UpdateLoginConfigurationInput? updateLoginConfigurationInput = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationObject> localVarResponse = UpdateLoginConfigurationsByIdWithHttpInfo(configurationId, updateLoginConfigurationInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update login configurations by ID Update login configurations by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="updateLoginConfigurationInput">UpdateLoginConfigurationsById (optional)</param>
        /// <returns>ApiResponse of LoginConfigurationObject</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationObject> UpdateLoginConfigurationsByIdWithHttpInfo(string configurationId, UpdateLoginConfigurationInput? updateLoginConfigurationInput = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationApi->UpdateLoginConfigurationsById");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = updateLoginConfigurationInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<LoginConfigurationObject>("/v1/login/configurations/{configurationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoginConfigurationsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update login configurations by ID Update login configurations by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="updateLoginConfigurationInput">UpdateLoginConfigurationsById (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginConfigurationObject</returns>
        public async System.Threading.Tasks.Task<LoginConfigurationObject> UpdateLoginConfigurationsByIdAsync(string configurationId, UpdateLoginConfigurationInput? updateLoginConfigurationInput = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationObject> localVarResponse = await UpdateLoginConfigurationsByIdWithHttpInfoAsync(configurationId, updateLoginConfigurationInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update login configurations by ID Update login configurations by ID
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">The id of the login configuration</param>
        /// <param name="updateLoginConfigurationInput">UpdateLoginConfigurationsById (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginConfigurationObject)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<LoginConfigurationObject>> UpdateLoginConfigurationsByIdWithHttpInfoAsync(string configurationId, UpdateLoginConfigurationInput? updateLoginConfigurationInput = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationApi->UpdateLoginConfigurationsById");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = updateLoginConfigurationInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<LoginConfigurationObject>("/v1/login/configurations/{configurationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoginConfigurationsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
