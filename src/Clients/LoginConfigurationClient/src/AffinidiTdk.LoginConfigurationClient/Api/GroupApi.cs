/*
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.LoginConfigurationClient.Client;
using AffinidiTdk.LoginConfigurationClient.Model;

namespace AffinidiTdk.LoginConfigurationClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="addUserToGroupInput">AddUserToGroup</param>
        /// <returns>GroupUserMappingDto</returns>
        GroupUserMappingDto AddUserToGroup(string groupName, AddUserToGroupInput addUserToGroupInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="addUserToGroupInput">AddUserToGroup</param>
        /// <returns>ApiResponse of GroupUserMappingDto</returns>
        ApiResponse<GroupUserMappingDto> AddUserToGroupWithHttpInfo(string groupName, AddUserToGroupInput addUserToGroupInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupInput">CreateGroup</param>
        /// <returns>GroupDto</returns>
        GroupDto CreateGroup(CreateGroupInput createGroupInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupInput">CreateGroup</param>
        /// <returns>ApiResponse of GroupDto</returns>
        ApiResponse<GroupDto> CreateGroupWithHttpInfo(CreateGroupInput createGroupInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <returns></returns>
        void DeleteGroup(string groupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo(string groupName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <returns>GroupDto</returns>
        GroupDto GetGroupById(string groupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <returns>ApiResponse of GroupDto</returns>
        ApiResponse<GroupDto> GetGroupByIdWithHttpInfo(string groupName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="sortOrder">sort response in specific order. By default it is in desc order (optional)</param>
        /// <returns>GroupUserMappingsList</returns>
        GroupUserMappingsList ListGroupUserMappings(string groupName, int? limit = default, string? exclusiveStartKey = default, string? sortOrder = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="sortOrder">sort response in specific order. By default it is in desc order (optional)</param>
        /// <returns>ApiResponse of GroupUserMappingsList</returns>
        ApiResponse<GroupUserMappingsList> ListGroupUserMappingsWithHttpInfo(string groupName, int? limit = default, string? exclusiveStartKey = default, string? sortOrder = default);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupsList</returns>
        GroupsList ListGroups();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupsList</returns>
        ApiResponse<GroupsList> ListGroupsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="removeUserFromGroupInput">Remove user from group</param>
        /// <returns></returns>
        void RemoveUserFromGroup(string groupName, RemoveUserFromGroupInput removeUserFromGroupInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="removeUserFromGroupInput">Remove user from group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserFromGroupWithHttpInfo(string groupName, RemoveUserFromGroupInput removeUserFromGroupInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="addUserToGroupInput">AddUserToGroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupUserMappingDto</returns>
        System.Threading.Tasks.Task<GroupUserMappingDto> AddUserToGroupAsync(string groupName, AddUserToGroupInput addUserToGroupInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="addUserToGroupInput">AddUserToGroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupUserMappingDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupUserMappingDto>> AddUserToGroupWithHttpInfoAsync(string groupName, AddUserToGroupInput addUserToGroupInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupInput">CreateGroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupDto</returns>
        System.Threading.Tasks.Task<GroupDto> CreateGroupAsync(CreateGroupInput createGroupInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupInput">CreateGroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupDto>> CreateGroupWithHttpInfoAsync(CreateGroupInput createGroupInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync(string groupName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(string groupName, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupDto</returns>
        System.Threading.Tasks.Task<GroupDto> GetGroupByIdAsync(string groupName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupDto>> GetGroupByIdWithHttpInfoAsync(string groupName, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="sortOrder">sort response in specific order. By default it is in desc order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupUserMappingsList</returns>
        System.Threading.Tasks.Task<GroupUserMappingsList> ListGroupUserMappingsAsync(string groupName, int? limit = default, string? exclusiveStartKey = default, string? sortOrder = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="sortOrder">sort response in specific order. By default it is in desc order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupUserMappingsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupUserMappingsList>> ListGroupUserMappingsWithHttpInfoAsync(string groupName, int? limit = default, string? exclusiveStartKey = default, string? sortOrder = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsList</returns>
        System.Threading.Tasks.Task<GroupsList> ListGroupsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupsList>> ListGroupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="removeUserFromGroupInput">Remove user from group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserFromGroupAsync(string groupName, RemoveUserFromGroupInput removeUserFromGroupInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="removeUserFromGroupInput">Remove user from group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserFromGroupWithHttpInfoAsync(string groupName, RemoveUserFromGroupInput removeUserFromGroupInput, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApi : IGroupApiSync, IGroupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupApi : IDisposable, IGroupApi
    {
        private AffinidiTdk.LoginConfigurationClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GroupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GroupApi(string basePath)
        {
            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.LoginConfigurationClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GroupApi(AffinidiTdk.LoginConfigurationClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.LoginConfigurationClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupApi(HttpClient client, AffinidiTdk.LoginConfigurationClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.LoginConfigurationClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.LoginConfigurationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.LoginConfigurationClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GroupApi(AffinidiTdk.LoginConfigurationClient.Client.ISynchronousClient client, AffinidiTdk.LoginConfigurationClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.LoginConfigurationClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.LoginConfigurationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.LoginConfigurationClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.LoginConfigurationClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="addUserToGroupInput">AddUserToGroup</param>
        /// <returns>GroupUserMappingDto</returns>
        public GroupUserMappingDto AddUserToGroup(string groupName, AddUserToGroupInput addUserToGroupInput)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupUserMappingDto> localVarResponse = AddUserToGroupWithHttpInfo(groupName, addUserToGroupInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="addUserToGroupInput">AddUserToGroup</param>
        /// <returns>ApiResponse of GroupUserMappingDto</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupUserMappingDto> AddUserToGroupWithHttpInfo(string groupName, AddUserToGroupInput addUserToGroupInput)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->AddUserToGroup");

            // verify the required parameter 'addUserToGroupInput' is set
            if (addUserToGroupInput == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'addUserToGroupInput' when calling GroupApi->AddUserToGroup");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = addUserToGroupInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupUserMappingDto>("/v1/groups/{groupName}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="addUserToGroupInput">AddUserToGroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupUserMappingDto</returns>
        public async System.Threading.Tasks.Task<GroupUserMappingDto> AddUserToGroupAsync(string groupName, AddUserToGroupInput addUserToGroupInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupUserMappingDto> localVarResponse = await AddUserToGroupWithHttpInfoAsync(groupName, addUserToGroupInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="addUserToGroupInput">AddUserToGroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupUserMappingDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupUserMappingDto>> AddUserToGroupWithHttpInfoAsync(string groupName, AddUserToGroupInput addUserToGroupInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->AddUserToGroup");

            // verify the required parameter 'addUserToGroupInput' is set
            if (addUserToGroupInput == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'addUserToGroupInput' when calling GroupApi->AddUserToGroup");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = addUserToGroupInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupUserMappingDto>("/v1/groups/{groupName}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupInput">CreateGroup</param>
        /// <returns>GroupDto</returns>
        public GroupDto CreateGroup(CreateGroupInput createGroupInput)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupDto> localVarResponse = CreateGroupWithHttpInfo(createGroupInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupInput">CreateGroup</param>
        /// <returns>ApiResponse of GroupDto</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupDto> CreateGroupWithHttpInfo(CreateGroupInput createGroupInput)
        {
            // verify the required parameter 'createGroupInput' is set
            if (createGroupInput == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'createGroupInput' when calling GroupApi->CreateGroup");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createGroupInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupDto>("/v1/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupInput">CreateGroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupDto</returns>
        public async System.Threading.Tasks.Task<GroupDto> CreateGroupAsync(CreateGroupInput createGroupInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupDto> localVarResponse = await CreateGroupWithHttpInfoAsync(createGroupInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupInput">CreateGroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupDto>> CreateGroupWithHttpInfoAsync(CreateGroupInput createGroupInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createGroupInput' is set
            if (createGroupInput == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'createGroupInput' when calling GroupApi->CreateGroup");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createGroupInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupDto>("/v1/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <returns></returns>
        public void DeleteGroup(string groupName)
        {
            DeleteGroupWithHttpInfo(groupName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object> DeleteGroupWithHttpInfo(string groupName)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->DeleteGroup");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/groups/{groupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync(string groupName, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteGroupWithHttpInfoAsync(groupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(string groupName, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->DeleteGroup");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/groups/{groupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <returns>GroupDto</returns>
        public GroupDto GetGroupById(string groupName)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupDto> localVarResponse = GetGroupByIdWithHttpInfo(groupName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <returns>ApiResponse of GroupDto</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupDto> GetGroupByIdWithHttpInfo(string groupName)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->GetGroupById");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupDto>("/v1/groups/{groupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupDto</returns>
        public async System.Threading.Tasks.Task<GroupDto> GetGroupByIdAsync(string groupName, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupDto> localVarResponse = await GetGroupByIdWithHttpInfoAsync(groupName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupDto>> GetGroupByIdWithHttpInfoAsync(string groupName, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->GetGroupById");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupDto>("/v1/groups/{groupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="sortOrder">sort response in specific order. By default it is in desc order (optional)</param>
        /// <returns>GroupUserMappingsList</returns>
        public GroupUserMappingsList ListGroupUserMappings(string groupName, int? limit = default, string? exclusiveStartKey = default, string? sortOrder = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupUserMappingsList> localVarResponse = ListGroupUserMappingsWithHttpInfo(groupName, limit, exclusiveStartKey, sortOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="sortOrder">sort response in specific order. By default it is in desc order (optional)</param>
        /// <returns>ApiResponse of GroupUserMappingsList</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupUserMappingsList> ListGroupUserMappingsWithHttpInfo(string groupName, int? limit = default, string? exclusiveStartKey = default, string? sortOrder = default)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->ListGroupUserMappings");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupUserMappingsList>("/v1/groups/{groupName}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGroupUserMappings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="sortOrder">sort response in specific order. By default it is in desc order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupUserMappingsList</returns>
        public async System.Threading.Tasks.Task<GroupUserMappingsList> ListGroupUserMappingsAsync(string groupName, int? limit = default, string? exclusiveStartKey = default, string? sortOrder = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupUserMappingsList> localVarResponse = await ListGroupUserMappingsWithHttpInfoAsync(groupName, limit, exclusiveStartKey, sortOrder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="sortOrder">sort response in specific order. By default it is in desc order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupUserMappingsList)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupUserMappingsList>> ListGroupUserMappingsWithHttpInfoAsync(string groupName, int? limit = default, string? exclusiveStartKey = default, string? sortOrder = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->ListGroupUserMappings");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupUserMappingsList>("/v1/groups/{groupName}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGroupUserMappings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupsList</returns>
        public GroupsList ListGroups()
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupsList> localVarResponse = ListGroupsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupsList</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupsList> ListGroupsWithHttpInfo()
        {
            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupsList>("/v1/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsList</returns>
        public async System.Threading.Tasks.Task<GroupsList> ListGroupsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupsList> localVarResponse = await ListGroupsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsList)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<GroupsList>> ListGroupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupsList>("/v1/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="removeUserFromGroupInput">Remove user from group</param>
        /// <returns></returns>
        public void RemoveUserFromGroup(string groupName, RemoveUserFromGroupInput removeUserFromGroupInput)
        {
            RemoveUserFromGroupWithHttpInfo(groupName, removeUserFromGroupInput);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="removeUserFromGroupInput">Remove user from group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object> RemoveUserFromGroupWithHttpInfo(string groupName, RemoveUserFromGroupInput removeUserFromGroupInput)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->RemoveUserFromGroup");

            // verify the required parameter 'removeUserFromGroupInput' is set
            if (removeUserFromGroupInput == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'removeUserFromGroupInput' when calling GroupApi->RemoveUserFromGroup");

            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = removeUserFromGroupInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/groups/{groupName}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserFromGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="removeUserFromGroupInput">Remove user from group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserFromGroupAsync(string groupName, RemoveUserFromGroupInput removeUserFromGroupInput, System.Threading.CancellationToken cancellationToken = default)
        {
            await RemoveUserFromGroupWithHttpInfoAsync(groupName, removeUserFromGroupInput, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.LoginConfigurationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName"></param>
        /// <param name="removeUserFromGroupInput">Remove user from group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.LoginConfigurationClient.Client.ApiResponse<Object>> RemoveUserFromGroupWithHttpInfoAsync(string groupName, RemoveUserFromGroupInput removeUserFromGroupInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupApi->RemoveUserFromGroup");

            // verify the required parameter 'removeUserFromGroupInput' is set
            if (removeUserFromGroupInput == null)
                throw new AffinidiTdk.LoginConfigurationClient.Client.ApiException(400, "Missing required parameter 'removeUserFromGroupInput' when calling GroupApi->RemoveUserFromGroup");


            AffinidiTdk.LoginConfigurationClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.LoginConfigurationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupName", AffinidiTdk.LoginConfigurationClient.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = removeUserFromGroupInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/groups/{groupName}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserFromGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
