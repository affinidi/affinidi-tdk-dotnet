/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// FlowDataStatusListsDetailsInner
    /// </summary>
    [DataContract(Name = "FlowData_statusListsDetails_inner")]
    public partial class FlowDataStatusListsDetailsInner : IValidatableObject
    {
        /// <summary>
        /// Purpose of status list to which credential is added
        /// </summary>
        /// <value>Purpose of status list to which credential is added</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusListPurposeEnum
        {
            /// <summary>
            /// Enum REVOKED for value: REVOKED
            /// </summary>
            [EnumMember(Value = "REVOKED")]
            REVOKED = 1
        }


        /// <summary>
        /// Purpose of status list to which credential is added
        /// </summary>
        /// <value>Purpose of status list to which credential is added</value>
        [DataMember(Name = "statusListPurpose", IsRequired = true, EmitDefaultValue = true)]
        public StatusListPurposeEnum StatusListPurpose { get; set; }
        /// <summary>
        /// Defines Standard
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StandardEnum
        {
            /// <summary>
            /// Enum RevocationList2020 for value: RevocationList2020
            /// </summary>
            [EnumMember(Value = "RevocationList2020")]
            RevocationList2020 = 1
        }


        /// <summary>
        /// Gets or Sets Standard
        /// </summary>
        [DataMember(Name = "standard", IsRequired = true, EmitDefaultValue = true)]
        public StandardEnum Standard { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowDataStatusListsDetailsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowDataStatusListsDetailsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowDataStatusListsDetailsInner" /> class.
        /// </summary>
        /// <param name="statusListPurpose">Purpose of status list to which credential is added (required).</param>
        /// <param name="statusListId">id of status list (required).</param>
        /// <param name="statusListIndex">as usual it is a number, but all standards use a string (required).</param>
        /// <param name="standard">standard (required).</param>
        /// <param name="isActive">indicates status is true or not. Default false. (required).</param>
        /// <param name="statusActivationReason">text reasoning why the status is true (if true). Optional..</param>
        /// <param name="statusActivatedAt">ISO 8601 string of the modification date/time the status. Optional..</param>
        public FlowDataStatusListsDetailsInner(StatusListPurposeEnum statusListPurpose = default, string statusListId = default, string statusListIndex = default, StandardEnum standard = default, bool isActive = default, string statusActivationReason = default, string statusActivatedAt = default)
        {
            this.StatusListPurpose = statusListPurpose;
            // to ensure "statusListId" is required (not null)
            if (statusListId == null)
            {
                throw new ArgumentNullException("statusListId is a required property for FlowDataStatusListsDetailsInner and cannot be null");
            }
            this.StatusListId = statusListId;
            // to ensure "statusListIndex" is required (not null)
            if (statusListIndex == null)
            {
                throw new ArgumentNullException("statusListIndex is a required property for FlowDataStatusListsDetailsInner and cannot be null");
            }
            this.StatusListIndex = statusListIndex;
            this.Standard = standard;
            this.IsActive = isActive;
            this.StatusActivationReason = statusActivationReason;
            this.StatusActivatedAt = statusActivatedAt;
        }

        /// <summary>
        /// id of status list
        /// </summary>
        /// <value>id of status list</value>
        [DataMember(Name = "statusListId", IsRequired = true, EmitDefaultValue = true)]
        public string StatusListId { get; set; }

        /// <summary>
        /// as usual it is a number, but all standards use a string
        /// </summary>
        /// <value>as usual it is a number, but all standards use a string</value>
        [DataMember(Name = "statusListIndex", IsRequired = true, EmitDefaultValue = true)]
        public string StatusListIndex { get; set; }

        /// <summary>
        /// indicates status is true or not. Default false.
        /// </summary>
        /// <value>indicates status is true or not. Default false.</value>
        [DataMember(Name = "isActive", IsRequired = true, EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// text reasoning why the status is true (if true). Optional.
        /// </summary>
        /// <value>text reasoning why the status is true (if true). Optional.</value>
        [DataMember(Name = "statusActivationReason", EmitDefaultValue = false)]
        public string StatusActivationReason { get; set; }

        /// <summary>
        /// ISO 8601 string of the modification date/time the status. Optional.
        /// </summary>
        /// <value>ISO 8601 string of the modification date/time the status. Optional.</value>
        [DataMember(Name = "statusActivatedAt", EmitDefaultValue = false)]
        public string StatusActivatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlowDataStatusListsDetailsInner {\n");
            sb.Append("  StatusListPurpose: ").Append(StatusListPurpose).Append("\n");
            sb.Append("  StatusListId: ").Append(StatusListId).Append("\n");
            sb.Append("  StatusListIndex: ").Append(StatusListIndex).Append("\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  StatusActivationReason: ").Append(StatusActivationReason).Append("\n");
            sb.Append("  StatusActivatedAt: ").Append(StatusActivatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
