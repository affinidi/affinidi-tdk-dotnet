/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// WellKnownOpenIdCredentialIssuerResponse
    /// </summary>
    [DataContract(Name = "WellKnownOpenIdCredentialIssuerResponse")]
    public partial class WellKnownOpenIdCredentialIssuerResponse : IValidatableObject
    {
        /// <summary>
        /// Defines GrantTypesSupported
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GrantTypesSupportedEnum
        {
            /// <summary>
            /// Enum AuthorizationCode for value: authorization_code
            /// </summary>
            [EnumMember(Value = "authorization_code")]
            AuthorizationCode = 1,

            /// <summary>
            /// Enum UrnietfparamsoauthgrantTypepreAuthorizedCode for value: urn:ietf:params:oauth:grant-type:pre-authorized_code
            /// </summary>
            [EnumMember(Value = "urn:ietf:params:oauth:grant-type:pre-authorized_code")]
            UrnietfparamsoauthgrantTypepreAuthorizedCode = 2
        }

        /// <summary>
        /// Defines ScopesSupported
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopesSupportedEnum
        {
            /// <summary>
            /// Enum Openid for value: openid
            /// </summary>
            [EnumMember(Value = "openid")]
            Openid = 1
        }

        /// <summary>
        /// Defines TokenEndpointAuthMethodsSupported
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TokenEndpointAuthMethodsSupportedEnum
        {
            /// <summary>
            /// Enum ClientSecretPost for value: client_secret_post
            /// </summary>
            [EnumMember(Value = "client_secret_post")]
            ClientSecretPost = 1,

            /// <summary>
            /// Enum ClientSecretBasic for value: client_secret_basic
            /// </summary>
            [EnumMember(Value = "client_secret_basic")]
            ClientSecretBasic = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 3
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WellKnownOpenIdCredentialIssuerResponse" /> class.
        /// </summary>
        /// <param name="authorizationEndpoint">authorizationEndpoint.</param>
        /// <param name="credentialEndpoint">credentialEndpoint.</param>
        /// <param name="credentialIssuer">credentialIssuer.</param>
        /// <param name="batchCredentialEndpoint">batchCredentialEndpoint.</param>
        /// <param name="credentialsSupported">credentialsSupported.</param>
        /// <param name="credentialConfigurationsSupported">credentialConfigurationsSupported.</param>
        /// <param name="deferredCredentialEndpoint">deferredCredentialEndpoint.</param>
        /// <param name="grantTypesSupported">grantTypesSupported.</param>
        /// <param name="jwksUri">jwksUri.</param>
        /// <param name="display">display.</param>
        /// <param name="scopesSupported">scopesSupported.</param>
        /// <param name="tokenEndpoint">tokenEndpoint.</param>
        /// <param name="tokenEndpointAuthMethodsSupported">tokenEndpointAuthMethodsSupported.</param>
        /// <param name="returnUris">returnUris.</param>
        public WellKnownOpenIdCredentialIssuerResponse(string authorizationEndpoint = default, string credentialEndpoint = default, string credentialIssuer = default, string batchCredentialEndpoint = default, List<WellKnownOpenIdCredentialIssuerResponseCredentialsSupportedInner> credentialsSupported = default, List<Object> credentialConfigurationsSupported = default, string deferredCredentialEndpoint = default, List<GrantTypesSupportedEnum> grantTypesSupported = default, string jwksUri = default, WellKnownOpenIdCredentialIssuerResponseDisplay display = default, List<ScopesSupportedEnum> scopesSupported = default, string tokenEndpoint = default, List<TokenEndpointAuthMethodsSupportedEnum> tokenEndpointAuthMethodsSupported = default, List<string> returnUris = default)
        {
            this.AuthorizationEndpoint = authorizationEndpoint;
            this.CredentialEndpoint = credentialEndpoint;
            this.CredentialIssuer = credentialIssuer;
            this.BatchCredentialEndpoint = batchCredentialEndpoint;
            this.CredentialsSupported = credentialsSupported;
            this.CredentialConfigurationsSupported = credentialConfigurationsSupported;
            this.DeferredCredentialEndpoint = deferredCredentialEndpoint;
            this.GrantTypesSupported = grantTypesSupported;
            this.JwksUri = jwksUri;
            this.Display = display;
            this.ScopesSupported = scopesSupported;
            this.TokenEndpoint = tokenEndpoint;
            this.TokenEndpointAuthMethodsSupported = tokenEndpointAuthMethodsSupported;
            this.ReturnUris = returnUris;
        }

        /// <summary>
        /// Gets or Sets AuthorizationEndpoint
        /// </summary>
        [DataMember(Name = "authorization_endpoint", EmitDefaultValue = false)]
        public string AuthorizationEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets CredentialEndpoint
        /// </summary>
        [DataMember(Name = "credential_endpoint", EmitDefaultValue = false)]
        public string CredentialEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets CredentialIssuer
        /// </summary>
        [DataMember(Name = "credential_issuer", EmitDefaultValue = false)]
        public string CredentialIssuer { get; set; }

        /// <summary>
        /// Gets or Sets BatchCredentialEndpoint
        /// </summary>
        [DataMember(Name = "batch_credential_endpoint", EmitDefaultValue = false)]
        public string BatchCredentialEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets CredentialsSupported
        /// </summary>
        [DataMember(Name = "credentials_supported", EmitDefaultValue = false)]
        public List<WellKnownOpenIdCredentialIssuerResponseCredentialsSupportedInner> CredentialsSupported { get; set; }

        /// <summary>
        /// Gets or Sets CredentialConfigurationsSupported
        /// </summary>
        [DataMember(Name = "credential_configurations_supported", EmitDefaultValue = false)]
        public List<Object> CredentialConfigurationsSupported { get; set; }

        /// <summary>
        /// Gets or Sets DeferredCredentialEndpoint
        /// </summary>
        [DataMember(Name = "deferred_credential_endpoint", EmitDefaultValue = false)]
        public string DeferredCredentialEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets GrantTypesSupported
        /// </summary>
        [DataMember(Name = "grant_types_supported", EmitDefaultValue = false)]
        public List<WellKnownOpenIdCredentialIssuerResponse.GrantTypesSupportedEnum> GrantTypesSupported { get; set; }

        /// <summary>
        /// Gets or Sets JwksUri
        /// </summary>
        [DataMember(Name = "jwks_uri", EmitDefaultValue = false)]
        public string JwksUri { get; set; }

        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name = "display", EmitDefaultValue = false)]
        public WellKnownOpenIdCredentialIssuerResponseDisplay Display { get; set; }

        /// <summary>
        /// Gets or Sets ScopesSupported
        /// </summary>
        [DataMember(Name = "scopes_supported", EmitDefaultValue = false)]
        public List<WellKnownOpenIdCredentialIssuerResponse.ScopesSupportedEnum> ScopesSupported { get; set; }

        /// <summary>
        /// Gets or Sets TokenEndpoint
        /// </summary>
        [DataMember(Name = "token_endpoint", EmitDefaultValue = false)]
        public string TokenEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets TokenEndpointAuthMethodsSupported
        /// </summary>
        [DataMember(Name = "token_endpoint_auth_methods_supported", EmitDefaultValue = false)]
        public List<WellKnownOpenIdCredentialIssuerResponse.TokenEndpointAuthMethodsSupportedEnum> TokenEndpointAuthMethodsSupported { get; set; }

        /// <summary>
        /// Gets or Sets ReturnUris
        /// </summary>
        [DataMember(Name = "return_uris", EmitDefaultValue = false)]
        public List<string> ReturnUris { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WellKnownOpenIdCredentialIssuerResponse {\n");
            sb.Append("  AuthorizationEndpoint: ").Append(AuthorizationEndpoint).Append("\n");
            sb.Append("  CredentialEndpoint: ").Append(CredentialEndpoint).Append("\n");
            sb.Append("  CredentialIssuer: ").Append(CredentialIssuer).Append("\n");
            sb.Append("  BatchCredentialEndpoint: ").Append(BatchCredentialEndpoint).Append("\n");
            sb.Append("  CredentialsSupported: ").Append(CredentialsSupported).Append("\n");
            sb.Append("  CredentialConfigurationsSupported: ").Append(CredentialConfigurationsSupported).Append("\n");
            sb.Append("  DeferredCredentialEndpoint: ").Append(DeferredCredentialEndpoint).Append("\n");
            sb.Append("  GrantTypesSupported: ").Append(GrantTypesSupported).Append("\n");
            sb.Append("  JwksUri: ").Append(JwksUri).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  ScopesSupported: ").Append(ScopesSupported).Append("\n");
            sb.Append("  TokenEndpoint: ").Append(TokenEndpoint).Append("\n");
            sb.Append("  TokenEndpointAuthMethodsSupported: ").Append(TokenEndpointAuthMethodsSupported).Append("\n");
            sb.Append("  ReturnUris: ").Append(ReturnUris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
