/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// StartIssuanceInputDataInnerStatusListDetailsInner
    /// </summary>
    [DataContract(Name = "StartIssuanceInput_data_inner_statusListDetails_inner")]
    public partial class StartIssuanceInputDataInnerStatusListDetailsInner : IValidatableObject
    {
        /// <summary>
        /// Defines Purpose
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurposeEnum
        {
            /// <summary>
            /// Enum REVOCABLE for value: REVOCABLE
            /// </summary>
            [EnumMember(Value = "REVOCABLE")]
            REVOCABLE = 1
        }


        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [DataMember(Name = "purpose", IsRequired = true, EmitDefaultValue = true)]
        public PurposeEnum Purpose { get; set; }
        /// <summary>
        /// Defines Standard
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StandardEnum
        {
            /// <summary>
            /// Enum RevocationList2020 for value: RevocationList2020
            /// </summary>
            [EnumMember(Value = "RevocationList2020")]
            RevocationList2020 = 1
        }


        /// <summary>
        /// Gets or Sets Standard
        /// </summary>
        [DataMember(Name = "standard", IsRequired = true, EmitDefaultValue = true)]
        public StandardEnum Standard { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartIssuanceInputDataInnerStatusListDetailsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StartIssuanceInputDataInnerStatusListDetailsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartIssuanceInputDataInnerStatusListDetailsInner" /> class.
        /// </summary>
        /// <param name="purpose">purpose (required).</param>
        /// <param name="standard">standard (required).</param>
        public StartIssuanceInputDataInnerStatusListDetailsInner(PurposeEnum purpose = default, StandardEnum standard = default)
        {
            this.Purpose = purpose;
            this.Standard = standard;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StartIssuanceInputDataInnerStatusListDetailsInner {\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
