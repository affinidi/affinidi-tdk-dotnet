/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// Object specifying whether the Authorization Server expects presentation of a Transaction Code by the End-User along with the Token Request in a Pre-Authorized Code Flow
    /// </summary>
    [DataContract(Name = "CredentialOfferResponse_grants_urn_ietf_params_oauth_grant_type_pre_authorized_code_tx_code")]
    public partial class CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode" /> class.
        /// </summary>
        /// <param name="length">Integer specifying the length of the Transaction Code.</param>
        /// <param name="inputMode">String specifying the input character set. Possible values are numeric (only digits) and text (any characters)..</param>
        /// <param name="description">String containing guidance for the Holder of the Wallet on how to obtain the Transaction Code.</param>
        public CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode(decimal length = default, string inputMode = default, string description = default)
        {
            this.Length = length;
            this.InputMode = inputMode;
            this.Description = description;
        }

        /// <summary>
        /// Integer specifying the length of the Transaction Code
        /// </summary>
        /// <value>Integer specifying the length of the Transaction Code</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public decimal Length { get; set; }

        /// <summary>
        /// String specifying the input character set. Possible values are numeric (only digits) and text (any characters).
        /// </summary>
        /// <value>String specifying the input character set. Possible values are numeric (only digits) and text (any characters).</value>
        [DataMember(Name = "input_mode", EmitDefaultValue = false)]
        public string InputMode { get; set; }

        /// <summary>
        /// String containing guidance for the Holder of the Wallet on how to obtain the Transaction Code
        /// </summary>
        /// <value>String containing guidance for the Holder of the Wallet on how to obtain the Transaction Code</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  InputMode: ").Append(InputMode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
