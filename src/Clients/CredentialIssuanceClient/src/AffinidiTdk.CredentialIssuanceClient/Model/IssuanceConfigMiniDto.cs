/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// IssuanceConfigMiniDto
    /// </summary>
    [DataContract(Name = "IssuanceConfigMiniDto")]
    public partial class IssuanceConfigMiniDto : IValidatableObject
    {
        /// <summary>
        /// String identifying the format of this Credential, i.e., jwt_vc_json-ld or ldp_vc. Depending on the format value, the object contains further elements defining the type
        /// </summary>
        /// <value>String identifying the format of this Credential, i.e., jwt_vc_json-ld or ldp_vc. Depending on the format value, the object contains further elements defining the type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum LdpVc for value: ldp_vc
            /// </summary>
            [EnumMember(Value = "ldp_vc")]
            LdpVc = 1,

            /// <summary>
            /// Enum JwtVcJsonLd for value: jwt_vc_json-ld
            /// </summary>
            [EnumMember(Value = "jwt_vc_json-ld")]
            JwtVcJsonLd = 2,

            /// <summary>
            /// Enum SdJwtVcJsonLd for value: sd_jwt_vc_json-ld
            /// </summary>
            [EnumMember(Value = "sd_jwt_vc_json-ld")]
            SdJwtVcJsonLd = 3
        }


        /// <summary>
        /// String identifying the format of this Credential, i.e., jwt_vc_json-ld or ldp_vc. Depending on the format value, the object contains further elements defining the type
        /// </summary>
        /// <value>String identifying the format of this Credential, i.e., jwt_vc_json-ld or ldp_vc. Depending on the format value, the object contains further elements defining the type</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuanceConfigMiniDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssuanceConfigMiniDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuanceConfigMiniDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="issuerDid">Issuer DID.</param>
        /// <param name="issuerWalletId">Issuer Wallet id.</param>
        /// <param name="credentialOfferDuration">credential offer duration in second.</param>
        /// <param name="cNonceDuration">c_nonce duration in second.</param>
        /// <param name="format">String identifying the format of this Credential, i.e., jwt_vc_json-ld or ldp_vc. Depending on the format value, the object contains further elements defining the type.</param>
        /// <param name="issuerUri">Issuer URI.</param>
        /// <param name="issuerMetadata">Issuer public information wallet may want to show to user during consent confirmation.</param>
        /// <param name="varVersion">varVersion.</param>
        public IssuanceConfigMiniDto(string id = default, string name = default, string issuerDid = default, string issuerWalletId = default, decimal credentialOfferDuration = default, decimal cNonceDuration = default, FormatEnum? format = default, string issuerUri = default, Dictionary<string, Object> issuerMetadata = default, decimal varVersion = default)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for IssuanceConfigMiniDto and cannot be null");
            }
            this.Id = id;
            this.Name = name;
            this.IssuerDid = issuerDid;
            this.IssuerWalletId = issuerWalletId;
            this.CredentialOfferDuration = credentialOfferDuration;
            this.CNonceDuration = cNonceDuration;
            this.Format = format;
            this.IssuerUri = issuerUri;
            this.IssuerMetadata = issuerMetadata;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Issuer DID
        /// </summary>
        /// <value>Issuer DID</value>
        [DataMember(Name = "issuerDid", EmitDefaultValue = false)]
        public string IssuerDid { get; set; }

        /// <summary>
        /// Issuer Wallet id
        /// </summary>
        /// <value>Issuer Wallet id</value>
        [DataMember(Name = "issuerWalletId", EmitDefaultValue = false)]
        public string IssuerWalletId { get; set; }

        /// <summary>
        /// credential offer duration in second
        /// </summary>
        /// <value>credential offer duration in second</value>
        [DataMember(Name = "credentialOfferDuration", EmitDefaultValue = false)]
        public decimal CredentialOfferDuration { get; set; }

        /// <summary>
        /// c_nonce duration in second
        /// </summary>
        /// <value>c_nonce duration in second</value>
        [DataMember(Name = "cNonceDuration", EmitDefaultValue = false)]
        public decimal CNonceDuration { get; set; }

        /// <summary>
        /// Issuer URI
        /// </summary>
        /// <value>Issuer URI</value>
        [DataMember(Name = "issuerUri", EmitDefaultValue = false)]
        public string IssuerUri { get; set; }

        /// <summary>
        /// Issuer public information wallet may want to show to user during consent confirmation
        /// </summary>
        /// <value>Issuer public information wallet may want to show to user during consent confirmation</value>
        [DataMember(Name = "issuerMetadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> IssuerMetadata { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public decimal VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuanceConfigMiniDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IssuerDid: ").Append(IssuerDid).Append("\n");
            sb.Append("  IssuerWalletId: ").Append(IssuerWalletId).Append("\n");
            sb.Append("  CredentialOfferDuration: ").Append(CredentialOfferDuration).Append("\n");
            sb.Append("  CNonceDuration: ").Append(CNonceDuration).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  IssuerUri: ").Append(IssuerUri).Append("\n");
            sb.Append("  IssuerMetadata: ").Append(IssuerMetadata).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
