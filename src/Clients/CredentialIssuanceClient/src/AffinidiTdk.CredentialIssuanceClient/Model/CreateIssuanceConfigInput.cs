/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// CreateIssuanceConfigInput
    /// </summary>
    [DataContract(Name = "CreateIssuanceConfigInput")]
    public partial class CreateIssuanceConfigInput : IValidatableObject
    {
        /// <summary>
        /// String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object contains further elements defining the type
        /// </summary>
        /// <value>String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object contains further elements defining the type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum LdpVc for value: ldp_vc
            /// </summary>
            [EnumMember(Value = "ldp_vc")]
            LdpVc = 1,

            /// <summary>
            /// Enum JwtVcJsonLd for value: jwt_vc_json-ld
            /// </summary>
            [EnumMember(Value = "jwt_vc_json-ld")]
            JwtVcJsonLd = 2,

            /// <summary>
            /// Enum SdJwtVcJsonLd for value: sd_jwt_vc_json-ld
            /// </summary>
            [EnumMember(Value = "sd_jwt_vc_json-ld")]
            SdJwtVcJsonLd = 3
        }


        /// <summary>
        /// String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object contains further elements defining the type
        /// </summary>
        /// <value>String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object contains further elements defining the type</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIssuanceConfigInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateIssuanceConfigInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIssuanceConfigInput" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="issuerWalletId">Issuer Wallet id (required).</param>
        /// <param name="credentialOfferDuration">credential offer duration in second.</param>
        /// <param name="format">String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object contains further elements defining the type.</param>
        /// <param name="credentialSupported">credentialSupported (required).</param>
        /// <param name="issuerMetadata">Issuer public information wallet may want to show to user during consent confirmation.</param>
        /// <param name="returnUris">List of allowed URIs to be returned to after issuance.</param>
        /// <param name="webhook">webhook.</param>
        public CreateIssuanceConfigInput(string name = default, string description = default, string issuerWalletId = default, decimal credentialOfferDuration = default, FormatEnum? format = default, List<CredentialSupportedObject> credentialSupported = default, Dictionary<string, Object> issuerMetadata = default, List<string> returnUris = default, CisConfigurationWebhookSetting webhook = default)
        {
            // to ensure "issuerWalletId" is required (not null)
            if (issuerWalletId == null)
            {
                throw new ArgumentNullException("issuerWalletId is a required property for CreateIssuanceConfigInput and cannot be null");
            }
            this.IssuerWalletId = issuerWalletId;
            // to ensure "credentialSupported" is required (not null)
            if (credentialSupported == null)
            {
                throw new ArgumentNullException("credentialSupported is a required property for CreateIssuanceConfigInput and cannot be null");
            }
            this.CredentialSupported = credentialSupported;
            this.Name = name;
            this.Description = description;
            this.CredentialOfferDuration = credentialOfferDuration;
            this.Format = format;
            this.IssuerMetadata = issuerMetadata;
            this.ReturnUris = returnUris;
            this.Webhook = webhook;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Issuer Wallet id
        /// </summary>
        /// <value>Issuer Wallet id</value>
        [DataMember(Name = "issuerWalletId", IsRequired = true, EmitDefaultValue = true)]
        public string IssuerWalletId { get; set; }

        /// <summary>
        /// credential offer duration in second
        /// </summary>
        /// <value>credential offer duration in second</value>
        [DataMember(Name = "credentialOfferDuration", EmitDefaultValue = false)]
        public decimal CredentialOfferDuration { get; set; }

        /// <summary>
        /// Gets or Sets CredentialSupported
        /// </summary>
        [DataMember(Name = "credentialSupported", IsRequired = true, EmitDefaultValue = true)]
        public List<CredentialSupportedObject> CredentialSupported { get; set; }

        /// <summary>
        /// Issuer public information wallet may want to show to user during consent confirmation
        /// </summary>
        /// <value>Issuer public information wallet may want to show to user during consent confirmation</value>
        [DataMember(Name = "issuerMetadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> IssuerMetadata { get; set; }

        /// <summary>
        /// List of allowed URIs to be returned to after issuance
        /// </summary>
        /// <value>List of allowed URIs to be returned to after issuance</value>
        [DataMember(Name = "returnUris", EmitDefaultValue = false)]
        public List<string> ReturnUris { get; set; }

        /// <summary>
        /// Gets or Sets Webhook
        /// </summary>
        [DataMember(Name = "webhook", EmitDefaultValue = false)]
        public CisConfigurationWebhookSetting Webhook { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateIssuanceConfigInput {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IssuerWalletId: ").Append(IssuerWalletId).Append("\n");
            sb.Append("  CredentialOfferDuration: ").Append(CredentialOfferDuration).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  CredentialSupported: ").Append(CredentialSupported).Append("\n");
            sb.Append("  IssuerMetadata: ").Append(IssuerMetadata).Append("\n");
            sb.Append("  ReturnUris: ").Append(ReturnUris).Append("\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Name != null)
            {
                // Name (string) pattern
                Regex regexName = new Regex(@"^(?!\s*$).+", RegexOptions.CultureInvariant);
                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new[] { "Name" });
                }
            }

            // CredentialOfferDuration (decimal) maximum
            if (this.CredentialOfferDuration > (decimal)604801)
            {
                yield return new ValidationResult("Invalid value for CredentialOfferDuration, must be a value less than or equal to 604801.", new[] { "CredentialOfferDuration" });
            }

            // CredentialOfferDuration (decimal) minimum
            if (this.CredentialOfferDuration < (decimal)1)
            {
                yield return new ValidationResult("Invalid value for CredentialOfferDuration, must be a value greater than or equal to 1.", new[] { "CredentialOfferDuration" });
            }

            yield break;
        }
    }

}
