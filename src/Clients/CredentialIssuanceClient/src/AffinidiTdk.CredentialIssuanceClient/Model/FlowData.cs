/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// FlowData
    /// </summary>
    [DataContract(Name = "FlowData")]
    public partial class FlowData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowData" /> class.
        /// </summary>
        /// <param name="createdAt">[GEN] ISO 8601 string of the creation date/time the entity (required).</param>
        /// <param name="modifiedAt">[GEN] ISO 8601 string of the modification date/time the entity (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="flowId">flowId (required).</param>
        /// <param name="credentialTypeId">credentialTypeId (required).</param>
        /// <param name="jsonLdContextUrl">jsonLdContextUrl (required).</param>
        /// <param name="jsonSchemaUrl">jsonSchemaUrl (required).</param>
        /// <param name="configurationId">Id of configuration, used to issue VC..</param>
        /// <param name="issuedAt">when credential was issued to the holder (holder invoked generateCredentials endpoint).</param>
        /// <param name="walletId">Id of wallet, used to issue VC..</param>
        /// <param name="projectIdConfigurationId">Id of configuration with which VC was issued. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{configurationId}\&quot;.</param>
        /// <param name="projectIdConfigurationIdWalletId">Id of wallet which issued VC. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{walletId}\&quot;.</param>
        /// <param name="projectIdConfigurationIdCredentialType">VC.type value. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{credentialType}\&quot;.</param>
        /// <param name="statusListsDetails">statusListsDetails.</param>
        public FlowData(string createdAt = default, string modifiedAt = default, string id = default, string projectId = default, string flowId = default, string credentialTypeId = default, string jsonLdContextUrl = default, string jsonSchemaUrl = default, string configurationId = default, string issuedAt = default, string walletId = default, string projectIdConfigurationId = default, string projectIdConfigurationIdWalletId = default, string projectIdConfigurationIdCredentialType = default, List<FlowDataStatusListsDetailsInner> statusListsDetails = default)
        {
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for FlowData and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "modifiedAt" is required (not null)
            if (modifiedAt == null)
            {
                throw new ArgumentNullException("modifiedAt is a required property for FlowData and cannot be null");
            }
            this.ModifiedAt = modifiedAt;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FlowData and cannot be null");
            }
            this.Id = id;
            // to ensure "flowId" is required (not null)
            if (flowId == null)
            {
                throw new ArgumentNullException("flowId is a required property for FlowData and cannot be null");
            }
            this.FlowId = flowId;
            // to ensure "credentialTypeId" is required (not null)
            if (credentialTypeId == null)
            {
                throw new ArgumentNullException("credentialTypeId is a required property for FlowData and cannot be null");
            }
            this.CredentialTypeId = credentialTypeId;
            // to ensure "jsonLdContextUrl" is required (not null)
            if (jsonLdContextUrl == null)
            {
                throw new ArgumentNullException("jsonLdContextUrl is a required property for FlowData and cannot be null");
            }
            this.JsonLdContextUrl = jsonLdContextUrl;
            // to ensure "jsonSchemaUrl" is required (not null)
            if (jsonSchemaUrl == null)
            {
                throw new ArgumentNullException("jsonSchemaUrl is a required property for FlowData and cannot be null");
            }
            this.JsonSchemaUrl = jsonSchemaUrl;
            this.ProjectId = projectId;
            this.ConfigurationId = configurationId;
            this.IssuedAt = issuedAt;
            this.WalletId = walletId;
            this.ProjectIdConfigurationId = projectIdConfigurationId;
            this.ProjectIdConfigurationIdWalletId = projectIdConfigurationIdWalletId;
            this.ProjectIdConfigurationIdCredentialType = projectIdConfigurationIdCredentialType;
            this.StatusListsDetails = statusListsDetails;
        }

        /// <summary>
        /// [GEN] ISO 8601 string of the creation date/time the entity
        /// </summary>
        /// <value>[GEN] ISO 8601 string of the creation date/time the entity</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// [GEN] ISO 8601 string of the modification date/time the entity
        /// </summary>
        /// <value>[GEN] ISO 8601 string of the modification date/time the entity</value>
        [DataMember(Name = "modifiedAt", IsRequired = true, EmitDefaultValue = true)]
        public string ModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets FlowId
        /// </summary>
        [DataMember(Name = "flowId", IsRequired = true, EmitDefaultValue = true)]
        public string FlowId { get; set; }

        /// <summary>
        /// Gets or Sets CredentialTypeId
        /// </summary>
        [DataMember(Name = "credentialTypeId", IsRequired = true, EmitDefaultValue = true)]
        public string CredentialTypeId { get; set; }

        /// <summary>
        /// Gets or Sets JsonLdContextUrl
        /// </summary>
        [DataMember(Name = "jsonLdContextUrl", IsRequired = true, EmitDefaultValue = true)]
        public string JsonLdContextUrl { get; set; }

        /// <summary>
        /// Gets or Sets JsonSchemaUrl
        /// </summary>
        [DataMember(Name = "jsonSchemaUrl", IsRequired = true, EmitDefaultValue = true)]
        public string JsonSchemaUrl { get; set; }

        /// <summary>
        /// Id of configuration, used to issue VC.
        /// </summary>
        /// <value>Id of configuration, used to issue VC.</value>
        [DataMember(Name = "configurationId", EmitDefaultValue = false)]
        public string ConfigurationId { get; set; }

        /// <summary>
        /// when credential was issued to the holder (holder invoked generateCredentials endpoint)
        /// </summary>
        /// <value>when credential was issued to the holder (holder invoked generateCredentials endpoint)</value>
        [DataMember(Name = "issuedAt", EmitDefaultValue = false)]
        public string IssuedAt { get; set; }

        /// <summary>
        /// Id of wallet, used to issue VC.
        /// </summary>
        /// <value>Id of wallet, used to issue VC.</value>
        [DataMember(Name = "walletId", EmitDefaultValue = false)]
        public string WalletId { get; set; }

        /// <summary>
        /// Id of configuration with which VC was issued. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{configurationId}\&quot;
        /// </summary>
        /// <value>Id of configuration with which VC was issued. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{configurationId}\&quot;</value>
        [DataMember(Name = "projectIdConfigurationId", EmitDefaultValue = false)]
        public string ProjectIdConfigurationId { get; set; }

        /// <summary>
        /// Id of wallet which issued VC. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{walletId}\&quot;
        /// </summary>
        /// <value>Id of wallet which issued VC. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{walletId}\&quot;</value>
        [DataMember(Name = "projectIdConfigurationIdWalletId", EmitDefaultValue = false)]
        public string ProjectIdConfigurationIdWalletId { get; set; }

        /// <summary>
        /// VC.type value. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{credentialType}\&quot;
        /// </summary>
        /// <value>VC.type value. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{credentialType}\&quot;</value>
        [DataMember(Name = "projectIdConfigurationIdCredentialType", EmitDefaultValue = false)]
        public string ProjectIdConfigurationIdCredentialType { get; set; }

        /// <summary>
        /// Gets or Sets StatusListsDetails
        /// </summary>
        [DataMember(Name = "statusListsDetails", EmitDefaultValue = false)]
        public List<FlowDataStatusListsDetailsInner> StatusListsDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlowData {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  FlowId: ").Append(FlowId).Append("\n");
            sb.Append("  CredentialTypeId: ").Append(CredentialTypeId).Append("\n");
            sb.Append("  JsonLdContextUrl: ").Append(JsonLdContextUrl).Append("\n");
            sb.Append("  JsonSchemaUrl: ").Append(JsonSchemaUrl).Append("\n");
            sb.Append("  ConfigurationId: ").Append(ConfigurationId).Append("\n");
            sb.Append("  IssuedAt: ").Append(IssuedAt).Append("\n");
            sb.Append("  WalletId: ").Append(WalletId).Append("\n");
            sb.Append("  ProjectIdConfigurationId: ").Append(ProjectIdConfigurationId).Append("\n");
            sb.Append("  ProjectIdConfigurationIdWalletId: ").Append(ProjectIdConfigurationIdWalletId).Append("\n");
            sb.Append("  ProjectIdConfigurationIdCredentialType: ").Append(ProjectIdConfigurationIdCredentialType).Append("\n");
            sb.Append("  StatusListsDetails: ").Append(StatusListsDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
