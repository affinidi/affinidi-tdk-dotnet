/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// CredentialResponseImmediate
    /// </summary>
    [DataContract(Name = "CredentialResponseImmediate")]
    public partial class CredentialResponseImmediate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialResponseImmediate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CredentialResponseImmediate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialResponseImmediate" /> class.
        /// </summary>
        /// <param name="credential">credential (required).</param>
        /// <param name="cNonce">String containing a nonce to be used when creating a proof of possession of the key proof (required).</param>
        /// <param name="cNonceExpiresIn">cNonceExpiresIn (required).</param>
        public CredentialResponseImmediate(CredentialResponseImmediateCredential credential = default, string cNonce = default, CredentialResponseImmediateCNonceExpiresIn cNonceExpiresIn = default)
        {
            // to ensure "credential" is required (not null)
            if (credential == null)
            {
                throw new ArgumentNullException("credential is a required property for CredentialResponseImmediate and cannot be null");
            }
            this.Credential = credential;
            // to ensure "cNonce" is required (not null)
            if (cNonce == null)
            {
                throw new ArgumentNullException("cNonce is a required property for CredentialResponseImmediate and cannot be null");
            }
            this.CNonce = cNonce;
            // to ensure "cNonceExpiresIn" is required (not null)
            if (cNonceExpiresIn == null)
            {
                throw new ArgumentNullException("cNonceExpiresIn is a required property for CredentialResponseImmediate and cannot be null");
            }
            this.CNonceExpiresIn = cNonceExpiresIn;
        }

        /// <summary>
        /// Gets or Sets Credential
        /// </summary>
        [DataMember(Name = "credential", IsRequired = true, EmitDefaultValue = true)]
        public CredentialResponseImmediateCredential Credential { get; set; }

        /// <summary>
        /// String containing a nonce to be used when creating a proof of possession of the key proof
        /// </summary>
        /// <value>String containing a nonce to be used when creating a proof of possession of the key proof</value>
        [DataMember(Name = "c_nonce", IsRequired = true, EmitDefaultValue = true)]
        public string CNonce { get; set; }

        /// <summary>
        /// Gets or Sets CNonceExpiresIn
        /// </summary>
        [DataMember(Name = "c_nonce_expires_in", IsRequired = true, EmitDefaultValue = true)]
        public CredentialResponseImmediateCNonceExpiresIn CNonceExpiresIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CredentialResponseImmediate {\n");
            sb.Append("  Credential: ").Append(Credential).Append("\n");
            sb.Append("  CNonce: ").Append(CNonce).Append("\n");
            sb.Append("  CNonceExpiresIn: ").Append(CNonceExpiresIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
