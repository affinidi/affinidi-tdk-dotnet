/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialIssuanceClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialIssuanceClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialIssuanceClient.Model
{
    /// <summary>
    /// StartIssuanceInput
    /// </summary>
    [DataContract(Name = "StartIssuanceInput")]
    public partial class StartIssuanceInput : IValidatableObject
    {
        /// <summary>
        /// In TX_CODE claim mode, additional transaction code will be generated and the Authorization Server expects presentation of the transaction Code by the end-user. If FIXED_HOLDER claim mode is defined, holderDid must be present and service will not generate additional transaction code (NORMAL claimMode is deprecated).
        /// </summary>
        /// <value>In TX_CODE claim mode, additional transaction code will be generated and the Authorization Server expects presentation of the transaction Code by the end-user. If FIXED_HOLDER claim mode is defined, holderDid must be present and service will not generate additional transaction code (NORMAL claimMode is deprecated).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClaimModeEnum
        {
            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 1,

            /// <summary>
            /// Enum TXCODE for value: TX_CODE
            /// </summary>
            [EnumMember(Value = "TX_CODE")]
            TXCODE = 2,

            /// <summary>
            /// Enum FIXEDHOLDER for value: FIXED_HOLDER
            /// </summary>
            [EnumMember(Value = "FIXED_HOLDER")]
            FIXEDHOLDER = 3
        }


        /// <summary>
        /// In TX_CODE claim mode, additional transaction code will be generated and the Authorization Server expects presentation of the transaction Code by the end-user. If FIXED_HOLDER claim mode is defined, holderDid must be present and service will not generate additional transaction code (NORMAL claimMode is deprecated).
        /// </summary>
        /// <value>In TX_CODE claim mode, additional transaction code will be generated and the Authorization Server expects presentation of the transaction Code by the end-user. If FIXED_HOLDER claim mode is defined, holderDid must be present and service will not generate additional transaction code (NORMAL claimMode is deprecated).</value>
        [DataMember(Name = "claimMode", EmitDefaultValue = false)]
        public ClaimModeEnum? ClaimMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartIssuanceInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StartIssuanceInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartIssuanceInput" /> class.
        /// </summary>
        /// <param name="claimMode">In TX_CODE claim mode, additional transaction code will be generated and the Authorization Server expects presentation of the transaction Code by the end-user. If FIXED_HOLDER claim mode is defined, holderDid must be present and service will not generate additional transaction code (NORMAL claimMode is deprecated)..</param>
        /// <param name="holderDid">Holder DID.</param>
        /// <param name="issuanceId">Website&#39;s internal identifier. Website may use to get info about the status of issuance flow. If it is not provided, CIS will generate one..</param>
        /// <param name="data">data (required).</param>
        public StartIssuanceInput(ClaimModeEnum? claimMode = default, string holderDid = default, string issuanceId = default, List<StartIssuanceInputDataInner> data = default)
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for StartIssuanceInput and cannot be null");
            }
            this.Data = data;
            this.ClaimMode = claimMode;
            this.HolderDid = holderDid;
            this.IssuanceId = issuanceId;
        }

        /// <summary>
        /// Holder DID
        /// </summary>
        /// <value>Holder DID</value>
        [DataMember(Name = "holderDid", EmitDefaultValue = false)]
        public string HolderDid { get; set; }

        /// <summary>
        /// Website&#39;s internal identifier. Website may use to get info about the status of issuance flow. If it is not provided, CIS will generate one.
        /// </summary>
        /// <value>Website&#39;s internal identifier. Website may use to get info about the status of issuance flow. If it is not provided, CIS will generate one.</value>
        [DataMember(Name = "issuanceId", EmitDefaultValue = false)]
        public string IssuanceId { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public List<StartIssuanceInputDataInner> Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StartIssuanceInput {\n");
            sb.Append("  ClaimMode: ").Append(ClaimMode).Append("\n");
            sb.Append("  HolderDid: ").Append(HolderDid).Append("\n");
            sb.Append("  IssuanceId: ").Append(IssuanceId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.HolderDid != null) {
                // HolderDid (string) pattern
                Regex regexHolderDid = new Regex(@"^did:.+$", RegexOptions.CultureInvariant);
                if (!regexHolderDid.Match(this.HolderDid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HolderDid, must match a pattern of " + regexHolderDid, new [] { "HolderDid" });
                }
            }

            yield break;
        }
    }

}
