/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.CredentialIssuanceClient.Client;
using AffinidiTdk.CredentialIssuanceClient.Model;

namespace AffinidiTdk.CredentialIssuanceClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// change credential status.
        /// </summary>
        /// <remarks>
        /// change credential status.
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="changeCredentialStatusInput">Request body for changing credential status</param>
        /// <returns>FlowData</returns>
        FlowData ChangeCredentialStatus(string projectId, string configurationId, ChangeCredentialStatusInput changeCredentialStatusInput);

        /// <summary>
        /// change credential status.
        /// </summary>
        /// <remarks>
        /// change credential status.
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="changeCredentialStatusInput">Request body for changing credential status</param>
        /// <returns>ApiResponse of FlowData</returns>
        ApiResponse<FlowData> ChangeCredentialStatusWithHttpInfo(string projectId, string configurationId, ChangeCredentialStatusInput changeCredentialStatusInput);
        /// <summary>
        /// List records
        /// </summary>
        /// <remarks>
        /// Retrieve a list of issuance data records.
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="configurationId">The id of the issuance configuration</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <returns>ListIssuanceRecordResponse</returns>
        ListIssuanceRecordResponse ListIssuanceDataRecords(string projectId, string configurationId, int? limit = default, string? exclusiveStartKey = default);

        /// <summary>
        /// List records
        /// </summary>
        /// <remarks>
        /// Retrieve a list of issuance data records.
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="configurationId">The id of the issuance configuration</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <returns>ApiResponse of ListIssuanceRecordResponse</returns>
        ApiResponse<ListIssuanceRecordResponse> ListIssuanceDataRecordsWithHttpInfo(string projectId, string configurationId, int? limit = default, string? exclusiveStartKey = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// change credential status.
        /// </summary>
        /// <remarks>
        /// change credential status.
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="changeCredentialStatusInput">Request body for changing credential status</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowData</returns>
        System.Threading.Tasks.Task<FlowData> ChangeCredentialStatusAsync(string projectId, string configurationId, ChangeCredentialStatusInput changeCredentialStatusInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// change credential status.
        /// </summary>
        /// <remarks>
        /// change credential status.
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="changeCredentialStatusInput">Request body for changing credential status</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowData)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowData>> ChangeCredentialStatusWithHttpInfoAsync(string projectId, string configurationId, ChangeCredentialStatusInput changeCredentialStatusInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List records
        /// </summary>
        /// <remarks>
        /// Retrieve a list of issuance data records.
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="configurationId">The id of the issuance configuration</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListIssuanceRecordResponse</returns>
        System.Threading.Tasks.Task<ListIssuanceRecordResponse> ListIssuanceDataRecordsAsync(string projectId, string configurationId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List records
        /// </summary>
        /// <remarks>
        /// Retrieve a list of issuance data records.
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="configurationId">The id of the issuance configuration</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListIssuanceRecordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListIssuanceRecordResponse>> ListIssuanceDataRecordsWithHttpInfoAsync(string projectId, string configurationId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDisposable, IDefaultApi
    {
        private AffinidiTdk.CredentialIssuanceClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.CredentialIssuanceClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.CredentialIssuanceClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.CredentialIssuanceClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DefaultApi(AffinidiTdk.CredentialIssuanceClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.CredentialIssuanceClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.CredentialIssuanceClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.CredentialIssuanceClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.CredentialIssuanceClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.CredentialIssuanceClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, AffinidiTdk.CredentialIssuanceClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.CredentialIssuanceClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.CredentialIssuanceClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DefaultApi(AffinidiTdk.CredentialIssuanceClient.Client.ISynchronousClient client, AffinidiTdk.CredentialIssuanceClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.CredentialIssuanceClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.CredentialIssuanceClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.CredentialIssuanceClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.CredentialIssuanceClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.CredentialIssuanceClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.CredentialIssuanceClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// change credential status. change credential status.
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="changeCredentialStatusInput">Request body for changing credential status</param>
        /// <returns>FlowData</returns>
        public FlowData ChangeCredentialStatus(string projectId, string configurationId, ChangeCredentialStatusInput changeCredentialStatusInput)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<FlowData> localVarResponse = ChangeCredentialStatusWithHttpInfo(projectId, configurationId, changeCredentialStatusInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// change credential status. change credential status.
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="changeCredentialStatusInput">Request body for changing credential status</param>
        /// <returns>ApiResponse of FlowData</returns>
        public AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<FlowData> ChangeCredentialStatusWithHttpInfo(string projectId, string configurationId, ChangeCredentialStatusInput changeCredentialStatusInput)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ChangeCredentialStatus");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling DefaultApi->ChangeCredentialStatus");

            // verify the required parameter 'changeCredentialStatusInput' is set
            if (changeCredentialStatusInput == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'changeCredentialStatusInput' when calling DefaultApi->ChangeCredentialStatus");

            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = changeCredentialStatusInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FlowData>("/v1/{projectId}/configurations/{configurationId}/issuance/change-status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeCredentialStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// change credential status. change credential status.
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="changeCredentialStatusInput">Request body for changing credential status</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowData</returns>
        public async System.Threading.Tasks.Task<FlowData> ChangeCredentialStatusAsync(string projectId, string configurationId, ChangeCredentialStatusInput changeCredentialStatusInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<FlowData> localVarResponse = await ChangeCredentialStatusWithHttpInfoAsync(projectId, configurationId, changeCredentialStatusInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// change credential status. change credential status.
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="changeCredentialStatusInput">Request body for changing credential status</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowData)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<FlowData>> ChangeCredentialStatusWithHttpInfoAsync(string projectId, string configurationId, ChangeCredentialStatusInput changeCredentialStatusInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ChangeCredentialStatus");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling DefaultApi->ChangeCredentialStatus");

            // verify the required parameter 'changeCredentialStatusInput' is set
            if (changeCredentialStatusInput == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'changeCredentialStatusInput' when calling DefaultApi->ChangeCredentialStatus");


            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = changeCredentialStatusInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FlowData>("/v1/{projectId}/configurations/{configurationId}/issuance/change-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeCredentialStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List records Retrieve a list of issuance data records.
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="configurationId">The id of the issuance configuration</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <returns>ListIssuanceRecordResponse</returns>
        public ListIssuanceRecordResponse ListIssuanceDataRecords(string projectId, string configurationId, int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ListIssuanceRecordResponse> localVarResponse = ListIssuanceDataRecordsWithHttpInfo(projectId, configurationId, limit, exclusiveStartKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List records Retrieve a list of issuance data records.
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="configurationId">The id of the issuance configuration</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <returns>ApiResponse of ListIssuanceRecordResponse</returns>
        public AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ListIssuanceRecordResponse> ListIssuanceDataRecordsWithHttpInfo(string projectId, string configurationId, int? limit = default, string? exclusiveStartKey = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ListIssuanceDataRecords");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling DefaultApi->ListIssuanceDataRecords");

            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListIssuanceRecordResponse>("/v1/{projectId}/configurations/{configurationId}/issuance/issuance-data-records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIssuanceDataRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List records Retrieve a list of issuance data records.
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="configurationId">The id of the issuance configuration</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListIssuanceRecordResponse</returns>
        public async System.Threading.Tasks.Task<ListIssuanceRecordResponse> ListIssuanceDataRecordsAsync(string projectId, string configurationId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ListIssuanceRecordResponse> localVarResponse = await ListIssuanceDataRecordsWithHttpInfoAsync(projectId, configurationId, limit, exclusiveStartKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List records Retrieve a list of issuance data records.
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="configurationId">The id of the issuance configuration</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListIssuanceRecordResponse)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ListIssuanceRecordResponse>> ListIssuanceDataRecordsWithHttpInfoAsync(string projectId, string configurationId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ListIssuanceDataRecords");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling DefaultApi->ListIssuanceDataRecords");


            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListIssuanceRecordResponse>("/v1/{projectId}/configurations/{configurationId}/issuance/issuance-data-records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIssuanceDataRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
