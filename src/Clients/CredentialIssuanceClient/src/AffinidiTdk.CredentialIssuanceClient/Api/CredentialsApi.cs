/*
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.CredentialIssuanceClient.Client;
using AffinidiTdk.CredentialIssuanceClient.Model;

namespace AffinidiTdk.CredentialIssuanceClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICredentialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Allows wallets to claim multiple credentials at once.
        /// </summary>
        /// <remarks>
        /// Allows wallets to claim multiple credentials at once. For authentication, it uses a token from the authorization server
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="batchCredentialInput">Request body for batch credential</param>
        /// <returns>BatchCredentialResponse</returns>
        BatchCredentialResponse BatchCredential(string projectId, BatchCredentialInput batchCredentialInput);

        /// <summary>
        /// Allows wallets to claim multiple credentials at once.
        /// </summary>
        /// <remarks>
        /// Allows wallets to claim multiple credentials at once. For authentication, it uses a token from the authorization server
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="batchCredentialInput">Request body for batch credential</param>
        /// <returns>ApiResponse of BatchCredentialResponse</returns>
        ApiResponse<BatchCredentialResponse> BatchCredentialWithHttpInfo(string projectId, BatchCredentialInput batchCredentialInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Issue credential for end user upon presentation a valid access token. Since we don&#39;t immediate issue credential It&#39;s expected to return &#x60;transaction_id&#x60; and use this &#x60;transaction_id&#x60; to get the deferred credentials
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="createCredentialInput">Request body to issue credentials</param>
        /// <returns>CredentialResponse</returns>
        CredentialResponse GenerateCredentials(string projectId, CreateCredentialInput createCredentialInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Issue credential for end user upon presentation a valid access token. Since we don&#39;t immediate issue credential It&#39;s expected to return &#x60;transaction_id&#x60; and use this &#x60;transaction_id&#x60; to get the deferred credentials
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="createCredentialInput">Request body to issue credentials</param>
        /// <returns>ApiResponse of CredentialResponse</returns>
        ApiResponse<CredentialResponse> GenerateCredentialsWithHttpInfo(string projectId, CreateCredentialInput createCredentialInput);
        /// <summary>
        /// Get claimed credential in the specified range
        /// </summary>
        /// <remarks>
        /// Get claimed credential in the specified range
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="rangeStartTime"></param>
        /// <param name="rangeEndTime"> (optional)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ClaimedCredentialListResponse</returns>
        ClaimedCredentialListResponse GetClaimedCredentials(string projectId, string configurationId, string rangeStartTime, string? rangeEndTime = default, string? exclusiveStartKey = default, int? limit = default);

        /// <summary>
        /// Get claimed credential in the specified range
        /// </summary>
        /// <remarks>
        /// Get claimed credential in the specified range
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="rangeStartTime"></param>
        /// <param name="rangeEndTime"> (optional)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ApiResponse of ClaimedCredentialListResponse</returns>
        ApiResponse<ClaimedCredentialListResponse> GetClaimedCredentialsWithHttpInfo(string projectId, string configurationId, string rangeStartTime, string? rangeEndTime = default, string? exclusiveStartKey = default, int? limit = default);
        /// <summary>
        /// Get claimed VC linked to the issuanceId
        /// </summary>
        /// <remarks>
        /// Get claimed VC linked to the issuanceId
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="issuanceId">issuance id</param>
        /// <returns>ClaimedCredentialResponse</returns>
        ClaimedCredentialResponse GetIssuanceIdClaimedCredential(string projectId, string configurationId, string issuanceId);

        /// <summary>
        /// Get claimed VC linked to the issuanceId
        /// </summary>
        /// <remarks>
        /// Get claimed VC linked to the issuanceId
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="issuanceId">issuance id</param>
        /// <returns>ApiResponse of ClaimedCredentialResponse</returns>
        ApiResponse<ClaimedCredentialResponse> GetIssuanceIdClaimedCredentialWithHttpInfo(string projectId, string configurationId, string issuanceId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICredentialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Allows wallets to claim multiple credentials at once.
        /// </summary>
        /// <remarks>
        /// Allows wallets to claim multiple credentials at once. For authentication, it uses a token from the authorization server
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="batchCredentialInput">Request body for batch credential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCredentialResponse</returns>
        System.Threading.Tasks.Task<BatchCredentialResponse> BatchCredentialAsync(string projectId, BatchCredentialInput batchCredentialInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Allows wallets to claim multiple credentials at once.
        /// </summary>
        /// <remarks>
        /// Allows wallets to claim multiple credentials at once. For authentication, it uses a token from the authorization server
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="batchCredentialInput">Request body for batch credential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCredentialResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchCredentialResponse>> BatchCredentialWithHttpInfoAsync(string projectId, BatchCredentialInput batchCredentialInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Issue credential for end user upon presentation a valid access token. Since we don&#39;t immediate issue credential It&#39;s expected to return &#x60;transaction_id&#x60; and use this &#x60;transaction_id&#x60; to get the deferred credentials
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="createCredentialInput">Request body to issue credentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CredentialResponse</returns>
        System.Threading.Tasks.Task<CredentialResponse> GenerateCredentialsAsync(string projectId, CreateCredentialInput createCredentialInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Issue credential for end user upon presentation a valid access token. Since we don&#39;t immediate issue credential It&#39;s expected to return &#x60;transaction_id&#x60; and use this &#x60;transaction_id&#x60; to get the deferred credentials
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="createCredentialInput">Request body to issue credentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CredentialResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CredentialResponse>> GenerateCredentialsWithHttpInfoAsync(string projectId, CreateCredentialInput createCredentialInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get claimed credential in the specified range
        /// </summary>
        /// <remarks>
        /// Get claimed credential in the specified range
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="rangeStartTime"></param>
        /// <param name="rangeEndTime"> (optional)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimedCredentialListResponse</returns>
        System.Threading.Tasks.Task<ClaimedCredentialListResponse> GetClaimedCredentialsAsync(string projectId, string configurationId, string rangeStartTime, string? rangeEndTime = default, string? exclusiveStartKey = default, int? limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get claimed credential in the specified range
        /// </summary>
        /// <remarks>
        /// Get claimed credential in the specified range
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="rangeStartTime"></param>
        /// <param name="rangeEndTime"> (optional)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimedCredentialListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClaimedCredentialListResponse>> GetClaimedCredentialsWithHttpInfoAsync(string projectId, string configurationId, string rangeStartTime, string? rangeEndTime = default, string? exclusiveStartKey = default, int? limit = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get claimed VC linked to the issuanceId
        /// </summary>
        /// <remarks>
        /// Get claimed VC linked to the issuanceId
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="issuanceId">issuance id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimedCredentialResponse</returns>
        System.Threading.Tasks.Task<ClaimedCredentialResponse> GetIssuanceIdClaimedCredentialAsync(string projectId, string configurationId, string issuanceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get claimed VC linked to the issuanceId
        /// </summary>
        /// <remarks>
        /// Get claimed VC linked to the issuanceId
        /// </remarks>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="issuanceId">issuance id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimedCredentialResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClaimedCredentialResponse>> GetIssuanceIdClaimedCredentialWithHttpInfoAsync(string projectId, string configurationId, string issuanceId, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICredentialsApi : ICredentialsApiSync, ICredentialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CredentialsApi : IDisposable, ICredentialsApi
    {
        private AffinidiTdk.CredentialIssuanceClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CredentialsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CredentialsApi(string basePath)
        {
            this.Configuration = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.CredentialIssuanceClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.CredentialIssuanceClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.CredentialIssuanceClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CredentialsApi(AffinidiTdk.CredentialIssuanceClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.CredentialIssuanceClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.CredentialIssuanceClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CredentialsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CredentialsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.CredentialIssuanceClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.CredentialIssuanceClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.CredentialIssuanceClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CredentialsApi(HttpClient client, AffinidiTdk.CredentialIssuanceClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.CredentialIssuanceClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.CredentialIssuanceClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CredentialsApi(AffinidiTdk.CredentialIssuanceClient.Client.ISynchronousClient client, AffinidiTdk.CredentialIssuanceClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.CredentialIssuanceClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.CredentialIssuanceClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.CredentialIssuanceClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.CredentialIssuanceClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.CredentialIssuanceClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.CredentialIssuanceClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.CredentialIssuanceClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Allows wallets to claim multiple credentials at once. Allows wallets to claim multiple credentials at once. For authentication, it uses a token from the authorization server
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="batchCredentialInput">Request body for batch credential</param>
        /// <returns>BatchCredentialResponse</returns>
        public BatchCredentialResponse BatchCredential(string projectId, BatchCredentialInput batchCredentialInput)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<BatchCredentialResponse> localVarResponse = BatchCredentialWithHttpInfo(projectId, batchCredentialInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows wallets to claim multiple credentials at once. Allows wallets to claim multiple credentials at once. For authentication, it uses a token from the authorization server
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="batchCredentialInput">Request body for batch credential</param>
        /// <returns>ApiResponse of BatchCredentialResponse</returns>
        public AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<BatchCredentialResponse> BatchCredentialWithHttpInfo(string projectId, BatchCredentialInput batchCredentialInput)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling CredentialsApi->BatchCredential");

            // verify the required parameter 'batchCredentialInput' is set
            if (batchCredentialInput == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'batchCredentialInput' when calling CredentialsApi->BatchCredential");

            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = batchCredentialInput;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchCredentialResponse>("/v1/{projectId}/batch_credential", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchCredential", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows wallets to claim multiple credentials at once. Allows wallets to claim multiple credentials at once. For authentication, it uses a token from the authorization server
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="batchCredentialInput">Request body for batch credential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCredentialResponse</returns>
        public async System.Threading.Tasks.Task<BatchCredentialResponse> BatchCredentialAsync(string projectId, BatchCredentialInput batchCredentialInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<BatchCredentialResponse> localVarResponse = await BatchCredentialWithHttpInfoAsync(projectId, batchCredentialInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows wallets to claim multiple credentials at once. Allows wallets to claim multiple credentials at once. For authentication, it uses a token from the authorization server
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="batchCredentialInput">Request body for batch credential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCredentialResponse)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<BatchCredentialResponse>> BatchCredentialWithHttpInfoAsync(string projectId, BatchCredentialInput batchCredentialInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling CredentialsApi->BatchCredential");

            // verify the required parameter 'batchCredentialInput' is set
            if (batchCredentialInput == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'batchCredentialInput' when calling CredentialsApi->BatchCredential");


            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = batchCredentialInput;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchCredentialResponse>("/v1/{projectId}/batch_credential", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchCredential", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Issue credential for end user upon presentation a valid access token. Since we don&#39;t immediate issue credential It&#39;s expected to return &#x60;transaction_id&#x60; and use this &#x60;transaction_id&#x60; to get the deferred credentials
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="createCredentialInput">Request body to issue credentials</param>
        /// <returns>CredentialResponse</returns>
        public CredentialResponse GenerateCredentials(string projectId, CreateCredentialInput createCredentialInput)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<CredentialResponse> localVarResponse = GenerateCredentialsWithHttpInfo(projectId, createCredentialInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Issue credential for end user upon presentation a valid access token. Since we don&#39;t immediate issue credential It&#39;s expected to return &#x60;transaction_id&#x60; and use this &#x60;transaction_id&#x60; to get the deferred credentials
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="createCredentialInput">Request body to issue credentials</param>
        /// <returns>ApiResponse of CredentialResponse</returns>
        public AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<CredentialResponse> GenerateCredentialsWithHttpInfo(string projectId, CreateCredentialInput createCredentialInput)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling CredentialsApi->GenerateCredentials");

            // verify the required parameter 'createCredentialInput' is set
            if (createCredentialInput == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'createCredentialInput' when calling CredentialsApi->GenerateCredentials");

            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = createCredentialInput;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CredentialResponse>("/v1/{projectId}/credential", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Issue credential for end user upon presentation a valid access token. Since we don&#39;t immediate issue credential It&#39;s expected to return &#x60;transaction_id&#x60; and use this &#x60;transaction_id&#x60; to get the deferred credentials
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="createCredentialInput">Request body to issue credentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CredentialResponse</returns>
        public async System.Threading.Tasks.Task<CredentialResponse> GenerateCredentialsAsync(string projectId, CreateCredentialInput createCredentialInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<CredentialResponse> localVarResponse = await GenerateCredentialsWithHttpInfoAsync(projectId, createCredentialInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Issue credential for end user upon presentation a valid access token. Since we don&#39;t immediate issue credential It&#39;s expected to return &#x60;transaction_id&#x60; and use this &#x60;transaction_id&#x60; to get the deferred credentials
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Affinidi project id</param>
        /// <param name="createCredentialInput">Request body to issue credentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CredentialResponse)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<CredentialResponse>> GenerateCredentialsWithHttpInfoAsync(string projectId, CreateCredentialInput createCredentialInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling CredentialsApi->GenerateCredentials");

            // verify the required parameter 'createCredentialInput' is set
            if (createCredentialInput == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'createCredentialInput' when calling CredentialsApi->GenerateCredentials");


            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = createCredentialInput;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CredentialResponse>("/v1/{projectId}/credential", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get claimed credential in the specified range Get claimed credential in the specified range
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="rangeStartTime"></param>
        /// <param name="rangeEndTime"> (optional)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ClaimedCredentialListResponse</returns>
        public ClaimedCredentialListResponse GetClaimedCredentials(string projectId, string configurationId, string rangeStartTime, string? rangeEndTime = default, string? exclusiveStartKey = default, int? limit = default)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ClaimedCredentialListResponse> localVarResponse = GetClaimedCredentialsWithHttpInfo(projectId, configurationId, rangeStartTime, rangeEndTime, exclusiveStartKey, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get claimed credential in the specified range Get claimed credential in the specified range
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="rangeStartTime"></param>
        /// <param name="rangeEndTime"> (optional)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ApiResponse of ClaimedCredentialListResponse</returns>
        public AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ClaimedCredentialListResponse> GetClaimedCredentialsWithHttpInfo(string projectId, string configurationId, string rangeStartTime, string? rangeEndTime = default, string? exclusiveStartKey = default, int? limit = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling CredentialsApi->GetClaimedCredentials");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling CredentialsApi->GetClaimedCredentials");

            // verify the required parameter 'rangeStartTime' is set
            if (rangeStartTime == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'rangeStartTime' when calling CredentialsApi->GetClaimedCredentials");

            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "rangeStartTime", rangeStartTime));
            if (rangeEndTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "rangeEndTime", rangeEndTime));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClaimedCredentialListResponse>("/v1/{projectId}/configurations/{configurationId}/credentials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClaimedCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get claimed credential in the specified range Get claimed credential in the specified range
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="rangeStartTime"></param>
        /// <param name="rangeEndTime"> (optional)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimedCredentialListResponse</returns>
        public async System.Threading.Tasks.Task<ClaimedCredentialListResponse> GetClaimedCredentialsAsync(string projectId, string configurationId, string rangeStartTime, string? rangeEndTime = default, string? exclusiveStartKey = default, int? limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ClaimedCredentialListResponse> localVarResponse = await GetClaimedCredentialsWithHttpInfoAsync(projectId, configurationId, rangeStartTime, rangeEndTime, exclusiveStartKey, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get claimed credential in the specified range Get claimed credential in the specified range
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="rangeStartTime"></param>
        /// <param name="rangeEndTime"> (optional)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimedCredentialListResponse)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ClaimedCredentialListResponse>> GetClaimedCredentialsWithHttpInfoAsync(string projectId, string configurationId, string rangeStartTime, string? rangeEndTime = default, string? exclusiveStartKey = default, int? limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling CredentialsApi->GetClaimedCredentials");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling CredentialsApi->GetClaimedCredentials");

            // verify the required parameter 'rangeStartTime' is set
            if (rangeStartTime == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'rangeStartTime' when calling CredentialsApi->GetClaimedCredentials");


            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "rangeStartTime", rangeStartTime));
            if (rangeEndTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "rangeEndTime", rangeEndTime));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ClaimedCredentialListResponse>("/v1/{projectId}/configurations/{configurationId}/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClaimedCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get claimed VC linked to the issuanceId Get claimed VC linked to the issuanceId
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="issuanceId">issuance id</param>
        /// <returns>ClaimedCredentialResponse</returns>
        public ClaimedCredentialResponse GetIssuanceIdClaimedCredential(string projectId, string configurationId, string issuanceId)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ClaimedCredentialResponse> localVarResponse = GetIssuanceIdClaimedCredentialWithHttpInfo(projectId, configurationId, issuanceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get claimed VC linked to the issuanceId Get claimed VC linked to the issuanceId
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="issuanceId">issuance id</param>
        /// <returns>ApiResponse of ClaimedCredentialResponse</returns>
        public AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ClaimedCredentialResponse> GetIssuanceIdClaimedCredentialWithHttpInfo(string projectId, string configurationId, string issuanceId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling CredentialsApi->GetIssuanceIdClaimedCredential");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling CredentialsApi->GetIssuanceIdClaimedCredential");

            // verify the required parameter 'issuanceId' is set
            if (issuanceId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'issuanceId' when calling CredentialsApi->GetIssuanceIdClaimedCredential");

            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("issuanceId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(issuanceId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClaimedCredentialResponse>("/v1/{projectId}/configurations/{configurationId}/issuances/{issuanceId}/credentials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuanceIdClaimedCredential", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get claimed VC linked to the issuanceId Get claimed VC linked to the issuanceId
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="issuanceId">issuance id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimedCredentialResponse</returns>
        public async System.Threading.Tasks.Task<ClaimedCredentialResponse> GetIssuanceIdClaimedCredentialAsync(string projectId, string configurationId, string issuanceId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ClaimedCredentialResponse> localVarResponse = await GetIssuanceIdClaimedCredentialWithHttpInfoAsync(projectId, configurationId, issuanceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get claimed VC linked to the issuanceId Get claimed VC linked to the issuanceId
        /// </summary>
        /// <exception cref="AffinidiTdk.CredentialIssuanceClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project id</param>
        /// <param name="configurationId">configuration id</param>
        /// <param name="issuanceId">issuance id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimedCredentialResponse)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.CredentialIssuanceClient.Client.ApiResponse<ClaimedCredentialResponse>> GetIssuanceIdClaimedCredentialWithHttpInfoAsync(string projectId, string configurationId, string issuanceId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling CredentialsApi->GetIssuanceIdClaimedCredential");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling CredentialsApi->GetIssuanceIdClaimedCredential");

            // verify the required parameter 'issuanceId' is set
            if (issuanceId == null)
                throw new AffinidiTdk.CredentialIssuanceClient.Client.ApiException(400, "Missing required parameter 'issuanceId' when calling CredentialsApi->GetIssuanceIdClaimedCredential");


            AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.CredentialIssuanceClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("issuanceId", AffinidiTdk.CredentialIssuanceClient.Client.ClientUtils.ParameterToString(issuanceId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ClaimedCredentialResponse>("/v1/{projectId}/configurations/{configurationId}/issuances/{issuanceId}/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuanceIdClaimedCredential", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
