/*
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.IamClient.Client;

namespace AffinidiTdk.IamClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1AuthProxyDelete(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1AuthProxyDeleteWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1AuthProxyGet(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1AuthProxyGetWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1AuthProxyPatch(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1AuthProxyPatchWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1AuthProxyPost(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1AuthProxyPostWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1AuthProxyPut(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1AuthProxyPutWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1IdpProxyDelete(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1IdpProxyDeleteWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1IdpProxyGet(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1IdpProxyGetWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1IdpProxyPatch(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1IdpProxyPatchWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1IdpProxyPost(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1IdpProxyPostWithHttpInfo(string proxy);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        void V1IdpProxyPut(string proxy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1IdpProxyPutWithHttpInfo(string proxy);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1AuthProxyDeleteAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1AuthProxyDeleteWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1AuthProxyGetAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1AuthProxyGetWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1AuthProxyPatchAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1AuthProxyPatchWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1AuthProxyPostAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1AuthProxyPostWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1AuthProxyPutAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1AuthProxyPutWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1IdpProxyDeleteAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1IdpProxyDeleteWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1IdpProxyGetAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1IdpProxyGetWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1IdpProxyPatchAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1IdpProxyPatchWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1IdpProxyPostAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1IdpProxyPostWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1IdpProxyPutAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1IdpProxyPutWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDisposable, IDefaultApi
    {
        private AffinidiTdk.IamClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = AffinidiTdk.IamClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IamClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IamClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IamClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DefaultApi(AffinidiTdk.IamClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.IamClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IamClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IamClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IamClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IamClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IamClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IamClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, AffinidiTdk.IamClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IamClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IamClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IamClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DefaultApi(AffinidiTdk.IamClient.Client.ISynchronousClient client, AffinidiTdk.IamClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.IamClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.IamClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.IamClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.IamClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.IamClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.IamClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1AuthProxyDelete(string proxy)
        {
            V1AuthProxyDeleteWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1AuthProxyDeleteWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyDelete");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1AuthProxyDeleteAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1AuthProxyDeleteWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1AuthProxyDeleteWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyDelete");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1AuthProxyGet(string proxy)
        {
            V1AuthProxyGetWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1AuthProxyGetWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyGet");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1AuthProxyGetAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1AuthProxyGetWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1AuthProxyGetWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyGet");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1AuthProxyPatch(string proxy)
        {
            V1AuthProxyPatchWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1AuthProxyPatchWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyPatch");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1AuthProxyPatchAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1AuthProxyPatchWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1AuthProxyPatchWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyPatch");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1AuthProxyPost(string proxy)
        {
            V1AuthProxyPostWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1AuthProxyPostWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyPost");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1AuthProxyPostAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1AuthProxyPostWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1AuthProxyPostWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyPost");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1AuthProxyPut(string proxy)
        {
            V1AuthProxyPutWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1AuthProxyPutWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyPut");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1AuthProxyPutAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1AuthProxyPutWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1AuthProxyPutWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1AuthProxyPut");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/auth/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AuthProxyPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1IdpProxyDelete(string proxy)
        {
            V1IdpProxyDeleteWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1IdpProxyDeleteWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyDelete");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1IdpProxyDeleteAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1IdpProxyDeleteWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1IdpProxyDeleteWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyDelete");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1IdpProxyGet(string proxy)
        {
            V1IdpProxyGetWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1IdpProxyGetWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyGet");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1IdpProxyGetAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1IdpProxyGetWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1IdpProxyGetWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyGet");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1IdpProxyPatch(string proxy)
        {
            V1IdpProxyPatchWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1IdpProxyPatchWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyPatch");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1IdpProxyPatchAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1IdpProxyPatchWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1IdpProxyPatchWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyPatch");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1IdpProxyPost(string proxy)
        {
            V1IdpProxyPostWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1IdpProxyPostWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyPost");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1IdpProxyPostAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1IdpProxyPostWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1IdpProxyPostWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyPost");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public void V1IdpProxyPut(string proxy)
        {
            V1IdpProxyPutWithHttpInfo(proxy);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> V1IdpProxyPutWithHttpInfo(string proxy)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyPut");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1IdpProxyPutAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            await V1IdpProxyPutWithHttpInfoAsync(proxy, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> V1IdpProxyPutWithHttpInfoAsync(string proxy, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'proxy' is set
            if (proxy == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'proxy' when calling DefaultApi->V1IdpProxyPut");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("proxy", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(proxy)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/idp/{proxy+}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1IdpProxyPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
