/*
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.IamClient.Client;
using AffinidiTdk.IamClient.Model;

namespace AffinidiTdk.IamClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToProjectInput">AddPrincipalToProject</param>
        /// <returns></returns>
        void AddPrincipalToProject(AddUserToProjectInput addUserToProjectInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToProjectInput">AddPrincipalToProject</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPrincipalToProjectWithHttpInfo(AddUserToProjectInput addUserToProjectInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProjectInput">CreateProject</param>
        /// <returns>ProjectDto</returns>
        ProjectDto CreateProject(CreateProjectInput createProjectInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProjectInput">CreateProject</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> CreateProjectWithHttpInfo(CreateProjectInput createProjectInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principalId">id of principal</param>
        /// <param name="principalType">type of principal</param>
        /// <returns></returns>
        void DeletePrincipalFromProject(string principalId, string principalType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principalId">id of principal</param>
        /// <param name="principalType">type of principal</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePrincipalFromProjectWithHttpInfo(string principalId, string principalType);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>UserList</returns>
        UserList ListPrincipalsOfProject(int? limit = default, string? exclusiveStartKey = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of UserList</returns>
        ApiResponse<UserList> ListPrincipalsOfProjectWithHttpInfo(int? limit = default, string? exclusiveStartKey = default);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ProjectList</returns>
        ProjectList ListProject(int? limit = default, string? exclusiveStartKey = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of ProjectList</returns>
        ApiResponse<ProjectList> ListProjectWithHttpInfo(int? limit = default, string? exclusiveStartKey = default);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="updateProjectInput">UpdateProject</param>
        /// <returns>ProjectDto</returns>
        ProjectDto UpdateProject(string projectId, UpdateProjectInput updateProjectInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="updateProjectInput">UpdateProject</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> UpdateProjectWithHttpInfo(string projectId, UpdateProjectInput updateProjectInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToProjectInput">AddPrincipalToProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPrincipalToProjectAsync(AddUserToProjectInput addUserToProjectInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToProjectInput">AddPrincipalToProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPrincipalToProjectWithHttpInfoAsync(AddUserToProjectInput addUserToProjectInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProjectInput">CreateProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> CreateProjectAsync(CreateProjectInput createProjectInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProjectInput">CreateProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> CreateProjectWithHttpInfoAsync(CreateProjectInput createProjectInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principalId">id of principal</param>
        /// <param name="principalType">type of principal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePrincipalFromProjectAsync(string principalId, string principalType, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principalId">id of principal</param>
        /// <param name="principalType">type of principal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePrincipalFromProjectWithHttpInfoAsync(string principalId, string principalType, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserList</returns>
        System.Threading.Tasks.Task<UserList> ListPrincipalsOfProjectAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserList>> ListPrincipalsOfProjectWithHttpInfoAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectList</returns>
        System.Threading.Tasks.Task<ProjectList> ListProjectAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectList>> ListProjectWithHttpInfoAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="updateProjectInput">UpdateProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> UpdateProjectAsync(string projectId, UpdateProjectInput updateProjectInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="updateProjectInput">UpdateProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> UpdateProjectWithHttpInfoAsync(string projectId, UpdateProjectInput updateProjectInput, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IProjectsApiSync, IProjectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IDisposable, IProjectsApi
    {
        private AffinidiTdk.IamClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProjectsApi(string basePath)
        {
            this.Configuration = AffinidiTdk.IamClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IamClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IamClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IamClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProjectsApi(AffinidiTdk.IamClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.IamClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IamClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IamClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IamClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IamClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IamClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IamClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectsApi(HttpClient client, AffinidiTdk.IamClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IamClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IamClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IamClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProjectsApi(AffinidiTdk.IamClient.Client.ISynchronousClient client, AffinidiTdk.IamClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.IamClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.IamClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.IamClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.IamClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.IamClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.IamClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.IamClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToProjectInput">AddPrincipalToProject</param>
        /// <returns></returns>
        public void AddPrincipalToProject(AddUserToProjectInput addUserToProjectInput)
        {
            AddPrincipalToProjectWithHttpInfo(addUserToProjectInput);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToProjectInput">AddPrincipalToProject</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> AddPrincipalToProjectWithHttpInfo(AddUserToProjectInput addUserToProjectInput)
        {
            // verify the required parameter 'addUserToProjectInput' is set
            if (addUserToProjectInput == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'addUserToProjectInput' when calling ProjectsApi->AddPrincipalToProject");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addUserToProjectInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/projects/principals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPrincipalToProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToProjectInput">AddPrincipalToProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPrincipalToProjectAsync(AddUserToProjectInput addUserToProjectInput, System.Threading.CancellationToken cancellationToken = default)
        {
            await AddPrincipalToProjectWithHttpInfoAsync(addUserToProjectInput, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToProjectInput">AddPrincipalToProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> AddPrincipalToProjectWithHttpInfoAsync(AddUserToProjectInput addUserToProjectInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'addUserToProjectInput' is set
            if (addUserToProjectInput == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'addUserToProjectInput' when calling ProjectsApi->AddPrincipalToProject");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addUserToProjectInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/projects/principals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPrincipalToProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProjectInput">CreateProject</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto CreateProject(CreateProjectInput createProjectInput)
        {
            AffinidiTdk.IamClient.Client.ApiResponse<ProjectDto> localVarResponse = CreateProjectWithHttpInfo(createProjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProjectInput">CreateProject</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<ProjectDto> CreateProjectWithHttpInfo(CreateProjectInput createProjectInput)
        {
            // verify the required parameter 'createProjectInput' is set
            if (createProjectInput == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'createProjectInput' when calling ProjectsApi->CreateProject");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createProjectInput;

            // authentication (UserTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProjectDto>("/v1/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProjectInput">CreateProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> CreateProjectAsync(CreateProjectInput createProjectInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IamClient.Client.ApiResponse<ProjectDto> localVarResponse = await CreateProjectWithHttpInfoAsync(createProjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProjectInput">CreateProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<ProjectDto>> CreateProjectWithHttpInfoAsync(CreateProjectInput createProjectInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createProjectInput' is set
            if (createProjectInput == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'createProjectInput' when calling ProjectsApi->CreateProject");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createProjectInput;

            // authentication (UserTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProjectDto>("/v1/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principalId">id of principal</param>
        /// <param name="principalType">type of principal</param>
        /// <returns></returns>
        public void DeletePrincipalFromProject(string principalId, string principalType)
        {
            DeletePrincipalFromProjectWithHttpInfo(principalId, principalType);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principalId">id of principal</param>
        /// <param name="principalType">type of principal</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<Object> DeletePrincipalFromProjectWithHttpInfo(string principalId, string principalType)
        {
            // verify the required parameter 'principalId' is set
            if (principalId == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'principalId' when calling ProjectsApi->DeletePrincipalFromProject");

            // verify the required parameter 'principalType' is set
            if (principalType == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'principalType' when calling ProjectsApi->DeletePrincipalFromProject");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("principalId", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(principalId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "principalType", principalType));

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/projects/principals/{principalId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePrincipalFromProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principalId">id of principal</param>
        /// <param name="principalType">type of principal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePrincipalFromProjectAsync(string principalId, string principalType, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeletePrincipalFromProjectWithHttpInfoAsync(principalId, principalType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principalId">id of principal</param>
        /// <param name="principalType">type of principal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<Object>> DeletePrincipalFromProjectWithHttpInfoAsync(string principalId, string principalType, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'principalId' is set
            if (principalId == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'principalId' when calling ProjectsApi->DeletePrincipalFromProject");

            // verify the required parameter 'principalType' is set
            if (principalType == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'principalType' when calling ProjectsApi->DeletePrincipalFromProject");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("principalId", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(principalId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "principalType", principalType));

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/projects/principals/{principalId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePrincipalFromProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>UserList</returns>
        public UserList ListPrincipalsOfProject(int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.IamClient.Client.ApiResponse<UserList> localVarResponse = ListPrincipalsOfProjectWithHttpInfo(limit, exclusiveStartKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of UserList</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<UserList> ListPrincipalsOfProjectWithHttpInfo(int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserList>("/v1/projects/principals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPrincipalsOfProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserList</returns>
        public async System.Threading.Tasks.Task<UserList> ListPrincipalsOfProjectAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IamClient.Client.ApiResponse<UserList> localVarResponse = await ListPrincipalsOfProjectWithHttpInfoAsync(limit, exclusiveStartKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserList)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<UserList>> ListPrincipalsOfProjectWithHttpInfoAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserList>("/v1/projects/principals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPrincipalsOfProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ProjectList</returns>
        public ProjectList ListProject(int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.IamClient.Client.ApiResponse<ProjectList> localVarResponse = ListProjectWithHttpInfo(limit, exclusiveStartKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of ProjectList</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<ProjectList> ListProjectWithHttpInfo(int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (UserTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProjectList>("/v1/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectList</returns>
        public async System.Threading.Tasks.Task<ProjectList> ListProjectAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IamClient.Client.ApiResponse<ProjectList> localVarResponse = await ListProjectWithHttpInfoAsync(limit, exclusiveStartKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 100)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectList)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<ProjectList>> ListProjectWithHttpInfoAsync(int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IamClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (UserTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProjectList>("/v1/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="updateProjectInput">UpdateProject</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto UpdateProject(string projectId, UpdateProjectInput updateProjectInput)
        {
            AffinidiTdk.IamClient.Client.ApiResponse<ProjectDto> localVarResponse = UpdateProjectWithHttpInfo(projectId, updateProjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="updateProjectInput">UpdateProject</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public AffinidiTdk.IamClient.Client.ApiResponse<ProjectDto> UpdateProjectWithHttpInfo(string projectId, UpdateProjectInput updateProjectInput)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->UpdateProject");

            // verify the required parameter 'updateProjectInput' is set
            if (updateProjectInput == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'updateProjectInput' when calling ProjectsApi->UpdateProject");

            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = updateProjectInput;

            // authentication (UserTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProjectDto>("/v1/projects/{projectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="updateProjectInput">UpdateProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> UpdateProjectAsync(string projectId, UpdateProjectInput updateProjectInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IamClient.Client.ApiResponse<ProjectDto> localVarResponse = await UpdateProjectWithHttpInfoAsync(projectId, updateProjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AffinidiTdk.IamClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="updateProjectInput">UpdateProject</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IamClient.Client.ApiResponse<ProjectDto>> UpdateProjectWithHttpInfoAsync(string projectId, UpdateProjectInput updateProjectInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->UpdateProject");

            // verify the required parameter 'updateProjectInput' is set
            if (updateProjectInput == null)
                throw new AffinidiTdk.IamClient.Client.ApiException(400, "Missing required parameter 'updateProjectInput' when calling ProjectsApi->UpdateProject");


            AffinidiTdk.IamClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IamClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IamClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.IamClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = updateProjectInput;

            // authentication (UserTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ProjectDto>("/v1/projects/{projectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
