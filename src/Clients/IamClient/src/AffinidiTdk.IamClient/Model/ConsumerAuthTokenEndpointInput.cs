/*
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.IamClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IamClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IamClient.Model
{
    /// <summary>
    /// ConsumerAuthTokenEndpointInput
    /// </summary>
    [DataContract(Name = "ConsumerAuthTokenEndpointInput")]
    public partial class ConsumerAuthTokenEndpointInput : IValidatableObject
    {
        /// <summary>
        /// Defines GrantType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GrantTypeEnum
        {
            /// <summary>
            /// Enum ClientCredentials for value: client_credentials
            /// </summary>
            [EnumMember(Value = "client_credentials")]
            ClientCredentials = 1,

            /// <summary>
            /// Enum AffinidiDelegation for value: affinidi_delegation
            /// </summary>
            [EnumMember(Value = "affinidi_delegation")]
            AffinidiDelegation = 2
        }


        /// <summary>
        /// Gets or Sets GrantType
        /// </summary>
        [DataMember(Name = "grant_type", IsRequired = true, EmitDefaultValue = true)]
        public GrantTypeEnum GrantType { get; set; }
        /// <summary>
        /// Defines ClientAssertionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClientAssertionTypeEnum
        {
            /// <summary>
            /// Enum UrnietfparamsoauthclientAssertionTypejwtBearer for value: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
            /// </summary>
            [EnumMember(Value = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer")]
            UrnietfparamsoauthclientAssertionTypejwtBearer = 1,

            /// <summary>
            /// Enum UrnietfparamsoauthdelegationAssertionTypejwtBearer for value: urn:ietf:params:oauth:delegation-assertion-type:jwt-bearer
            /// </summary>
            [EnumMember(Value = "urn:ietf:params:oauth:delegation-assertion-type:jwt-bearer")]
            UrnietfparamsoauthdelegationAssertionTypejwtBearer = 2
        }


        /// <summary>
        /// Gets or Sets ClientAssertionType
        /// </summary>
        [DataMember(Name = "client_assertion_type", IsRequired = true, EmitDefaultValue = true)]
        public ClientAssertionTypeEnum ClientAssertionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumerAuthTokenEndpointInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsumerAuthTokenEndpointInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumerAuthTokenEndpointInput" /> class.
        /// </summary>
        /// <param name="grantType">grantType (required).</param>
        /// <param name="clientAssertionType">clientAssertionType (required).</param>
        /// <param name="clientAssertion">clientAssertion (required).</param>
        /// <param name="code">code.</param>
        /// <param name="refreshToken">refreshToken.</param>
        /// <param name="redirectUri">redirectUri.</param>
        /// <param name="clientId">clientId.</param>
        public ConsumerAuthTokenEndpointInput(GrantTypeEnum grantType = default, ClientAssertionTypeEnum clientAssertionType = default, string clientAssertion = default, string code = default, string refreshToken = default, string redirectUri = default, string clientId = default)
        {
            this.GrantType = grantType;
            this.ClientAssertionType = clientAssertionType;
            // to ensure "clientAssertion" is required (not null)
            if (clientAssertion == null)
            {
                throw new ArgumentNullException("clientAssertion is a required property for ConsumerAuthTokenEndpointInput and cannot be null");
            }
            this.ClientAssertion = clientAssertion;
            this.Code = code;
            this.RefreshToken = refreshToken;
            this.RedirectUri = redirectUri;
            this.ClientId = clientId;
        }

        /// <summary>
        /// Gets or Sets ClientAssertion
        /// </summary>
        [DataMember(Name = "client_assertion", IsRequired = true, EmitDefaultValue = true)]
        public string ClientAssertion { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name = "refresh_token", EmitDefaultValue = false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUri
        /// </summary>
        [DataMember(Name = "redirect_uri", EmitDefaultValue = false)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsumerAuthTokenEndpointInput {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  ClientAssertionType: ").Append(ClientAssertionType).Append("\n");
            sb.Append("  ClientAssertion: ").Append(ClientAssertion).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
