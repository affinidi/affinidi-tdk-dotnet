/*
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.IamClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IamClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IamClient.Model
{
    /// <summary>
    /// PolicyDto
    /// </summary>
    [DataContract(Name = "PolicyDto")]
    public partial class PolicyDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolicyDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyDto" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="principalId">principalId.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="statement">statement (required).</param>
        public PolicyDto(string name = default, string description = default, string principalId = default, string projectId = default, string varVersion = default, List<PolicyStatementDto> statement = default)
        {
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for PolicyDto and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "statement" is required (not null)
            if (statement == null)
            {
                throw new ArgumentNullException("statement is a required property for PolicyDto and cannot be null");
            }
            this.Statement = statement;
            this.Name = name;
            this.Description = description;
            this.PrincipalId = principalId;
            this.ProjectId = projectId;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalId
        /// </summary>
        [DataMember(Name = "principalId", EmitDefaultValue = false)]
        public string PrincipalId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Statement
        /// </summary>
        [DataMember(Name = "statement", IsRequired = true, EmitDefaultValue = true)]
        public List<PolicyStatementDto> Statement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolicyDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PrincipalId: ").Append(PrincipalId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Statement: ").Append(Statement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
