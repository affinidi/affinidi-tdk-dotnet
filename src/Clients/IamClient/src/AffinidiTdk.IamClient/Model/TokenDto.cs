/*
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.IamClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IamClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IamClient.Model
{
    /// <summary>
    /// TokenDto
    /// </summary>
    [DataContract(Name = "TokenDto")]
    public partial class TokenDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenDto" /> class.
        /// </summary>
        /// <param name="id">Token Id (required).</param>
        /// <param name="ari">Token ARI (required).</param>
        /// <param name="ownerAri">The Token owner&#39;s ARI (required).</param>
        /// <param name="name">Owner defined Token display name (required).</param>
        /// <param name="authenticationMethod">authenticationMethod (required).</param>
        /// <param name="scopes">Scopes that will be assigned to the Token on authentication (required).</param>
        public TokenDto(Guid id = default, string ari = default, string ownerAri = default, string name = default, TokenPrivateKeyAuthenticationMethodDto authenticationMethod = default, List<string> scopes = default)
        {
            this.Id = id;
            // to ensure "ari" is required (not null)
            if (ari == null)
            {
                throw new ArgumentNullException("ari is a required property for TokenDto and cannot be null");
            }
            this.Ari = ari;
            // to ensure "ownerAri" is required (not null)
            if (ownerAri == null)
            {
                throw new ArgumentNullException("ownerAri is a required property for TokenDto and cannot be null");
            }
            this.OwnerAri = ownerAri;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TokenDto and cannot be null");
            }
            this.Name = name;
            // to ensure "authenticationMethod" is required (not null)
            if (authenticationMethod == null)
            {
                throw new ArgumentNullException("authenticationMethod is a required property for TokenDto and cannot be null");
            }
            this.AuthenticationMethod = authenticationMethod;
            // to ensure "scopes" is required (not null)
            if (scopes == null)
            {
                throw new ArgumentNullException("scopes is a required property for TokenDto and cannot be null");
            }
            this.Scopes = scopes;
        }

        /// <summary>
        /// Token Id
        /// </summary>
        /// <value>Token Id</value>
        /*
        <example>c5817ea6-8367-4458-9131-54cd2c5b9b48</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Token ARI
        /// </summary>
        /// <value>Token ARI</value>
        /*
        <example>token/c5817ea6-8367-4458-9131-54cd2c5b9b48</example>
        */
        [DataMember(Name = "ari", IsRequired = true, EmitDefaultValue = true)]
        public string Ari { get; set; }

        /// <summary>
        /// The Token owner&#39;s ARI
        /// </summary>
        /// <value>The Token owner&#39;s ARI</value>
        /*
        <example>ari:iam:::user/2f4b3468-516f-4af3-87db-8816b0d320cc</example>
        */
        [DataMember(Name = "ownerAri", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerAri { get; set; }

        /// <summary>
        /// Owner defined Token display name
        /// </summary>
        /// <value>Owner defined Token display name</value>
        /*
        <example>AIV/Concierge API - affinidi-elements-iam-dev</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationMethod
        /// </summary>
        [DataMember(Name = "authenticationMethod", IsRequired = true, EmitDefaultValue = true)]
        public TokenPrivateKeyAuthenticationMethodDto AuthenticationMethod { get; set; }

        /// <summary>
        /// Scopes that will be assigned to the Token on authentication
        /// </summary>
        /// <value>Scopes that will be assigned to the Token on authentication</value>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ari: ").Append(Ari).Append("\n");
            sb.Append("  OwnerAri: ").Append(OwnerAri).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AuthenticationMethod: ").Append(AuthenticationMethod).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
