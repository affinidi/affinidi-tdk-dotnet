/*
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.IamClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IamClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IamClient.Model
{
    /// <summary>
    /// Corresponding Public Key Info provided either as a URL or a Hardcoded Object
    /// </summary>
    [JsonConverter(typeof(TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoJsonConverter))]
    [DataContract(Name = "TokenPrivateKeyAuthenticationMethodDto_publicKeyInfo")]
    public partial class TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo" /> class
        /// with the <see cref="TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf.</param>
        public TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo(TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo" /> class
        /// with the <see cref="TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1.</param>
        public TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo(TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf) || value is TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1) || value is TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf, TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf`. If the actual instance is not `TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf</returns>
        public TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf GetTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf()
        {
            return (TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1`. If the actual instance is not `TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1</returns>
        public TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1 GetTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1()
        {
            return (TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo</returns>
        public static TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo FromJson(string jsonString)
        {
            TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo newTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo = new TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo(JsonConvert.DeserializeObject<TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf>(jsonString, TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo.SerializerSettings));
                }
                else
                {
                    newTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo = new TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo(JsonConvert.DeserializeObject<TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf>(jsonString, TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1).GetProperty("AdditionalProperties") == null)
                {
                    newTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo = new TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo(JsonConvert.DeserializeObject<TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1>(jsonString, TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo.SerializerSettings));
                }
                else
                {
                    newTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo = new TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo(JsonConvert.DeserializeObject<TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1>(jsonString, TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newTokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo
    /// </summary>
    public class TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    return TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
