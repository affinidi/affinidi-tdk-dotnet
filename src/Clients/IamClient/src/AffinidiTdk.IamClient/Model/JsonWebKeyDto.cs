/*
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.IamClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IamClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IamClient.Model
{
    /// <summary>
    /// JsonWebKeyDto
    /// </summary>
    [DataContract(Name = "JsonWebKeyDto")]
    public partial class JsonWebKeyDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonWebKeyDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JsonWebKeyDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonWebKeyDto" /> class.
        /// </summary>
        /// <param name="kid">kid (required).</param>
        /// <param name="kty">kty (required).</param>
        /// <param name="n">n.</param>
        /// <param name="e">e.</param>
        /// <param name="x">x.</param>
        /// <param name="y">y.</param>
        /// <param name="crv">crv.</param>
        /// <param name="alg">alg (required).</param>
        /// <param name="use">use (required).</param>
        public JsonWebKeyDto(string kid = default, string kty = default, string n = default, string e = default, string x = default, string y = default, string crv = default, string alg = default, string use = default)
        {
            // to ensure "kid" is required (not null)
            if (kid == null)
            {
                throw new ArgumentNullException("kid is a required property for JsonWebKeyDto and cannot be null");
            }
            this.Kid = kid;
            // to ensure "kty" is required (not null)
            if (kty == null)
            {
                throw new ArgumentNullException("kty is a required property for JsonWebKeyDto and cannot be null");
            }
            this.Kty = kty;
            // to ensure "alg" is required (not null)
            if (alg == null)
            {
                throw new ArgumentNullException("alg is a required property for JsonWebKeyDto and cannot be null");
            }
            this.Alg = alg;
            // to ensure "use" is required (not null)
            if (use == null)
            {
                throw new ArgumentNullException("use is a required property for JsonWebKeyDto and cannot be null");
            }
            this.Use = use;
            this.N = n;
            this.E = e;
            this.X = x;
            this.Y = y;
            this.Crv = crv;
        }

        /// <summary>
        /// Gets or Sets Kid
        /// </summary>
        [DataMember(Name = "kid", IsRequired = true, EmitDefaultValue = true)]
        public string Kid { get; set; }

        /// <summary>
        /// Gets or Sets Kty
        /// </summary>
        [DataMember(Name = "kty", IsRequired = true, EmitDefaultValue = true)]
        public string Kty { get; set; }

        /// <summary>
        /// Gets or Sets N
        /// </summary>
        [DataMember(Name = "n", EmitDefaultValue = false)]
        public string N { get; set; }

        /// <summary>
        /// Gets or Sets E
        /// </summary>
        [DataMember(Name = "e", EmitDefaultValue = false)]
        public string E { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public string X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public string Y { get; set; }

        /// <summary>
        /// Gets or Sets Crv
        /// </summary>
        [DataMember(Name = "crv", EmitDefaultValue = false)]
        public string Crv { get; set; }

        /// <summary>
        /// Gets or Sets Alg
        /// </summary>
        [DataMember(Name = "alg", IsRequired = true, EmitDefaultValue = true)]
        public string Alg { get; set; }

        /// <summary>
        /// Gets or Sets Use
        /// </summary>
        [DataMember(Name = "use", IsRequired = true, EmitDefaultValue = true)]
        public string Use { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JsonWebKeyDto {\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  E: ").Append(E).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Crv: ").Append(Crv).Append("\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
