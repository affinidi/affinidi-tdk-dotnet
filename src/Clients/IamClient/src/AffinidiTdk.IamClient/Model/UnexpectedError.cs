/*
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.IamClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IamClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IamClient.Model
{
    /// <summary>
    /// UnexpectedError
    /// </summary>
    [DataContract(Name = "UnexpectedError")]
    public partial class UnexpectedError : IValidatableObject
    {
        /// <summary>
        /// Defines Name
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum UnexpectedError for value: UnexpectedError
            /// </summary>
            [EnumMember(Value = "UnexpectedError")]
            UnexpectedError = 1
        }


        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public NameEnum Name { get; set; }
        /// <summary>
        /// Defines Message
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageEnum
        {
            /// <summary>
            /// Enum UnexpectedErrorOccurred for value: Unexpected Error Occurred.
            /// </summary>
            [EnumMember(Value = "Unexpected Error Occurred.")]
            UnexpectedErrorOccurred = 1
        }


        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public MessageEnum Message { get; set; }
        /// <summary>
        /// Defines HttpStatusCode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HttpStatusCodeEnum
        {
            /// <summary>
            /// Enum _500 for value: 500
            /// </summary>
            [EnumMember(Value = "500")]
            _500 = 1
        }


        /// <summary>
        /// Gets or Sets HttpStatusCode
        /// </summary>
        [DataMember(Name = "httpStatusCode", IsRequired = true, EmitDefaultValue = true)]
        public HttpStatusCodeEnum HttpStatusCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnexpectedError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnexpectedError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnexpectedError" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="httpStatusCode">httpStatusCode (required).</param>
        /// <param name="traceId">traceId (required).</param>
        /// <param name="details">details.</param>
        public UnexpectedError(NameEnum name = default, MessageEnum message = default, HttpStatusCodeEnum httpStatusCode = default, string traceId = default, List<ServiceErrorResponseDetailsInner> details = default)
        {
            this.Name = name;
            this.Message = message;
            this.HttpStatusCode = httpStatusCode;
            // to ensure "traceId" is required (not null)
            if (traceId == null)
            {
                throw new ArgumentNullException("traceId is a required property for UnexpectedError and cannot be null");
            }
            this.TraceId = traceId;
            this.Details = details;
        }

        /// <summary>
        /// Gets or Sets TraceId
        /// </summary>
        [DataMember(Name = "traceId", IsRequired = true, EmitDefaultValue = true)]
        public string TraceId { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public List<ServiceErrorResponseDetailsInner> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnexpectedError {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  HttpStatusCode: ").Append(HttpStatusCode).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
