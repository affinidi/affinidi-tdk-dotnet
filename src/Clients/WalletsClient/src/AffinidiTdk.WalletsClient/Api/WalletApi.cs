/*
 * CloudWalletEssentials
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.WalletsClient.Client;
using AffinidiTdk.WalletsClient.Model;

namespace AffinidiTdk.WalletsClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// creates a wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWalletInput">CreateWallet (optional)</param>
        /// <returns>CreateWalletResponse</returns>
        CreateWalletResponse CreateWallet(CreateWalletInput? createWalletInput = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// creates a wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWalletInput">CreateWallet (optional)</param>
        /// <returns>ApiResponse of CreateWalletResponse</returns>
        ApiResponse<CreateWalletResponse> CreateWalletWithHttpInfo(CreateWalletInput? createWalletInput = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete wallet by walletId
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <returns></returns>
        void DeleteWallet(string walletId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete wallet by walletId
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWalletWithHttpInfo(string walletId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get wallet details using wallet Id.
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <returns>WalletDto</returns>
        WalletDto GetWallet(string walletId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get wallet details using wallet Id.
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <returns>ApiResponse of WalletDto</returns>
        ApiResponse<WalletDto> GetWalletWithHttpInfo(string walletId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists all wallets
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didType"> (optional)</param>
        /// <returns>WalletsListDto</returns>
        WalletsListDto ListWallets(string? didType = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists all wallets
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didType"> (optional)</param>
        /// <returns>ApiResponse of WalletsListDto</returns>
        ApiResponse<WalletsListDto> ListWalletsWithHttpInfo(string? didType = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// signs credential with the wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="signCredentialInputDto">SignCredential</param>
        /// <returns>SignCredentialResultDto</returns>
        SignCredentialResultDto SignCredential(string walletId, SignCredentialInputDto signCredentialInputDto);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// signs credential with the wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="signCredentialInputDto">SignCredential</param>
        /// <returns>ApiResponse of SignCredentialResultDto</returns>
        ApiResponse<SignCredentialResultDto> SignCredentialWithHttpInfo(string walletId, SignCredentialInputDto signCredentialInputDto);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// signs a jwt token with the wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet.</param>
        /// <param name="signJwtToken">SignJwtToken</param>
        /// <returns>SignJwtTokenOK</returns>
        SignJwtTokenOK SignJwtToken(string walletId, SignJwtToken signJwtToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// signs a jwt token with the wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet.</param>
        /// <param name="signJwtToken">SignJwtToken</param>
        /// <returns>ApiResponse of SignJwtTokenOK</returns>
        ApiResponse<SignJwtTokenOK> SignJwtTokenWithHttpInfo(string walletId, SignJwtToken signJwtToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update wallet details using wallet Id.
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="updateWalletInput">UpdateWallet</param>
        /// <returns>WalletDto</returns>
        WalletDto UpdateWallet(string walletId, UpdateWalletInput updateWalletInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update wallet details using wallet Id.
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="updateWalletInput">UpdateWallet</param>
        /// <returns>ApiResponse of WalletDto</returns>
        ApiResponse<WalletDto> UpdateWalletWithHttpInfo(string walletId, UpdateWalletInput updateWalletInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// creates a wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWalletInput">CreateWallet (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWalletResponse</returns>
        System.Threading.Tasks.Task<CreateWalletResponse> CreateWalletAsync(CreateWalletInput? createWalletInput = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// creates a wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWalletInput">CreateWallet (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWalletResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWalletResponse>> CreateWalletWithHttpInfoAsync(CreateWalletInput? createWalletInput = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete wallet by walletId
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete wallet by walletId
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWalletWithHttpInfoAsync(string walletId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get wallet details using wallet Id.
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletDto</returns>
        System.Threading.Tasks.Task<WalletDto> GetWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get wallet details using wallet Id.
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletDto>> GetWalletWithHttpInfoAsync(string walletId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists all wallets
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletsListDto</returns>
        System.Threading.Tasks.Task<WalletsListDto> ListWalletsAsync(string? didType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists all wallets
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletsListDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletsListDto>> ListWalletsWithHttpInfoAsync(string? didType = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// signs credential with the wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="signCredentialInputDto">SignCredential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignCredentialResultDto</returns>
        System.Threading.Tasks.Task<SignCredentialResultDto> SignCredentialAsync(string walletId, SignCredentialInputDto signCredentialInputDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// signs credential with the wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="signCredentialInputDto">SignCredential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignCredentialResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignCredentialResultDto>> SignCredentialWithHttpInfoAsync(string walletId, SignCredentialInputDto signCredentialInputDto, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// signs a jwt token with the wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet.</param>
        /// <param name="signJwtToken">SignJwtToken</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignJwtTokenOK</returns>
        System.Threading.Tasks.Task<SignJwtTokenOK> SignJwtTokenAsync(string walletId, SignJwtToken signJwtToken, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// signs a jwt token with the wallet
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet.</param>
        /// <param name="signJwtToken">SignJwtToken</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignJwtTokenOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignJwtTokenOK>> SignJwtTokenWithHttpInfoAsync(string walletId, SignJwtToken signJwtToken, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update wallet details using wallet Id.
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="updateWalletInput">UpdateWallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletDto</returns>
        System.Threading.Tasks.Task<WalletDto> UpdateWalletAsync(string walletId, UpdateWalletInput updateWalletInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update wallet details using wallet Id.
        /// </remarks>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="updateWalletInput">UpdateWallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletDto>> UpdateWalletWithHttpInfoAsync(string walletId, UpdateWalletInput updateWalletInput, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApi : IWalletApiSync, IWalletApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletApi : IDisposable, IWalletApi
    {
        private AffinidiTdk.WalletsClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public WalletApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public WalletApi(string basePath)
        {
            this.Configuration = AffinidiTdk.WalletsClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.WalletsClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.WalletsClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.WalletsClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.WalletsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public WalletApi(AffinidiTdk.WalletsClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.WalletsClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.WalletsClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.WalletsClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.WalletsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WalletApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WalletApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.WalletsClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.WalletsClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.WalletsClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.WalletsClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.WalletsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WalletApi(HttpClient client, AffinidiTdk.WalletsClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.WalletsClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.WalletsClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.WalletsClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.WalletsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public WalletApi(AffinidiTdk.WalletsClient.Client.ISynchronousClient client, AffinidiTdk.WalletsClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.WalletsClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.WalletsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.WalletsClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.WalletsClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.WalletsClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.WalletsClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.WalletsClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  creates a wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWalletInput">CreateWallet (optional)</param>
        /// <returns>CreateWalletResponse</returns>
        public CreateWalletResponse CreateWallet(CreateWalletInput? createWalletInput = default)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<CreateWalletResponse> localVarResponse = CreateWalletWithHttpInfo(createWalletInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  creates a wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWalletInput">CreateWallet (optional)</param>
        /// <returns>ApiResponse of CreateWalletResponse</returns>
        public AffinidiTdk.WalletsClient.Client.ApiResponse<CreateWalletResponse> CreateWalletWithHttpInfo(CreateWalletInput? createWalletInput = default)
        {
            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createWalletInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWalletResponse>("/v1/wallets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWallet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  creates a wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWalletInput">CreateWallet (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWalletResponse</returns>
        public async System.Threading.Tasks.Task<CreateWalletResponse> CreateWalletAsync(CreateWalletInput? createWalletInput = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<CreateWalletResponse> localVarResponse = await CreateWalletWithHttpInfoAsync(createWalletInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  creates a wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWalletInput">CreateWallet (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWalletResponse)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.WalletsClient.Client.ApiResponse<CreateWalletResponse>> CreateWalletWithHttpInfoAsync(CreateWalletInput? createWalletInput = default, System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createWalletInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWalletResponse>("/v1/wallets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWallet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  delete wallet by walletId
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <returns></returns>
        public void DeleteWallet(string walletId)
        {
            DeleteWalletWithHttpInfo(walletId);
        }

        /// <summary>
        ///  delete wallet by walletId
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.WalletsClient.Client.ApiResponse<Object> DeleteWalletWithHttpInfo(string walletId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->DeleteWallet");

            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/wallets/{walletId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWallet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  delete wallet by walletId
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteWalletWithHttpInfoAsync(walletId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  delete wallet by walletId
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.WalletsClient.Client.ApiResponse<Object>> DeleteWalletWithHttpInfoAsync(string walletId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->DeleteWallet");


            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/wallets/{walletId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWallet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get wallet details using wallet Id.
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <returns>WalletDto</returns>
        public WalletDto GetWallet(string walletId)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<WalletDto> localVarResponse = GetWalletWithHttpInfo(walletId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get wallet details using wallet Id.
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <returns>ApiResponse of WalletDto</returns>
        public AffinidiTdk.WalletsClient.Client.ApiResponse<WalletDto> GetWalletWithHttpInfo(string walletId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->GetWallet");

            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletDto>("/v1/wallets/{walletId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWallet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get wallet details using wallet Id.
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletDto</returns>
        public async System.Threading.Tasks.Task<WalletDto> GetWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<WalletDto> localVarResponse = await GetWalletWithHttpInfoAsync(walletId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get wallet details using wallet Id.
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.WalletsClient.Client.ApiResponse<WalletDto>> GetWalletWithHttpInfoAsync(string walletId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->GetWallet");


            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletDto>("/v1/wallets/{walletId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWallet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  lists all wallets
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didType"> (optional)</param>
        /// <returns>WalletsListDto</returns>
        public WalletsListDto ListWallets(string? didType = default)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<WalletsListDto> localVarResponse = ListWalletsWithHttpInfo(didType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  lists all wallets
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didType"> (optional)</param>
        /// <returns>ApiResponse of WalletsListDto</returns>
        public AffinidiTdk.WalletsClient.Client.ApiResponse<WalletsListDto> ListWalletsWithHttpInfo(string? didType = default)
        {
            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (didType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToMultiMap("", "didType", didType));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletsListDto>("/v1/wallets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWallets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  lists all wallets
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletsListDto</returns>
        public async System.Threading.Tasks.Task<WalletsListDto> ListWalletsAsync(string? didType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<WalletsListDto> localVarResponse = await ListWalletsWithHttpInfoAsync(didType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  lists all wallets
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletsListDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.WalletsClient.Client.ApiResponse<WalletsListDto>> ListWalletsWithHttpInfoAsync(string? didType = default, System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (didType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToMultiMap("", "didType", didType));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletsListDto>("/v1/wallets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWallets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  signs credential with the wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="signCredentialInputDto">SignCredential</param>
        /// <returns>SignCredentialResultDto</returns>
        public SignCredentialResultDto SignCredential(string walletId, SignCredentialInputDto signCredentialInputDto)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<SignCredentialResultDto> localVarResponse = SignCredentialWithHttpInfo(walletId, signCredentialInputDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  signs credential with the wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="signCredentialInputDto">SignCredential</param>
        /// <returns>ApiResponse of SignCredentialResultDto</returns>
        public AffinidiTdk.WalletsClient.Client.ApiResponse<SignCredentialResultDto> SignCredentialWithHttpInfo(string walletId, SignCredentialInputDto signCredentialInputDto)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->SignCredential");

            // verify the required parameter 'signCredentialInputDto' is set
            if (signCredentialInputDto == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'signCredentialInputDto' when calling WalletApi->SignCredential");

            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            localVarRequestOptions.Data = signCredentialInputDto;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignCredentialResultDto>("/v1/wallets/{walletId}/sign-credential", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignCredential", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  signs credential with the wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="signCredentialInputDto">SignCredential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignCredentialResultDto</returns>
        public async System.Threading.Tasks.Task<SignCredentialResultDto> SignCredentialAsync(string walletId, SignCredentialInputDto signCredentialInputDto, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<SignCredentialResultDto> localVarResponse = await SignCredentialWithHttpInfoAsync(walletId, signCredentialInputDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  signs credential with the wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="signCredentialInputDto">SignCredential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignCredentialResultDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.WalletsClient.Client.ApiResponse<SignCredentialResultDto>> SignCredentialWithHttpInfoAsync(string walletId, SignCredentialInputDto signCredentialInputDto, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->SignCredential");

            // verify the required parameter 'signCredentialInputDto' is set
            if (signCredentialInputDto == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'signCredentialInputDto' when calling WalletApi->SignCredential");


            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            localVarRequestOptions.Data = signCredentialInputDto;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SignCredentialResultDto>("/v1/wallets/{walletId}/sign-credential", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignCredential", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  signs a jwt token with the wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet.</param>
        /// <param name="signJwtToken">SignJwtToken</param>
        /// <returns>SignJwtTokenOK</returns>
        public SignJwtTokenOK SignJwtToken(string walletId, SignJwtToken signJwtToken)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<SignJwtTokenOK> localVarResponse = SignJwtTokenWithHttpInfo(walletId, signJwtToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  signs a jwt token with the wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet.</param>
        /// <param name="signJwtToken">SignJwtToken</param>
        /// <returns>ApiResponse of SignJwtTokenOK</returns>
        public AffinidiTdk.WalletsClient.Client.ApiResponse<SignJwtTokenOK> SignJwtTokenWithHttpInfo(string walletId, SignJwtToken signJwtToken)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->SignJwtToken");

            // verify the required parameter 'signJwtToken' is set
            if (signJwtToken == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'signJwtToken' when calling WalletApi->SignJwtToken");

            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            localVarRequestOptions.Data = signJwtToken;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignJwtTokenOK>("/v1/wallets/{walletId}/sign-jwt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignJwtToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  signs a jwt token with the wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet.</param>
        /// <param name="signJwtToken">SignJwtToken</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignJwtTokenOK</returns>
        public async System.Threading.Tasks.Task<SignJwtTokenOK> SignJwtTokenAsync(string walletId, SignJwtToken signJwtToken, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<SignJwtTokenOK> localVarResponse = await SignJwtTokenWithHttpInfoAsync(walletId, signJwtToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  signs a jwt token with the wallet
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet.</param>
        /// <param name="signJwtToken">SignJwtToken</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignJwtTokenOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.WalletsClient.Client.ApiResponse<SignJwtTokenOK>> SignJwtTokenWithHttpInfoAsync(string walletId, SignJwtToken signJwtToken, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->SignJwtToken");

            // verify the required parameter 'signJwtToken' is set
            if (signJwtToken == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'signJwtToken' when calling WalletApi->SignJwtToken");


            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            localVarRequestOptions.Data = signJwtToken;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SignJwtTokenOK>("/v1/wallets/{walletId}/sign-jwt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignJwtToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  update wallet details using wallet Id.
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="updateWalletInput">UpdateWallet</param>
        /// <returns>WalletDto</returns>
        public WalletDto UpdateWallet(string walletId, UpdateWalletInput updateWalletInput)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<WalletDto> localVarResponse = UpdateWalletWithHttpInfo(walletId, updateWalletInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  update wallet details using wallet Id.
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="updateWalletInput">UpdateWallet</param>
        /// <returns>ApiResponse of WalletDto</returns>
        public AffinidiTdk.WalletsClient.Client.ApiResponse<WalletDto> UpdateWalletWithHttpInfo(string walletId, UpdateWalletInput updateWalletInput)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->UpdateWallet");

            // verify the required parameter 'updateWalletInput' is set
            if (updateWalletInput == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'updateWalletInput' when calling WalletApi->UpdateWallet");

            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            localVarRequestOptions.Data = updateWalletInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<WalletDto>("/v1/wallets/{walletId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWallet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  update wallet details using wallet Id.
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="updateWalletInput">UpdateWallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletDto</returns>
        public async System.Threading.Tasks.Task<WalletDto> UpdateWalletAsync(string walletId, UpdateWalletInput updateWalletInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.WalletsClient.Client.ApiResponse<WalletDto> localVarResponse = await UpdateWalletWithHttpInfoAsync(walletId, updateWalletInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  update wallet details using wallet Id.
        /// </summary>
        /// <exception cref="AffinidiTdk.WalletsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">id of the wallet</param>
        /// <param name="updateWalletInput">UpdateWallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.WalletsClient.Client.ApiResponse<WalletDto>> UpdateWalletWithHttpInfoAsync(string walletId, UpdateWalletInput updateWalletInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->UpdateWallet");

            // verify the required parameter 'updateWalletInput' is set
            if (updateWalletInput == null)
                throw new AffinidiTdk.WalletsClient.Client.ApiException(400, "Missing required parameter 'updateWalletInput' when calling WalletApi->UpdateWallet");


            AffinidiTdk.WalletsClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.WalletsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.WalletsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("walletId", AffinidiTdk.WalletsClient.Client.ClientUtils.ParameterToString(walletId)); // path parameter
            localVarRequestOptions.Data = updateWalletInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<WalletDto>("/v1/wallets/{walletId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWallet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
