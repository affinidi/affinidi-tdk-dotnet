/*
 * CloudWalletEssentials
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.WalletsClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.WalletsClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.WalletsClient.Model
{
    /// <summary>
    /// unsignedCredentialParams. Used to build an unsigned credential before the signing. This param is not accepted when \&quot;unsignedCredential\&quot; is given
    /// </summary>
    [DataContract(Name = "SignCredentialInputDto_unsignedCredentialParams")]
    public partial class SignCredentialInputDtoUnsignedCredentialParams : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCredentialInputDtoUnsignedCredentialParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignCredentialInputDtoUnsignedCredentialParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCredentialInputDtoUnsignedCredentialParams" /> class.
        /// </summary>
        /// <param name="jsonLdContextUrl">jsonLdContextUrl (required).</param>
        /// <param name="jsonSchemaUrl">jsonSchemaUrl (required).</param>
        /// <param name="typeName">typeName (required).</param>
        /// <param name="credentialSubject">credentialSubject (required).</param>
        /// <param name="holderDid">holderDid (required).</param>
        /// <param name="expiresAt">expiresAt (required).</param>
        public SignCredentialInputDtoUnsignedCredentialParams(string jsonLdContextUrl = default, string jsonSchemaUrl = default, string typeName = default, Dictionary<string, Object> credentialSubject = default, string holderDid = default, string expiresAt = default)
        {
            // to ensure "jsonLdContextUrl" is required (not null)
            if (jsonLdContextUrl == null)
            {
                throw new ArgumentNullException("jsonLdContextUrl is a required property for SignCredentialInputDtoUnsignedCredentialParams and cannot be null");
            }
            this.JsonLdContextUrl = jsonLdContextUrl;
            // to ensure "jsonSchemaUrl" is required (not null)
            if (jsonSchemaUrl == null)
            {
                throw new ArgumentNullException("jsonSchemaUrl is a required property for SignCredentialInputDtoUnsignedCredentialParams and cannot be null");
            }
            this.JsonSchemaUrl = jsonSchemaUrl;
            // to ensure "typeName" is required (not null)
            if (typeName == null)
            {
                throw new ArgumentNullException("typeName is a required property for SignCredentialInputDtoUnsignedCredentialParams and cannot be null");
            }
            this.TypeName = typeName;
            // to ensure "credentialSubject" is required (not null)
            if (credentialSubject == null)
            {
                throw new ArgumentNullException("credentialSubject is a required property for SignCredentialInputDtoUnsignedCredentialParams and cannot be null");
            }
            this.CredentialSubject = credentialSubject;
            // to ensure "holderDid" is required (not null)
            if (holderDid == null)
            {
                throw new ArgumentNullException("holderDid is a required property for SignCredentialInputDtoUnsignedCredentialParams and cannot be null");
            }
            this.HolderDid = holderDid;
            // to ensure "expiresAt" is required (not null)
            if (expiresAt == null)
            {
                throw new ArgumentNullException("expiresAt is a required property for SignCredentialInputDtoUnsignedCredentialParams and cannot be null");
            }
            this.ExpiresAt = expiresAt;
        }

        /// <summary>
        /// Gets or Sets JsonLdContextUrl
        /// </summary>
        [DataMember(Name = "jsonLdContextUrl", IsRequired = true, EmitDefaultValue = true)]
        public string JsonLdContextUrl { get; set; }

        /// <summary>
        /// Gets or Sets JsonSchemaUrl
        /// </summary>
        [DataMember(Name = "jsonSchemaUrl", IsRequired = true, EmitDefaultValue = true)]
        public string JsonSchemaUrl { get; set; }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name = "typeName", IsRequired = true, EmitDefaultValue = true)]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets CredentialSubject
        /// </summary>
        [DataMember(Name = "credentialSubject", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> CredentialSubject { get; set; }

        /// <summary>
        /// Gets or Sets HolderDid
        /// </summary>
        [DataMember(Name = "holderDid", IsRequired = true, EmitDefaultValue = true)]
        public string HolderDid { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "expiresAt", IsRequired = true, EmitDefaultValue = true)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignCredentialInputDtoUnsignedCredentialParams {\n");
            sb.Append("  JsonLdContextUrl: ").Append(JsonLdContextUrl).Append("\n");
            sb.Append("  JsonSchemaUrl: ").Append(JsonSchemaUrl).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  CredentialSubject: ").Append(CredentialSubject).Append("\n");
            sb.Append("  HolderDid: ").Append(HolderDid).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.HolderDid != null) {
                // HolderDid (string) pattern
                Regex regexHolderDid = new Regex(@"^did:.*$", RegexOptions.CultureInvariant);
                if (!regexHolderDid.Match(this.HolderDid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HolderDid, must match a pattern of " + regexHolderDid, new [] { "HolderDid" });
                }
            }

            yield break;
        }
    }

}
