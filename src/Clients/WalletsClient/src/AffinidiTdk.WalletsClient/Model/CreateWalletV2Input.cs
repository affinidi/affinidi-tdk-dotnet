/*
 * CloudWalletEssentials
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.WalletsClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.WalletsClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.WalletsClient.Model
{
    /// <summary>
    /// CreateWalletV2Input
    /// </summary>
    [DataContract(Name = "CreateWalletV2Input")]
    public partial class CreateWalletV2Input : IValidatableObject
    {
        /// <summary>
        /// Define how DID of your wallet is created and resolved
        /// </summary>
        /// <value>Define how DID of your wallet is created and resolved</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DidMethodEnum
        {
            /// <summary>
            /// Enum Key for value: key
            /// </summary>
            [EnumMember(Value = "key")]
            Key = 1,

            /// <summary>
            /// Enum Web for value: web
            /// </summary>
            [EnumMember(Value = "web")]
            Web = 2,

            /// <summary>
            /// Enum Peer0 for value: peer0
            /// </summary>
            [EnumMember(Value = "peer0")]
            Peer0 = 3
        }


        /// <summary>
        /// Define how DID of your wallet is created and resolved
        /// </summary>
        /// <value>Define how DID of your wallet is created and resolved</value>
        [DataMember(Name = "didMethod", EmitDefaultValue = false)]
        public DidMethodEnum? DidMethod { get; set; }
        /// <summary>
        /// algorithm to generate key for the wallet
        /// </summary>
        /// <value>algorithm to generate key for the wallet</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlgorithmEnum
        {
            /// <summary>
            /// Enum Secp256k1 for value: secp256k1
            /// </summary>
            [EnumMember(Value = "secp256k1")]
            Secp256k1 = 1,

            /// <summary>
            /// Enum Ed25519 for value: ed25519
            /// </summary>
            [EnumMember(Value = "ed25519")]
            Ed25519 = 2,

            /// <summary>
            /// Enum P256 for value: p256
            /// </summary>
            [EnumMember(Value = "p256")]
            P256 = 3
        }


        /// <summary>
        /// algorithm to generate key for the wallet
        /// </summary>
        /// <value>algorithm to generate key for the wallet</value>
        [DataMember(Name = "algorithm", EmitDefaultValue = false)]
        public AlgorithmEnum? Algorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWalletV2Input" /> class.
        /// </summary>
        /// <param name="name">The name of the wallet.</param>
        /// <param name="description">The description of the wallet.</param>
        /// <param name="didMethod">Define how DID of your wallet is created and resolved (default to DidMethodEnum.Key).</param>
        /// <param name="didWebUrl">URL of the DID. Required if the did method is web.</param>
        /// <param name="algorithm">algorithm to generate key for the wallet (default to AlgorithmEnum.Secp256k1).</param>
        public CreateWalletV2Input(string name = default, string description = default, DidMethodEnum? didMethod = DidMethodEnum.Key, string didWebUrl = default, AlgorithmEnum? algorithm = AlgorithmEnum.Secp256k1)
        {
            this.Name = name;
            this.Description = description;
            this.DidMethod = didMethod;
            this.DidWebUrl = didWebUrl;
            this.Algorithm = algorithm;
        }

        /// <summary>
        /// The name of the wallet
        /// </summary>
        /// <value>The name of the wallet</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the wallet
        /// </summary>
        /// <value>The description of the wallet</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// URL of the DID. Required if the did method is web
        /// </summary>
        /// <value>URL of the DID. Required if the did method is web</value>
        [DataMember(Name = "didWebUrl", EmitDefaultValue = false)]
        public string DidWebUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateWalletV2Input {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DidMethod: ").Append(DidMethod).Append("\n");
            sb.Append("  DidWebUrl: ").Append(DidWebUrl).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DidWebUrl (string) maxLength
            if (this.DidWebUrl != null && this.DidWebUrl.Length > 300)
            {
                yield return new ValidationResult("Invalid value for DidWebUrl, length must be less than 300.", new [] { "DidWebUrl" });
            }

            if (this.DidWebUrl != null) {
                // DidWebUrl (string) pattern
                Regex regexDidWebUrl = new Regex(@"^(?!:\/\/)([a-zA-Z0-9\-\.]+)(:[0-9]+)?(\/[a-zA-Z0-9\-\/]*)?$", RegexOptions.CultureInvariant);
                if (!regexDidWebUrl.Match(this.DidWebUrl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DidWebUrl, must match a pattern of " + regexDidWebUrl, new [] { "DidWebUrl" });
                }
            }

            yield break;
        }
    }

}
