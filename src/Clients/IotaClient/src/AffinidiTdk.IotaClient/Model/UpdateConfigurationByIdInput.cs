/*
 * IotaService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.IotaClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IotaClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IotaClient.Model
{
    /// <summary>
    /// UpdateConfigurationByIdInput
    /// </summary>
    [DataContract(Name = "UpdateConfigurationByIdInput")]
    public partial class UpdateConfigurationByIdInput : IValidatableObject
    {
        /// <summary>
        /// Determines whether to handle the data-sharing request using the WebSocket or Redirect flow.
        /// </summary>
        /// <value>Determines whether to handle the data-sharing request using the WebSocket or Redirect flow.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Redirect for value: redirect
            /// </summary>
            [EnumMember(Value = "redirect")]
            Redirect = 1,

            /// <summary>
            /// Enum Websocket for value: websocket
            /// </summary>
            [EnumMember(Value = "websocket")]
            Websocket = 2
        }


        /// <summary>
        /// Determines whether to handle the data-sharing request using the WebSocket or Redirect flow.
        /// </summary>
        /// <value>Determines whether to handle the data-sharing request using the WebSocket or Redirect flow.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConfigurationByIdInput" /> class.
        /// </summary>
        /// <param name="name">The name of the configuration to quickly identify the resource..</param>
        /// <param name="walletAri">The unique resource identifier of the Wallet used to sign the request token..</param>
        /// <param name="iotaResponseWebhookURL">The webhook URL is used for callback when the data is ready..</param>
        /// <param name="enableVerification">Cryptographically verifies the data shared by the user when enabled..</param>
        /// <param name="enableConsentAuditLog">Records the user&#39;s consent when they share their data, including the type of data shared when enabled..</param>
        /// <param name="tokenMaxAge">This is the lifetime of the signed request token during the data-sharing flow..</param>
        /// <param name="description">An optional description of what the configuration is used for..</param>
        /// <param name="clientMetadata">clientMetadata.</param>
        /// <param name="mode">Determines whether to handle the data-sharing request using the WebSocket or Redirect flow..</param>
        /// <param name="redirectUris">List of allowed URLs to redirect users, including the response from the request. This is required if the selected data-sharing mode is Redirect..</param>
        /// <param name="enableIdvProviders">Enables identity verification from user with a 3rd-party provider when a verified identity document is not found..</param>
        public UpdateConfigurationByIdInput(string name = default, string walletAri = default, string iotaResponseWebhookURL = default, bool enableVerification = default, bool enableConsentAuditLog = default, decimal tokenMaxAge = default, string description = default, IotaConfigurationDtoClientMetadata clientMetadata = default, ModeEnum? mode = default, List<string> redirectUris = default, bool enableIdvProviders = default)
        {
            this.Name = name;
            this.WalletAri = walletAri;
            this.IotaResponseWebhookURL = iotaResponseWebhookURL;
            this.EnableVerification = enableVerification;
            this.EnableConsentAuditLog = enableConsentAuditLog;
            this.TokenMaxAge = tokenMaxAge;
            this.Description = description;
            this.ClientMetadata = clientMetadata;
            this.Mode = mode;
            this.RedirectUris = redirectUris;
            this.EnableIdvProviders = enableIdvProviders;
        }

        /// <summary>
        /// The name of the configuration to quickly identify the resource.
        /// </summary>
        /// <value>The name of the configuration to quickly identify the resource.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The unique resource identifier of the Wallet used to sign the request token.
        /// </summary>
        /// <value>The unique resource identifier of the Wallet used to sign the request token.</value>
        [DataMember(Name = "walletAri", EmitDefaultValue = false)]
        public string WalletAri { get; set; }

        /// <summary>
        /// The webhook URL is used for callback when the data is ready.
        /// </summary>
        /// <value>The webhook URL is used for callback when the data is ready.</value>
        [DataMember(Name = "iotaResponseWebhookURL", EmitDefaultValue = false)]
        public string IotaResponseWebhookURL { get; set; }

        /// <summary>
        /// Cryptographically verifies the data shared by the user when enabled.
        /// </summary>
        /// <value>Cryptographically verifies the data shared by the user when enabled.</value>
        [DataMember(Name = "enableVerification", EmitDefaultValue = true)]
        public bool EnableVerification { get; set; }

        /// <summary>
        /// Records the user&#39;s consent when they share their data, including the type of data shared when enabled.
        /// </summary>
        /// <value>Records the user&#39;s consent when they share their data, including the type of data shared when enabled.</value>
        [DataMember(Name = "enableConsentAuditLog", EmitDefaultValue = true)]
        public bool EnableConsentAuditLog { get; set; }

        /// <summary>
        /// This is the lifetime of the signed request token during the data-sharing flow.
        /// </summary>
        /// <value>This is the lifetime of the signed request token during the data-sharing flow.</value>
        [DataMember(Name = "tokenMaxAge", EmitDefaultValue = false)]
        public decimal TokenMaxAge { get; set; }

        /// <summary>
        /// An optional description of what the configuration is used for.
        /// </summary>
        /// <value>An optional description of what the configuration is used for.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ClientMetadata
        /// </summary>
        [DataMember(Name = "clientMetadata", EmitDefaultValue = false)]
        public IotaConfigurationDtoClientMetadata ClientMetadata { get; set; }

        /// <summary>
        /// List of allowed URLs to redirect users, including the response from the request. This is required if the selected data-sharing mode is Redirect.
        /// </summary>
        /// <value>List of allowed URLs to redirect users, including the response from the request. This is required if the selected data-sharing mode is Redirect.</value>
        [DataMember(Name = "redirectUris", EmitDefaultValue = false)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// Enables identity verification from user with a 3rd-party provider when a verified identity document is not found.
        /// </summary>
        /// <value>Enables identity verification from user with a 3rd-party provider when a verified identity document is not found.</value>
        [DataMember(Name = "enableIdvProviders", EmitDefaultValue = true)]
        public bool EnableIdvProviders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateConfigurationByIdInput {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WalletAri: ").Append(WalletAri).Append("\n");
            sb.Append("  IotaResponseWebhookURL: ").Append(IotaResponseWebhookURL).Append("\n");
            sb.Append("  EnableVerification: ").Append(EnableVerification).Append("\n");
            sb.Append("  EnableConsentAuditLog: ").Append(EnableConsentAuditLog).Append("\n");
            sb.Append("  TokenMaxAge: ").Append(TokenMaxAge).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ClientMetadata: ").Append(ClientMetadata).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  EnableIdvProviders: ").Append(EnableIdvProviders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
