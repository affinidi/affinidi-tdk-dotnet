/*
 * IotaService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.IotaClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IotaClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IotaClient.Model
{
    /// <summary>
    /// FetchIOTAVPResponseOK
    /// </summary>
    [DataContract(Name = "FetchIOTAVPResponseOK")]
    public partial class FetchIOTAVPResponseOK : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchIOTAVPResponseOK" /> class.
        /// </summary>
        /// <param name="correlationId">A unique, randomly generated identifier that correlates the request and response in the data-sharing request flow..</param>
        /// <param name="presentationSubmission">A JSON string format that describes the link between the Verifiable Presentation and Presentation Definition for the verifier. The presentation submission follows the OID4VP standard..</param>
        /// <param name="vpToken">A JSON string format containing the data the user consented to share in a Verifiable Presentation format. The VP Token follows the OID4VP standard..</param>
        public FetchIOTAVPResponseOK(string correlationId = default, string presentationSubmission = default, string vpToken = default)
        {
            this.CorrelationId = correlationId;
            this.PresentationSubmission = presentationSubmission;
            this.VpToken = vpToken;
        }

        /// <summary>
        /// A unique, randomly generated identifier that correlates the request and response in the data-sharing request flow.
        /// </summary>
        /// <value>A unique, randomly generated identifier that correlates the request and response in the data-sharing request flow.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// A JSON string format that describes the link between the Verifiable Presentation and Presentation Definition for the verifier. The presentation submission follows the OID4VP standard.
        /// </summary>
        /// <value>A JSON string format that describes the link between the Verifiable Presentation and Presentation Definition for the verifier. The presentation submission follows the OID4VP standard.</value>
        [DataMember(Name = "presentation_submission", EmitDefaultValue = false)]
        public string PresentationSubmission { get; set; }

        /// <summary>
        /// A JSON string format containing the data the user consented to share in a Verifiable Presentation format. The VP Token follows the OID4VP standard.
        /// </summary>
        /// <value>A JSON string format containing the data the user consented to share in a Verifiable Presentation format. The VP Token follows the OID4VP standard.</value>
        [DataMember(Name = "vp_token", EmitDefaultValue = false)]
        public string VpToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FetchIOTAVPResponseOK {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  PresentationSubmission: ").Append(PresentationSubmission).Append("\n");
            sb.Append("  VpToken: ").Append(VpToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
