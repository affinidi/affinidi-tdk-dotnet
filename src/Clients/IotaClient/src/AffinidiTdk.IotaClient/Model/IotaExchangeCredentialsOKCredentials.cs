/*
 * IotaService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.IotaClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IotaClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IotaClient.Model
{
    /// <summary>
    /// IotaExchangeCredentialsOKCredentials
    /// </summary>
    [DataContract(Name = "IotaExchangeCredentialsOK_credentials")]
    public partial class IotaExchangeCredentialsOKCredentials : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IotaExchangeCredentialsOKCredentials" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IotaExchangeCredentialsOKCredentials() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IotaExchangeCredentialsOKCredentials" /> class.
        /// </summary>
        /// <param name="accessKeyId">accessKeyId (required).</param>
        /// <param name="secretKey">secretKey (required).</param>
        /// <param name="sessionToken">sessionToken (required).</param>
        /// <param name="expiration">expiration (required).</param>
        public IotaExchangeCredentialsOKCredentials(string accessKeyId = default, string secretKey = default, string sessionToken = default, string expiration = default)
        {
            // to ensure "accessKeyId" is required (not null)
            if (accessKeyId == null)
            {
                throw new ArgumentNullException("accessKeyId is a required property for IotaExchangeCredentialsOKCredentials and cannot be null");
            }
            this.AccessKeyId = accessKeyId;
            // to ensure "secretKey" is required (not null)
            if (secretKey == null)
            {
                throw new ArgumentNullException("secretKey is a required property for IotaExchangeCredentialsOKCredentials and cannot be null");
            }
            this.SecretKey = secretKey;
            // to ensure "sessionToken" is required (not null)
            if (sessionToken == null)
            {
                throw new ArgumentNullException("sessionToken is a required property for IotaExchangeCredentialsOKCredentials and cannot be null");
            }
            this.SessionToken = sessionToken;
            // to ensure "expiration" is required (not null)
            if (expiration == null)
            {
                throw new ArgumentNullException("expiration is a required property for IotaExchangeCredentialsOKCredentials and cannot be null");
            }
            this.Expiration = expiration;
        }

        /// <summary>
        /// Gets or Sets AccessKeyId
        /// </summary>
        [DataMember(Name = "accessKeyId", IsRequired = true, EmitDefaultValue = true)]
        public string AccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets SecretKey
        /// </summary>
        [DataMember(Name = "secretKey", IsRequired = true, EmitDefaultValue = true)]
        public string SecretKey { get; set; }

        /// <summary>
        /// Gets or Sets SessionToken
        /// </summary>
        [DataMember(Name = "sessionToken", IsRequired = true, EmitDefaultValue = true)]
        public string SessionToken { get; set; }

        /// <summary>
        /// Gets or Sets Expiration
        /// </summary>
        [DataMember(Name = "expiration", IsRequired = true, EmitDefaultValue = true)]
        public string Expiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IotaExchangeCredentialsOKCredentials {\n");
            sb.Append("  AccessKeyId: ").Append(AccessKeyId).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("  SessionToken: ").Append(SessionToken).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
