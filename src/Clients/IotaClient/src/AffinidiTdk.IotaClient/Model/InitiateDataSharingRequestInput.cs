/*
 * IotaService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.IotaClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.IotaClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.IotaClient.Model
{
    /// <summary>
    /// InitiateDataSharingRequestInput
    /// </summary>
    [DataContract(Name = "InitiateDataSharingRequestInput")]
    public partial class InitiateDataSharingRequestInput : IValidatableObject
    {
        /// <summary>
        /// Determines whether to handle the data-sharing request using the WebSocket, Redirect or Didcomm messaging flow.
        /// </summary>
        /// <value>Determines whether to handle the data-sharing request using the WebSocket, Redirect or Didcomm messaging flow.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Redirect for value: redirect
            /// </summary>
            [EnumMember(Value = "redirect")]
            Redirect = 1,

            /// <summary>
            /// Enum Websocket for value: websocket
            /// </summary>
            [EnumMember(Value = "websocket")]
            Websocket = 2,

            /// <summary>
            /// Enum Didcomm for value: didcomm
            /// </summary>
            [EnumMember(Value = "didcomm")]
            Didcomm = 3
        }


        /// <summary>
        /// Determines whether to handle the data-sharing request using the WebSocket, Redirect or Didcomm messaging flow.
        /// </summary>
        /// <value>Determines whether to handle the data-sharing request using the WebSocket, Redirect or Didcomm messaging flow.</value>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = true)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateDataSharingRequestInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InitiateDataSharingRequestInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateDataSharingRequestInput" /> class.
        /// </summary>
        /// <param name="queryId">The ID of the query. (required).</param>
        /// <param name="correlationId">A unique, randomly generated identifier that correlates the request and response in the data-sharing request flow. (required).</param>
        /// <param name="tokenMaxAge">This is the lifetime of the signed request token during the data-sharing flow..</param>
        /// <param name="nonce">A randomly generated value that is added in the request and response to prevent replay attacks. (required).</param>
        /// <param name="redirectUri">List of allowed URLs to redirect users, including the response from the request. This is required if the selected data-sharing mode is Redirect. (required).</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration. (required).</param>
        /// <param name="userDid">User did to send the initiating request to. Only required if mode is didcomm.</param>
        /// <param name="mode">Determines whether to handle the data-sharing request using the WebSocket, Redirect or Didcomm messaging flow. (required).</param>
        public InitiateDataSharingRequestInput(string queryId = default, string correlationId = default, decimal tokenMaxAge = default, string nonce = default, string redirectUri = default, string configurationId = default, string userDid = default, ModeEnum mode = default)
        {
            // to ensure "queryId" is required (not null)
            if (queryId == null)
            {
                throw new ArgumentNullException("queryId is a required property for InitiateDataSharingRequestInput and cannot be null");
            }
            this.QueryId = queryId;
            // to ensure "correlationId" is required (not null)
            if (correlationId == null)
            {
                throw new ArgumentNullException("correlationId is a required property for InitiateDataSharingRequestInput and cannot be null");
            }
            this.CorrelationId = correlationId;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for InitiateDataSharingRequestInput and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "redirectUri" is required (not null)
            if (redirectUri == null)
            {
                throw new ArgumentNullException("redirectUri is a required property for InitiateDataSharingRequestInput and cannot be null");
            }
            this.RedirectUri = redirectUri;
            // to ensure "configurationId" is required (not null)
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId is a required property for InitiateDataSharingRequestInput and cannot be null");
            }
            this.ConfigurationId = configurationId;
            this.Mode = mode;
            this.TokenMaxAge = tokenMaxAge;
            this.UserDid = userDid;
        }

        /// <summary>
        /// The ID of the query.
        /// </summary>
        /// <value>The ID of the query.</value>
        [DataMember(Name = "queryId", IsRequired = true, EmitDefaultValue = true)]
        public string QueryId { get; set; }

        /// <summary>
        /// A unique, randomly generated identifier that correlates the request and response in the data-sharing request flow.
        /// </summary>
        /// <value>A unique, randomly generated identifier that correlates the request and response in the data-sharing request flow.</value>
        [DataMember(Name = "correlationId", IsRequired = true, EmitDefaultValue = true)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// This is the lifetime of the signed request token during the data-sharing flow.
        /// </summary>
        /// <value>This is the lifetime of the signed request token during the data-sharing flow.</value>
        [DataMember(Name = "tokenMaxAge", EmitDefaultValue = false)]
        public decimal TokenMaxAge { get; set; }

        /// <summary>
        /// A randomly generated value that is added in the request and response to prevent replay attacks.
        /// </summary>
        /// <value>A randomly generated value that is added in the request and response to prevent replay attacks.</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// List of allowed URLs to redirect users, including the response from the request. This is required if the selected data-sharing mode is Redirect.
        /// </summary>
        /// <value>List of allowed URLs to redirect users, including the response from the request. This is required if the selected data-sharing mode is Redirect.</value>
        [DataMember(Name = "redirectUri", IsRequired = true, EmitDefaultValue = true)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// ID of the Affinidi Iota Framework configuration.
        /// </summary>
        /// <value>ID of the Affinidi Iota Framework configuration.</value>
        [DataMember(Name = "configurationId", IsRequired = true, EmitDefaultValue = true)]
        public string ConfigurationId { get; set; }

        /// <summary>
        /// User did to send the initiating request to. Only required if mode is didcomm
        /// </summary>
        /// <value>User did to send the initiating request to. Only required if mode is didcomm</value>
        [DataMember(Name = "userDid", EmitDefaultValue = false)]
        public string UserDid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InitiateDataSharingRequestInput {\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  TokenMaxAge: ").Append(TokenMaxAge).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  ConfigurationId: ").Append(ConfigurationId).Append("\n");
            sb.Append("  UserDid: ").Append(UserDid).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
