/*
 * IotaService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.IotaClient.Client;
using AffinidiTdk.IotaClient.Model;

namespace AffinidiTdk.IotaClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIotaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentials">AwsExchangeCredentials</param>
        /// <returns>AwsExchangeCredentialsOK</returns>
        AwsExchangeCredentialsOK AwsExchangeCredentials(AwsExchangeCredentials awsExchangeCredentials);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentials">AwsExchangeCredentials</param>
        /// <returns>ApiResponse of AwsExchangeCredentialsOK</returns>
        ApiResponse<AwsExchangeCredentialsOK> AwsExchangeCredentialsWithHttpInfo(AwsExchangeCredentials awsExchangeCredentials);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentialsProjectToken">AwsExchangeCredentialsProjectToken</param>
        /// <returns>IotaExchangeCredentialsOK</returns>
        IotaExchangeCredentialsOK AwsExchangeCredentialsProjectToken(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentialsProjectToken">AwsExchangeCredentialsProjectToken</param>
        /// <returns>ApiResponse of IotaExchangeCredentialsOK</returns>
        ApiResponse<IotaExchangeCredentialsOK> AwsExchangeCredentialsProjectTokenWithHttpInfo(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchIOTAVPResponseInput">FetchIOTAVPResponseInput</param>
        /// <returns>FetchIOTAVPResponseOK</returns>
        FetchIOTAVPResponseOK FetchIotaVpResponse(FetchIOTAVPResponseInput fetchIOTAVPResponseInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchIOTAVPResponseInput">FetchIOTAVPResponseInput</param>
        /// <returns>ApiResponse of FetchIOTAVPResponseOK</returns>
        ApiResponse<FetchIOTAVPResponseOK> FetchIotaVpResponseWithHttpInfo(FetchIOTAVPResponseInput fetchIOTAVPResponseInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates the request token for the Redirect mode to initiate the data-sharing flow.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateDataSharingRequestInput">InitiateDataSharingRequestInput</param>
        /// <returns>InitiateDataSharingRequestOK</returns>
        InitiateDataSharingRequestOK InitiateDataSharingRequest(InitiateDataSharingRequestInput initiateDataSharingRequestInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates the request token for the Redirect mode to initiate the data-sharing flow.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateDataSharingRequestInput">InitiateDataSharingRequestInput</param>
        /// <returns>ApiResponse of InitiateDataSharingRequestOK</returns>
        ApiResponse<InitiateDataSharingRequestOK> InitiateDataSharingRequestWithHttpInfo(InitiateDataSharingRequestInput initiateDataSharingRequestInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iotaExchangeCredentials">IotaAwsExchangeCredentials</param>
        /// <returns>IotaExchangeCredentialsOK</returns>
        IotaExchangeCredentialsOK IotaExchangeCredentials(IotaExchangeCredentials iotaExchangeCredentials);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iotaExchangeCredentials">IotaAwsExchangeCredentials</param>
        /// <returns>ApiResponse of IotaExchangeCredentialsOK</returns>
        ApiResponse<IotaExchangeCredentialsOK> IotaExchangeCredentialsWithHttpInfo(IotaExchangeCredentials iotaExchangeCredentials);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIotaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentials">AwsExchangeCredentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AwsExchangeCredentialsOK</returns>
        System.Threading.Tasks.Task<AwsExchangeCredentialsOK> AwsExchangeCredentialsAsync(AwsExchangeCredentials awsExchangeCredentials, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentials">AwsExchangeCredentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AwsExchangeCredentialsOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<AwsExchangeCredentialsOK>> AwsExchangeCredentialsWithHttpInfoAsync(AwsExchangeCredentials awsExchangeCredentials, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentialsProjectToken">AwsExchangeCredentialsProjectToken</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaExchangeCredentialsOK</returns>
        System.Threading.Tasks.Task<IotaExchangeCredentialsOK> AwsExchangeCredentialsProjectTokenAsync(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentialsProjectToken">AwsExchangeCredentialsProjectToken</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaExchangeCredentialsOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<IotaExchangeCredentialsOK>> AwsExchangeCredentialsProjectTokenWithHttpInfoAsync(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchIOTAVPResponseInput">FetchIOTAVPResponseInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FetchIOTAVPResponseOK</returns>
        System.Threading.Tasks.Task<FetchIOTAVPResponseOK> FetchIotaVpResponseAsync(FetchIOTAVPResponseInput fetchIOTAVPResponseInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchIOTAVPResponseInput">FetchIOTAVPResponseInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FetchIOTAVPResponseOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<FetchIOTAVPResponseOK>> FetchIotaVpResponseWithHttpInfoAsync(FetchIOTAVPResponseInput fetchIOTAVPResponseInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates the request token for the Redirect mode to initiate the data-sharing flow.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateDataSharingRequestInput">InitiateDataSharingRequestInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateDataSharingRequestOK</returns>
        System.Threading.Tasks.Task<InitiateDataSharingRequestOK> InitiateDataSharingRequestAsync(InitiateDataSharingRequestInput initiateDataSharingRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates the request token for the Redirect mode to initiate the data-sharing flow.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateDataSharingRequestInput">InitiateDataSharingRequestInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateDataSharingRequestOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateDataSharingRequestOK>> InitiateDataSharingRequestWithHttpInfoAsync(InitiateDataSharingRequestInput initiateDataSharingRequestInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iotaExchangeCredentials">IotaAwsExchangeCredentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaExchangeCredentialsOK</returns>
        System.Threading.Tasks.Task<IotaExchangeCredentialsOK> IotaExchangeCredentialsAsync(IotaExchangeCredentials iotaExchangeCredentials, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iotaExchangeCredentials">IotaAwsExchangeCredentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaExchangeCredentialsOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<IotaExchangeCredentialsOK>> IotaExchangeCredentialsWithHttpInfoAsync(IotaExchangeCredentials iotaExchangeCredentials, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIotaApi : IIotaApiSync, IIotaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IotaApi : IDisposable, IIotaApi
    {
        private AffinidiTdk.IotaClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IotaApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public IotaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IotaApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public IotaApi(string basePath)
        {
            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IotaClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IotaApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public IotaApi(AffinidiTdk.IotaClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IotaApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IotaApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IotaApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IotaApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IotaClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IotaApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IotaApi(HttpClient client, AffinidiTdk.IotaClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IotaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public IotaApi(AffinidiTdk.IotaClient.Client.ISynchronousClient client, AffinidiTdk.IotaClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.IotaClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.IotaClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentials">AwsExchangeCredentials</param>
        /// <returns>AwsExchangeCredentialsOK</returns>
        public AwsExchangeCredentialsOK AwsExchangeCredentials(AwsExchangeCredentials awsExchangeCredentials)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<AwsExchangeCredentialsOK> localVarResponse = AwsExchangeCredentialsWithHttpInfo(awsExchangeCredentials);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentials">AwsExchangeCredentials</param>
        /// <returns>ApiResponse of AwsExchangeCredentialsOK</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<AwsExchangeCredentialsOK> AwsExchangeCredentialsWithHttpInfo(AwsExchangeCredentials awsExchangeCredentials)
        {
            // verify the required parameter 'awsExchangeCredentials' is set
            if (awsExchangeCredentials == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'awsExchangeCredentials' when calling IotaApi->AwsExchangeCredentials");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsExchangeCredentials;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AwsExchangeCredentialsOK>("/v1/aws-exchange-credentials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AwsExchangeCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentials">AwsExchangeCredentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AwsExchangeCredentialsOK</returns>
        public async System.Threading.Tasks.Task<AwsExchangeCredentialsOK> AwsExchangeCredentialsAsync(AwsExchangeCredentials awsExchangeCredentials, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<AwsExchangeCredentialsOK> localVarResponse = await AwsExchangeCredentialsWithHttpInfoAsync(awsExchangeCredentials, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentials">AwsExchangeCredentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AwsExchangeCredentialsOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<AwsExchangeCredentialsOK>> AwsExchangeCredentialsWithHttpInfoAsync(AwsExchangeCredentials awsExchangeCredentials, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'awsExchangeCredentials' is set
            if (awsExchangeCredentials == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'awsExchangeCredentials' when calling IotaApi->AwsExchangeCredentials");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsExchangeCredentials;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AwsExchangeCredentialsOK>("/v1/aws-exchange-credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AwsExchangeCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentialsProjectToken">AwsExchangeCredentialsProjectToken</param>
        /// <returns>IotaExchangeCredentialsOK</returns>
        public IotaExchangeCredentialsOK AwsExchangeCredentialsProjectToken(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaExchangeCredentialsOK> localVarResponse = AwsExchangeCredentialsProjectTokenWithHttpInfo(awsExchangeCredentialsProjectToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentialsProjectToken">AwsExchangeCredentialsProjectToken</param>
        /// <returns>ApiResponse of IotaExchangeCredentialsOK</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<IotaExchangeCredentialsOK> AwsExchangeCredentialsProjectTokenWithHttpInfo(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken)
        {
            // verify the required parameter 'awsExchangeCredentialsProjectToken' is set
            if (awsExchangeCredentialsProjectToken == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'awsExchangeCredentialsProjectToken' when calling IotaApi->AwsExchangeCredentialsProjectToken");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsExchangeCredentialsProjectToken;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IotaExchangeCredentialsOK>("/v1/aws-exchange-credentials/project-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AwsExchangeCredentialsProjectToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentialsProjectToken">AwsExchangeCredentialsProjectToken</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaExchangeCredentialsOK</returns>
        public async System.Threading.Tasks.Task<IotaExchangeCredentialsOK> AwsExchangeCredentialsProjectTokenAsync(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaExchangeCredentialsOK> localVarResponse = await AwsExchangeCredentialsProjectTokenWithHttpInfoAsync(awsExchangeCredentialsProjectToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsExchangeCredentialsProjectToken">AwsExchangeCredentialsProjectToken</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaExchangeCredentialsOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<IotaExchangeCredentialsOK>> AwsExchangeCredentialsProjectTokenWithHttpInfoAsync(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'awsExchangeCredentialsProjectToken' is set
            if (awsExchangeCredentialsProjectToken == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'awsExchangeCredentialsProjectToken' when calling IotaApi->AwsExchangeCredentialsProjectToken");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsExchangeCredentialsProjectToken;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<IotaExchangeCredentialsOK>("/v1/aws-exchange-credentials/project-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AwsExchangeCredentialsProjectToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchIOTAVPResponseInput">FetchIOTAVPResponseInput</param>
        /// <returns>FetchIOTAVPResponseOK</returns>
        public FetchIOTAVPResponseOK FetchIotaVpResponse(FetchIOTAVPResponseInput fetchIOTAVPResponseInput)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<FetchIOTAVPResponseOK> localVarResponse = FetchIotaVpResponseWithHttpInfo(fetchIOTAVPResponseInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchIOTAVPResponseInput">FetchIOTAVPResponseInput</param>
        /// <returns>ApiResponse of FetchIOTAVPResponseOK</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<FetchIOTAVPResponseOK> FetchIotaVpResponseWithHttpInfo(FetchIOTAVPResponseInput fetchIOTAVPResponseInput)
        {
            // verify the required parameter 'fetchIOTAVPResponseInput' is set
            if (fetchIOTAVPResponseInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'fetchIOTAVPResponseInput' when calling IotaApi->FetchIotaVpResponse");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fetchIOTAVPResponseInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FetchIOTAVPResponseOK>("/v1/fetch-iota-response", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchIotaVpResponse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchIOTAVPResponseInput">FetchIOTAVPResponseInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FetchIOTAVPResponseOK</returns>
        public async System.Threading.Tasks.Task<FetchIOTAVPResponseOK> FetchIotaVpResponseAsync(FetchIOTAVPResponseInput fetchIOTAVPResponseInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<FetchIOTAVPResponseOK> localVarResponse = await FetchIotaVpResponseWithHttpInfoAsync(fetchIOTAVPResponseInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchIOTAVPResponseInput">FetchIOTAVPResponseInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FetchIOTAVPResponseOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<FetchIOTAVPResponseOK>> FetchIotaVpResponseWithHttpInfoAsync(FetchIOTAVPResponseInput fetchIOTAVPResponseInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fetchIOTAVPResponseInput' is set
            if (fetchIOTAVPResponseInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'fetchIOTAVPResponseInput' when calling IotaApi->FetchIotaVpResponse");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fetchIOTAVPResponseInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FetchIOTAVPResponseOK>("/v1/fetch-iota-response", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchIotaVpResponse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Generates the request token for the Redirect mode to initiate the data-sharing flow.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateDataSharingRequestInput">InitiateDataSharingRequestInput</param>
        /// <returns>InitiateDataSharingRequestOK</returns>
        public InitiateDataSharingRequestOK InitiateDataSharingRequest(InitiateDataSharingRequestInput initiateDataSharingRequestInput)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<InitiateDataSharingRequestOK> localVarResponse = InitiateDataSharingRequestWithHttpInfo(initiateDataSharingRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Generates the request token for the Redirect mode to initiate the data-sharing flow.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateDataSharingRequestInput">InitiateDataSharingRequestInput</param>
        /// <returns>ApiResponse of InitiateDataSharingRequestOK</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<InitiateDataSharingRequestOK> InitiateDataSharingRequestWithHttpInfo(InitiateDataSharingRequestInput initiateDataSharingRequestInput)
        {
            // verify the required parameter 'initiateDataSharingRequestInput' is set
            if (initiateDataSharingRequestInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'initiateDataSharingRequestInput' when calling IotaApi->InitiateDataSharingRequest");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = initiateDataSharingRequestInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InitiateDataSharingRequestOK>("/v1/initiate-data-sharing-request", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiateDataSharingRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Generates the request token for the Redirect mode to initiate the data-sharing flow.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateDataSharingRequestInput">InitiateDataSharingRequestInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateDataSharingRequestOK</returns>
        public async System.Threading.Tasks.Task<InitiateDataSharingRequestOK> InitiateDataSharingRequestAsync(InitiateDataSharingRequestInput initiateDataSharingRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<InitiateDataSharingRequestOK> localVarResponse = await InitiateDataSharingRequestWithHttpInfoAsync(initiateDataSharingRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Generates the request token for the Redirect mode to initiate the data-sharing flow.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateDataSharingRequestInput">InitiateDataSharingRequestInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateDataSharingRequestOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<InitiateDataSharingRequestOK>> InitiateDataSharingRequestWithHttpInfoAsync(InitiateDataSharingRequestInput initiateDataSharingRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'initiateDataSharingRequestInput' is set
            if (initiateDataSharingRequestInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'initiateDataSharingRequestInput' when calling IotaApi->InitiateDataSharingRequest");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = initiateDataSharingRequestInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InitiateDataSharingRequestOK>("/v1/initiate-data-sharing-request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiateDataSharingRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iotaExchangeCredentials">IotaAwsExchangeCredentials</param>
        /// <returns>IotaExchangeCredentialsOK</returns>
        public IotaExchangeCredentialsOK IotaExchangeCredentials(IotaExchangeCredentials iotaExchangeCredentials)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaExchangeCredentialsOK> localVarResponse = IotaExchangeCredentialsWithHttpInfo(iotaExchangeCredentials);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iotaExchangeCredentials">IotaAwsExchangeCredentials</param>
        /// <returns>ApiResponse of IotaExchangeCredentialsOK</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<IotaExchangeCredentialsOK> IotaExchangeCredentialsWithHttpInfo(IotaExchangeCredentials iotaExchangeCredentials)
        {
            // verify the required parameter 'iotaExchangeCredentials' is set
            if (iotaExchangeCredentials == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'iotaExchangeCredentials' when calling IotaApi->IotaExchangeCredentials");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = iotaExchangeCredentials;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IotaExchangeCredentialsOK>("/v1/exchange-credentials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IotaExchangeCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iotaExchangeCredentials">IotaAwsExchangeCredentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaExchangeCredentialsOK</returns>
        public async System.Threading.Tasks.Task<IotaExchangeCredentialsOK> IotaExchangeCredentialsAsync(IotaExchangeCredentials iotaExchangeCredentials, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaExchangeCredentialsOK> localVarResponse = await IotaExchangeCredentialsWithHttpInfoAsync(iotaExchangeCredentials, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iotaExchangeCredentials">IotaAwsExchangeCredentials</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaExchangeCredentialsOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<IotaExchangeCredentialsOK>> IotaExchangeCredentialsWithHttpInfoAsync(IotaExchangeCredentials iotaExchangeCredentials, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'iotaExchangeCredentials' is set
            if (iotaExchangeCredentials == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'iotaExchangeCredentials' when calling IotaApi->IotaExchangeCredentials");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = iotaExchangeCredentials;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<IotaExchangeCredentialsOK>("/v1/exchange-credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IotaExchangeCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
