/*
 * IotaService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.IotaClient.Client;
using AffinidiTdk.IotaClient.Model;

namespace AffinidiTdk.IotaClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Affinidi Iota Framework configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIotaConfigurationInput">CreateConfiguration</param>
        /// <returns>IotaConfigurationDto</returns>
        IotaConfigurationDto CreateIotaConfiguration(CreateIotaConfigurationInput createIotaConfigurationInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Affinidi Iota Framework configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIotaConfigurationInput">CreateConfiguration</param>
        /// <returns>ApiResponse of IotaConfigurationDto</returns>
        ApiResponse<IotaConfigurationDto> CreateIotaConfigurationWithHttpInfo(CreateIotaConfigurationInput createIotaConfigurationInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an Affinidi Iota Framework configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns></returns>
        void DeleteIotaConfigurationById(string configurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an Affinidi Iota Framework configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIotaConfigurationByIdWithHttpInfo(string configurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an Affinidi Iota Framework configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>IotaConfigurationDto</returns>
        IotaConfigurationDto GetIotaConfigurationById(string configurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an Affinidi Iota Framework configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>ApiResponse of IotaConfigurationDto</returns>
        ApiResponse<IotaConfigurationDto> GetIotaConfigurationByIdWithHttpInfo(string configurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the client metadata of an Affinidi Iota Framework configuration. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>GetIotaConfigurationMetaDataOK</returns>
        GetIotaConfigurationMetaDataOK GetIotaConfigurationMetaData(string projectId, string configurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the client metadata of an Affinidi Iota Framework configuration. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>ApiResponse of GetIotaConfigurationMetaDataOK</returns>
        ApiResponse<GetIotaConfigurationMetaDataOK> GetIotaConfigurationMetaDataWithHttpInfo(string projectId, string configurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all Affinidi Iota Framework configurations.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListConfigurationOK</returns>
        ListConfigurationOK ListIotaConfigurations();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all Affinidi Iota Framework configurations.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListConfigurationOK</returns>
        ApiResponse<ListConfigurationOK> ListIotaConfigurationsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the details of an Affinidi Iota Framework configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="updateConfigurationByIdInput">UpdateConfigurationById</param>
        /// <returns>IotaConfigurationDto</returns>
        IotaConfigurationDto UpdateIotaConfigurationById(string configurationId, UpdateConfigurationByIdInput updateConfigurationByIdInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the details of an Affinidi Iota Framework configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="updateConfigurationByIdInput">UpdateConfigurationById</param>
        /// <returns>ApiResponse of IotaConfigurationDto</returns>
        ApiResponse<IotaConfigurationDto> UpdateIotaConfigurationByIdWithHttpInfo(string configurationId, UpdateConfigurationByIdInput updateConfigurationByIdInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Affinidi Iota Framework configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIotaConfigurationInput">CreateConfiguration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaConfigurationDto</returns>
        System.Threading.Tasks.Task<IotaConfigurationDto> CreateIotaConfigurationAsync(CreateIotaConfigurationInput createIotaConfigurationInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Affinidi Iota Framework configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIotaConfigurationInput">CreateConfiguration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<IotaConfigurationDto>> CreateIotaConfigurationWithHttpInfoAsync(CreateIotaConfigurationInput createIotaConfigurationInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an Affinidi Iota Framework configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIotaConfigurationByIdAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an Affinidi Iota Framework configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIotaConfigurationByIdWithHttpInfoAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an Affinidi Iota Framework configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaConfigurationDto</returns>
        System.Threading.Tasks.Task<IotaConfigurationDto> GetIotaConfigurationByIdAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an Affinidi Iota Framework configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<IotaConfigurationDto>> GetIotaConfigurationByIdWithHttpInfoAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the client metadata of an Affinidi Iota Framework configuration. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIotaConfigurationMetaDataOK</returns>
        System.Threading.Tasks.Task<GetIotaConfigurationMetaDataOK> GetIotaConfigurationMetaDataAsync(string projectId, string configurationId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the client metadata of an Affinidi Iota Framework configuration. 
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIotaConfigurationMetaDataOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIotaConfigurationMetaDataOK>> GetIotaConfigurationMetaDataWithHttpInfoAsync(string projectId, string configurationId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all Affinidi Iota Framework configurations.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListConfigurationOK</returns>
        System.Threading.Tasks.Task<ListConfigurationOK> ListIotaConfigurationsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all Affinidi Iota Framework configurations.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListConfigurationOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListConfigurationOK>> ListIotaConfigurationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the details of an Affinidi Iota Framework configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="updateConfigurationByIdInput">UpdateConfigurationById</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaConfigurationDto</returns>
        System.Threading.Tasks.Task<IotaConfigurationDto> UpdateIotaConfigurationByIdAsync(string configurationId, UpdateConfigurationByIdInput updateConfigurationByIdInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the details of an Affinidi Iota Framework configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="updateConfigurationByIdInput">UpdateConfigurationById</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<IotaConfigurationDto>> UpdateIotaConfigurationByIdWithHttpInfoAsync(string configurationId, UpdateConfigurationByIdInput updateConfigurationByIdInput, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationsApi : IConfigurationsApiSync, IConfigurationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigurationsApi : IDisposable, IConfigurationsApi
    {
        private AffinidiTdk.IotaClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ConfigurationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ConfigurationsApi(string basePath)
        {
            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IotaClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ConfigurationsApi(AffinidiTdk.IotaClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ConfigurationsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ConfigurationsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IotaClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ConfigurationsApi(HttpClient client, AffinidiTdk.IotaClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ConfigurationsApi(AffinidiTdk.IotaClient.Client.ISynchronousClient client, AffinidiTdk.IotaClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.IotaClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.IotaClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a new Affinidi Iota Framework configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIotaConfigurationInput">CreateConfiguration</param>
        /// <returns>IotaConfigurationDto</returns>
        public IotaConfigurationDto CreateIotaConfiguration(CreateIotaConfigurationInput createIotaConfigurationInput)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> localVarResponse = CreateIotaConfigurationWithHttpInfo(createIotaConfigurationInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Affinidi Iota Framework configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIotaConfigurationInput">CreateConfiguration</param>
        /// <returns>ApiResponse of IotaConfigurationDto</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> CreateIotaConfigurationWithHttpInfo(CreateIotaConfigurationInput createIotaConfigurationInput)
        {
            // verify the required parameter 'createIotaConfigurationInput' is set
            if (createIotaConfigurationInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'createIotaConfigurationInput' when calling ConfigurationsApi->CreateIotaConfiguration");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createIotaConfigurationInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IotaConfigurationDto>("/v1/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIotaConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new Affinidi Iota Framework configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIotaConfigurationInput">CreateConfiguration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaConfigurationDto</returns>
        public async System.Threading.Tasks.Task<IotaConfigurationDto> CreateIotaConfigurationAsync(CreateIotaConfigurationInput createIotaConfigurationInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> localVarResponse = await CreateIotaConfigurationWithHttpInfoAsync(createIotaConfigurationInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Affinidi Iota Framework configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIotaConfigurationInput">CreateConfiguration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto>> CreateIotaConfigurationWithHttpInfoAsync(CreateIotaConfigurationInput createIotaConfigurationInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createIotaConfigurationInput' is set
            if (createIotaConfigurationInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'createIotaConfigurationInput' when calling ConfigurationsApi->CreateIotaConfiguration");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createIotaConfigurationInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<IotaConfigurationDto>("/v1/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIotaConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes an Affinidi Iota Framework configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns></returns>
        public void DeleteIotaConfigurationById(string configurationId)
        {
            DeleteIotaConfigurationByIdWithHttpInfo(configurationId);
        }

        /// <summary>
        ///  Deletes an Affinidi Iota Framework configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<Object> DeleteIotaConfigurationByIdWithHttpInfo(string configurationId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationsApi->DeleteIotaConfigurationById");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/configurations/{configurationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIotaConfigurationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes an Affinidi Iota Framework configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIotaConfigurationByIdAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteIotaConfigurationByIdWithHttpInfoAsync(configurationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes an Affinidi Iota Framework configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<Object>> DeleteIotaConfigurationByIdWithHttpInfoAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationsApi->DeleteIotaConfigurationById");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/configurations/{configurationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIotaConfigurationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the details of an Affinidi Iota Framework configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>IotaConfigurationDto</returns>
        public IotaConfigurationDto GetIotaConfigurationById(string configurationId)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> localVarResponse = GetIotaConfigurationByIdWithHttpInfo(configurationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the details of an Affinidi Iota Framework configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>ApiResponse of IotaConfigurationDto</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> GetIotaConfigurationByIdWithHttpInfo(string configurationId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationsApi->GetIotaConfigurationById");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IotaConfigurationDto>("/v1/configurations/{configurationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIotaConfigurationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the details of an Affinidi Iota Framework configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaConfigurationDto</returns>
        public async System.Threading.Tasks.Task<IotaConfigurationDto> GetIotaConfigurationByIdAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> localVarResponse = await GetIotaConfigurationByIdWithHttpInfoAsync(configurationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the details of an Affinidi Iota Framework configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto>> GetIotaConfigurationByIdWithHttpInfoAsync(string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationsApi->GetIotaConfigurationById");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IotaConfigurationDto>("/v1/configurations/{configurationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIotaConfigurationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the client metadata of an Affinidi Iota Framework configuration. 
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>GetIotaConfigurationMetaDataOK</returns>
        public GetIotaConfigurationMetaDataOK GetIotaConfigurationMetaData(string projectId, string configurationId)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<GetIotaConfigurationMetaDataOK> localVarResponse = GetIotaConfigurationMetaDataWithHttpInfo(projectId, configurationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the client metadata of an Affinidi Iota Framework configuration. 
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <returns>ApiResponse of GetIotaConfigurationMetaDataOK</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<GetIotaConfigurationMetaDataOK> GetIotaConfigurationMetaDataWithHttpInfo(string projectId, string configurationId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ConfigurationsApi->GetIotaConfigurationMetaData");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationsApi->GetIotaConfigurationMetaData");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIotaConfigurationMetaDataOK>("/v1/projects/{projectId}/configurations/{configurationId}/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIotaConfigurationMetaData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the client metadata of an Affinidi Iota Framework configuration. 
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIotaConfigurationMetaDataOK</returns>
        public async System.Threading.Tasks.Task<GetIotaConfigurationMetaDataOK> GetIotaConfigurationMetaDataAsync(string projectId, string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<GetIotaConfigurationMetaDataOK> localVarResponse = await GetIotaConfigurationMetaDataWithHttpInfoAsync(projectId, configurationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the client metadata of an Affinidi Iota Framework configuration. 
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIotaConfigurationMetaDataOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<GetIotaConfigurationMetaDataOK>> GetIotaConfigurationMetaDataWithHttpInfoAsync(string projectId, string configurationId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ConfigurationsApi->GetIotaConfigurationMetaData");

            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationsApi->GetIotaConfigurationMetaData");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIotaConfigurationMetaDataOK>("/v1/projects/{projectId}/configurations/{configurationId}/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIotaConfigurationMetaData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all Affinidi Iota Framework configurations.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListConfigurationOK</returns>
        public ListConfigurationOK ListIotaConfigurations()
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<ListConfigurationOK> localVarResponse = ListIotaConfigurationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all Affinidi Iota Framework configurations.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListConfigurationOK</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<ListConfigurationOK> ListIotaConfigurationsWithHttpInfo()
        {
            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListConfigurationOK>("/v1/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIotaConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all Affinidi Iota Framework configurations.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListConfigurationOK</returns>
        public async System.Threading.Tasks.Task<ListConfigurationOK> ListIotaConfigurationsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<ListConfigurationOK> localVarResponse = await ListIotaConfigurationsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all Affinidi Iota Framework configurations.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListConfigurationOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<ListConfigurationOK>> ListIotaConfigurationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListConfigurationOK>("/v1/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIotaConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates the details of an Affinidi Iota Framework configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="updateConfigurationByIdInput">UpdateConfigurationById</param>
        /// <returns>IotaConfigurationDto</returns>
        public IotaConfigurationDto UpdateIotaConfigurationById(string configurationId, UpdateConfigurationByIdInput updateConfigurationByIdInput)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> localVarResponse = UpdateIotaConfigurationByIdWithHttpInfo(configurationId, updateConfigurationByIdInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the details of an Affinidi Iota Framework configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="updateConfigurationByIdInput">UpdateConfigurationById</param>
        /// <returns>ApiResponse of IotaConfigurationDto</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> UpdateIotaConfigurationByIdWithHttpInfo(string configurationId, UpdateConfigurationByIdInput updateConfigurationByIdInput)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationsApi->UpdateIotaConfigurationById");

            // verify the required parameter 'updateConfigurationByIdInput' is set
            if (updateConfigurationByIdInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'updateConfigurationByIdInput' when calling ConfigurationsApi->UpdateIotaConfigurationById");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = updateConfigurationByIdInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<IotaConfigurationDto>("/v1/configurations/{configurationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIotaConfigurationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates the details of an Affinidi Iota Framework configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="updateConfigurationByIdInput">UpdateConfigurationById</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IotaConfigurationDto</returns>
        public async System.Threading.Tasks.Task<IotaConfigurationDto> UpdateIotaConfigurationByIdAsync(string configurationId, UpdateConfigurationByIdInput updateConfigurationByIdInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto> localVarResponse = await UpdateIotaConfigurationByIdWithHttpInfoAsync(configurationId, updateConfigurationByIdInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the details of an Affinidi Iota Framework configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="updateConfigurationByIdInput">UpdateConfigurationById</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IotaConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<IotaConfigurationDto>> UpdateIotaConfigurationByIdWithHttpInfoAsync(string configurationId, UpdateConfigurationByIdInput updateConfigurationByIdInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling ConfigurationsApi->UpdateIotaConfigurationById");

            // verify the required parameter 'updateConfigurationByIdInput' is set
            if (updateConfigurationByIdInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'updateConfigurationByIdInput' when calling ConfigurationsApi->UpdateIotaConfigurationById");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = updateConfigurationByIdInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<IotaConfigurationDto>("/v1/configurations/{configurationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIotaConfigurationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
