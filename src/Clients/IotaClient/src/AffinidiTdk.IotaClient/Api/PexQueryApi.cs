/*
 * IotaService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.IotaClient.Client;
using AffinidiTdk.IotaClient.Model;

namespace AffinidiTdk.IotaClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPexQueryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Presentation Definition in the configuration to query data.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="createPexQueryInput">CreatePexQuery</param>
        /// <returns>PexQueryDto</returns>
        PexQueryDto CreatePexQuery(string configurationId, CreatePexQueryInput createPexQueryInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Presentation Definition in the configuration to query data.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="createPexQueryInput">CreatePexQuery</param>
        /// <returns>ApiResponse of PexQueryDto</returns>
        ApiResponse<PexQueryDto> CreatePexQueryWithHttpInfo(string configurationId, CreatePexQueryInput createPexQueryInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all Presentation Definition queries of a configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="deletePexQueriesInput">DeletePexQueriesInput</param>
        /// <returns>Object</returns>
        Object DeletePexQueries(string configurationId, DeletePexQueriesInput deletePexQueriesInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all Presentation Definition queries of a configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="deletePexQueriesInput">DeletePexQueriesInput</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeletePexQueriesWithHttpInfo(string configurationId, DeletePexQueriesInput deletePexQueriesInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <returns></returns>
        void DeletePexQueryById(string configurationId, string queryId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePexQueryByIdWithHttpInfo(string configurationId, string queryId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <returns>PexQueryDto</returns>
        PexQueryDto GetPexQueryById(string configurationId, string queryId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <returns>ApiResponse of PexQueryDto</returns>
        ApiResponse<PexQueryDto> GetPexQueryByIdWithHttpInfo(string configurationId, string queryId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Presentation Definitions in the configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ListPexQueriesOK</returns>
        ListPexQueriesOK ListPexQueries(string configurationId, int? limit = default, string? exclusiveStartKey = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Presentation Definitions in the configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of ListPexQueriesOK</returns>
        ApiResponse<ListPexQueriesOK> ListPexQueriesWithHttpInfo(string configurationId, int? limit = default, string? exclusiveStartKey = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Saves all Presentation Definition queries of a configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="savePexQueriesUpdateInput">SavePexQueriesInput</param>
        /// <returns>Object</returns>
        Object SavePexQueries(string configurationId, SavePexQueriesUpdateInput savePexQueriesUpdateInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Saves all Presentation Definition queries of a configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="savePexQueriesUpdateInput">SavePexQueriesInput</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SavePexQueriesWithHttpInfo(string configurationId, SavePexQueriesUpdateInput savePexQueriesUpdateInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="updatePexQueryInput">UpdatePexQueryById</param>
        /// <returns>PexQueryDto</returns>
        PexQueryDto UpdatePexQueryById(string configurationId, string queryId, UpdatePexQueryInput updatePexQueryInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="updatePexQueryInput">UpdatePexQueryById</param>
        /// <returns>ApiResponse of PexQueryDto</returns>
        ApiResponse<PexQueryDto> UpdatePexQueryByIdWithHttpInfo(string configurationId, string queryId, UpdatePexQueryInput updatePexQueryInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPexQueryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Presentation Definition in the configuration to query data.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="createPexQueryInput">CreatePexQuery</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PexQueryDto</returns>
        System.Threading.Tasks.Task<PexQueryDto> CreatePexQueryAsync(string configurationId, CreatePexQueryInput createPexQueryInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Presentation Definition in the configuration to query data.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="createPexQueryInput">CreatePexQuery</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PexQueryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PexQueryDto>> CreatePexQueryWithHttpInfoAsync(string configurationId, CreatePexQueryInput createPexQueryInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all Presentation Definition queries of a configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="deletePexQueriesInput">DeletePexQueriesInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeletePexQueriesAsync(string configurationId, DeletePexQueriesInput deletePexQueriesInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all Presentation Definition queries of a configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="deletePexQueriesInput">DeletePexQueriesInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePexQueriesWithHttpInfoAsync(string configurationId, DeletePexQueriesInput deletePexQueriesInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePexQueryByIdAsync(string configurationId, string queryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePexQueryByIdWithHttpInfoAsync(string configurationId, string queryId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PexQueryDto</returns>
        System.Threading.Tasks.Task<PexQueryDto> GetPexQueryByIdAsync(string configurationId, string queryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PexQueryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PexQueryDto>> GetPexQueryByIdWithHttpInfoAsync(string configurationId, string queryId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Presentation Definitions in the configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPexQueriesOK</returns>
        System.Threading.Tasks.Task<ListPexQueriesOK> ListPexQueriesAsync(string configurationId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Presentation Definitions in the configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPexQueriesOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPexQueriesOK>> ListPexQueriesWithHttpInfoAsync(string configurationId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Saves all Presentation Definition queries of a configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="savePexQueriesUpdateInput">SavePexQueriesInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SavePexQueriesAsync(string configurationId, SavePexQueriesUpdateInput savePexQueriesUpdateInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Saves all Presentation Definition queries of a configuration.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="savePexQueriesUpdateInput">SavePexQueriesInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SavePexQueriesWithHttpInfoAsync(string configurationId, SavePexQueriesUpdateInput savePexQueriesUpdateInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="updatePexQueryInput">UpdatePexQueryById</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PexQueryDto</returns>
        System.Threading.Tasks.Task<PexQueryDto> UpdatePexQueryByIdAsync(string configurationId, string queryId, UpdatePexQueryInput updatePexQueryInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the Presentation Definition in the configuration by ID.
        /// </remarks>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="updatePexQueryInput">UpdatePexQueryById</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PexQueryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PexQueryDto>> UpdatePexQueryByIdWithHttpInfoAsync(string configurationId, string queryId, UpdatePexQueryInput updatePexQueryInput, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPexQueryApi : IPexQueryApiSync, IPexQueryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PexQueryApi : IDisposable, IPexQueryApi
    {
        private AffinidiTdk.IotaClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PexQueryApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PexQueryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PexQueryApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PexQueryApi(string basePath)
        {
            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IotaClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PexQueryApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PexQueryApi(AffinidiTdk.IotaClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PexQueryApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PexQueryApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PexQueryApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PexQueryApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.IotaClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PexQueryApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PexQueryApi(HttpClient client, AffinidiTdk.IotaClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.IotaClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.IotaClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.IotaClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PexQueryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PexQueryApi(AffinidiTdk.IotaClient.Client.ISynchronousClient client, AffinidiTdk.IotaClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.IotaClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.IotaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.IotaClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.IotaClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a new Presentation Definition in the configuration to query data.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="createPexQueryInput">CreatePexQuery</param>
        /// <returns>PexQueryDto</returns>
        public PexQueryDto CreatePexQuery(string configurationId, CreatePexQueryInput createPexQueryInput)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> localVarResponse = CreatePexQueryWithHttpInfo(configurationId, createPexQueryInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Presentation Definition in the configuration to query data.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="createPexQueryInput">CreatePexQuery</param>
        /// <returns>ApiResponse of PexQueryDto</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> CreatePexQueryWithHttpInfo(string configurationId, CreatePexQueryInput createPexQueryInput)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->CreatePexQuery");

            // verify the required parameter 'createPexQueryInput' is set
            if (createPexQueryInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'createPexQueryInput' when calling PexQueryApi->CreatePexQuery");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = createPexQueryInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PexQueryDto>("/v1/configurations/{configurationId}/pex-queries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePexQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new Presentation Definition in the configuration to query data.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="createPexQueryInput">CreatePexQuery</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PexQueryDto</returns>
        public async System.Threading.Tasks.Task<PexQueryDto> CreatePexQueryAsync(string configurationId, CreatePexQueryInput createPexQueryInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> localVarResponse = await CreatePexQueryWithHttpInfoAsync(configurationId, createPexQueryInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Presentation Definition in the configuration to query data.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="createPexQueryInput">CreatePexQuery</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PexQueryDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto>> CreatePexQueryWithHttpInfoAsync(string configurationId, CreatePexQueryInput createPexQueryInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->CreatePexQuery");

            // verify the required parameter 'createPexQueryInput' is set
            if (createPexQueryInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'createPexQueryInput' when calling PexQueryApi->CreatePexQuery");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = createPexQueryInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PexQueryDto>("/v1/configurations/{configurationId}/pex-queries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePexQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes all Presentation Definition queries of a configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="deletePexQueriesInput">DeletePexQueriesInput</param>
        /// <returns>Object</returns>
        public Object DeletePexQueries(string configurationId, DeletePexQueriesInput deletePexQueriesInput)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<Object> localVarResponse = DeletePexQueriesWithHttpInfo(configurationId, deletePexQueriesInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes all Presentation Definition queries of a configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="deletePexQueriesInput">DeletePexQueriesInput</param>
        /// <returns>ApiResponse of Object</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<Object> DeletePexQueriesWithHttpInfo(string configurationId, DeletePexQueriesInput deletePexQueriesInput)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->DeletePexQueries");

            // verify the required parameter 'deletePexQueriesInput' is set
            if (deletePexQueriesInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'deletePexQueriesInput' when calling PexQueryApi->DeletePexQueries");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = deletePexQueriesInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/configurations/{configurationId}/delete-queries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePexQueries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes all Presentation Definition queries of a configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="deletePexQueriesInput">DeletePexQueriesInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeletePexQueriesAsync(string configurationId, DeletePexQueriesInput deletePexQueriesInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<Object> localVarResponse = await DeletePexQueriesWithHttpInfoAsync(configurationId, deletePexQueriesInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes all Presentation Definition queries of a configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="deletePexQueriesInput">DeletePexQueriesInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<Object>> DeletePexQueriesWithHttpInfoAsync(string configurationId, DeletePexQueriesInput deletePexQueriesInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->DeletePexQueries");

            // verify the required parameter 'deletePexQueriesInput' is set
            if (deletePexQueriesInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'deletePexQueriesInput' when calling PexQueryApi->DeletePexQueries");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = deletePexQueriesInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/configurations/{configurationId}/delete-queries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePexQueries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <returns></returns>
        public void DeletePexQueryById(string configurationId, string queryId)
        {
            DeletePexQueryByIdWithHttpInfo(configurationId, queryId);
        }

        /// <summary>
        ///  Deletes a Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<Object> DeletePexQueryByIdWithHttpInfo(string configurationId, string queryId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->DeletePexQueryById");

            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'queryId' when calling PexQueryApi->DeletePexQueryById");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(queryId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/configurations/{configurationId}/pex-queries/{queryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePexQueryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePexQueryByIdAsync(string configurationId, string queryId, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeletePexQueryByIdWithHttpInfoAsync(configurationId, queryId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<Object>> DeletePexQueryByIdWithHttpInfoAsync(string configurationId, string queryId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->DeletePexQueryById");

            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'queryId' when calling PexQueryApi->DeletePexQueryById");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(queryId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/configurations/{configurationId}/pex-queries/{queryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePexQueryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <returns>PexQueryDto</returns>
        public PexQueryDto GetPexQueryById(string configurationId, string queryId)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> localVarResponse = GetPexQueryByIdWithHttpInfo(configurationId, queryId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <returns>ApiResponse of PexQueryDto</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> GetPexQueryByIdWithHttpInfo(string configurationId, string queryId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->GetPexQueryById");

            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'queryId' when calling PexQueryApi->GetPexQueryById");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(queryId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PexQueryDto>("/v1/configurations/{configurationId}/pex-queries/{queryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPexQueryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PexQueryDto</returns>
        public async System.Threading.Tasks.Task<PexQueryDto> GetPexQueryByIdAsync(string configurationId, string queryId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> localVarResponse = await GetPexQueryByIdWithHttpInfoAsync(configurationId, queryId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PexQueryDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto>> GetPexQueryByIdWithHttpInfoAsync(string configurationId, string queryId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->GetPexQueryById");

            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'queryId' when calling PexQueryApi->GetPexQueryById");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(queryId)); // path parameter

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PexQueryDto>("/v1/configurations/{configurationId}/pex-queries/{queryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPexQueryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Presentation Definitions in the configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ListPexQueriesOK</returns>
        public ListPexQueriesOK ListPexQueries(string configurationId, int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<ListPexQueriesOK> localVarResponse = ListPexQueriesWithHttpInfo(configurationId, limit, exclusiveStartKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Presentation Definitions in the configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of ListPexQueriesOK</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<ListPexQueriesOK> ListPexQueriesWithHttpInfo(string configurationId, int? limit = default, string? exclusiveStartKey = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->ListPexQueries");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListPexQueriesOK>("/v1/configurations/{configurationId}/pex-queries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPexQueries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Presentation Definitions in the configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPexQueriesOK</returns>
        public async System.Threading.Tasks.Task<ListPexQueriesOK> ListPexQueriesAsync(string configurationId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<ListPexQueriesOK> localVarResponse = await ListPexQueriesWithHttpInfoAsync(configurationId, limit, exclusiveStartKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Presentation Definitions in the configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional)</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPexQueriesOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<ListPexQueriesOK>> ListPexQueriesWithHttpInfoAsync(string configurationId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->ListPexQueries");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListPexQueriesOK>("/v1/configurations/{configurationId}/pex-queries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPexQueries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Saves all Presentation Definition queries of a configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="savePexQueriesUpdateInput">SavePexQueriesInput</param>
        /// <returns>Object</returns>
        public Object SavePexQueries(string configurationId, SavePexQueriesUpdateInput savePexQueriesUpdateInput)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<Object> localVarResponse = SavePexQueriesWithHttpInfo(configurationId, savePexQueriesUpdateInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Saves all Presentation Definition queries of a configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="savePexQueriesUpdateInput">SavePexQueriesInput</param>
        /// <returns>ApiResponse of Object</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<Object> SavePexQueriesWithHttpInfo(string configurationId, SavePexQueriesUpdateInput savePexQueriesUpdateInput)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->SavePexQueries");

            // verify the required parameter 'savePexQueriesUpdateInput' is set
            if (savePexQueriesUpdateInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'savePexQueriesUpdateInput' when calling PexQueryApi->SavePexQueries");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = savePexQueriesUpdateInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/configurations/{configurationId}/save-queries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SavePexQueries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Saves all Presentation Definition queries of a configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="savePexQueriesUpdateInput">SavePexQueriesInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SavePexQueriesAsync(string configurationId, SavePexQueriesUpdateInput savePexQueriesUpdateInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<Object> localVarResponse = await SavePexQueriesWithHttpInfoAsync(configurationId, savePexQueriesUpdateInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Saves all Presentation Definition queries of a configuration.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="savePexQueriesUpdateInput">SavePexQueriesInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<Object>> SavePexQueriesWithHttpInfoAsync(string configurationId, SavePexQueriesUpdateInput savePexQueriesUpdateInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->SavePexQueries");

            // verify the required parameter 'savePexQueriesUpdateInput' is set
            if (savePexQueriesUpdateInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'savePexQueriesUpdateInput' when calling PexQueryApi->SavePexQueries");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = savePexQueriesUpdateInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/configurations/{configurationId}/save-queries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SavePexQueries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates the Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="updatePexQueryInput">UpdatePexQueryById</param>
        /// <returns>PexQueryDto</returns>
        public PexQueryDto UpdatePexQueryById(string configurationId, string queryId, UpdatePexQueryInput updatePexQueryInput)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> localVarResponse = UpdatePexQueryByIdWithHttpInfo(configurationId, queryId, updatePexQueryInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="updatePexQueryInput">UpdatePexQueryById</param>
        /// <returns>ApiResponse of PexQueryDto</returns>
        public AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> UpdatePexQueryByIdWithHttpInfo(string configurationId, string queryId, UpdatePexQueryInput updatePexQueryInput)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->UpdatePexQueryById");

            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'queryId' when calling PexQueryApi->UpdatePexQueryById");

            // verify the required parameter 'updatePexQueryInput' is set
            if (updatePexQueryInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'updatePexQueryInput' when calling PexQueryApi->UpdatePexQueryById");

            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(queryId)); // path parameter
            localVarRequestOptions.Data = updatePexQueryInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<PexQueryDto>("/v1/configurations/{configurationId}/pex-queries/{queryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePexQueryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates the Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="updatePexQueryInput">UpdatePexQueryById</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PexQueryDto</returns>
        public async System.Threading.Tasks.Task<PexQueryDto> UpdatePexQueryByIdAsync(string configurationId, string queryId, UpdatePexQueryInput updatePexQueryInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto> localVarResponse = await UpdatePexQueryByIdWithHttpInfoAsync(configurationId, queryId, updatePexQueryInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the Presentation Definition in the configuration by ID.
        /// </summary>
        /// <exception cref="AffinidiTdk.IotaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">ID of the Affinidi Iota Framework configuration.</param>
        /// <param name="queryId">The ID of the query.</param>
        /// <param name="updatePexQueryInput">UpdatePexQueryById</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PexQueryDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.IotaClient.Client.ApiResponse<PexQueryDto>> UpdatePexQueryByIdWithHttpInfoAsync(string configurationId, string queryId, UpdatePexQueryInput updatePexQueryInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'configurationId' when calling PexQueryApi->UpdatePexQueryById");

            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'queryId' when calling PexQueryApi->UpdatePexQueryById");

            // verify the required parameter 'updatePexQueryInput' is set
            if (updatePexQueryInput == null)
                throw new AffinidiTdk.IotaClient.Client.ApiException(400, "Missing required parameter 'updatePexQueryInput' when calling PexQueryApi->UpdatePexQueryById");


            AffinidiTdk.IotaClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.IotaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.IotaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("configurationId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryId", AffinidiTdk.IotaClient.Client.ClientUtils.ParameterToString(queryId)); // path parameter
            localVarRequestOptions.Data = updatePexQueryInput;

            // authentication (ProjectTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<PexQueryDto>("/v1/configurations/{configurationId}/pex-queries/{queryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePexQueryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
