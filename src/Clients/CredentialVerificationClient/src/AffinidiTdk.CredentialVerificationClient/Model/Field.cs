/*
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialVerificationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialVerificationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialVerificationClient.Model
{
    /// <summary>
    /// Field
    /// </summary>
    [DataContract(Name = "Field")]
    public partial class Field : IValidatableObject
    {
        /// <summary>
        /// Defines Predicate
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PredicateEnum
        {
            /// <summary>
            /// Enum Required for value: required
            /// </summary>
            [EnumMember(Value = "required")]
            Required = 1,

            /// <summary>
            /// Enum Preferred for value: preferred
            /// </summary>
            [EnumMember(Value = "preferred")]
            Preferred = 2
        }


        /// <summary>
        /// Gets or Sets Predicate
        /// </summary>
        [DataMember(Name = "predicate", EmitDefaultValue = false)]
        public PredicateEnum? Predicate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Field" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="path">path.</param>
        /// <param name="purpose">purpose.</param>
        /// <param name="filter">filter.</param>
        /// <param name="predicate">predicate.</param>
        public Field(string id = default, List<string> path = default, string purpose = default, Filter filter = default, PredicateEnum? predicate = default)
        {
            this.Id = id;
            this.Path = path;
            this.Purpose = purpose;
            this.Filter = filter;
            this.Predicate = predicate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public List<string> Path { get; set; }

        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public Filter Filter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Field {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Predicate: ").Append(Predicate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
