/*
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.CredentialVerificationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialVerificationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialVerificationClient.Model
{
    /// <summary>
    /// Request model of /verify-vp
    /// </summary>
    [DataContract(Name = "VerifyPresentationInput")]
    public partial class VerifyPresentationInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyPresentationInput" /> class.
        /// </summary>
        /// <param name="verifiablePresentation">verifiablePresentation.</param>
        /// <param name="signedPresentation">signedPresentation.</param>
        /// <param name="presentationDefinition">presentationDefinition.</param>
        /// <param name="presentationSubmission">presentationSubmission.</param>
        /// <param name="dcqlQuery">dcqlQuery.</param>
        /// <param name="challenge">challenge.</param>
        public VerifyPresentationInput(Object verifiablePresentation = default, Object signedPresentation = default, Object presentationDefinition = default, Object presentationSubmission = default, Object dcqlQuery = default, string challenge = default)
        {
            this.VerifiablePresentation = verifiablePresentation;
            this.SignedPresentation = signedPresentation;
            this.PresentationDefinition = presentationDefinition;
            this.PresentationSubmission = presentationSubmission;
            this.DcqlQuery = dcqlQuery;
            this.Challenge = challenge;
        }

        /// <summary>
        /// Gets or Sets VerifiablePresentation
        /// </summary>
        [DataMember(Name = "verifiablePresentation", EmitDefaultValue = false)]
        public Object VerifiablePresentation { get; set; }

        /// <summary>
        /// Gets or Sets SignedPresentation
        /// </summary>
        [DataMember(Name = "signedPresentation", EmitDefaultValue = false)]
        public Object SignedPresentation { get; set; }

        /// <summary>
        /// Gets or Sets PresentationDefinition
        /// </summary>
        [DataMember(Name = "presentationDefinition", EmitDefaultValue = false)]
        public Object PresentationDefinition { get; set; }

        /// <summary>
        /// Gets or Sets PresentationSubmission
        /// </summary>
        [DataMember(Name = "presentationSubmission", EmitDefaultValue = false)]
        public Object PresentationSubmission { get; set; }

        /// <summary>
        /// Gets or Sets DcqlQuery
        /// </summary>
        [DataMember(Name = "dcqlQuery", EmitDefaultValue = false)]
        public Object DcqlQuery { get; set; }

        /// <summary>
        /// Gets or Sets Challenge
        /// </summary>
        [DataMember(Name = "challenge", EmitDefaultValue = false)]
        public string Challenge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyPresentationInput {\n");
            sb.Append("  VerifiablePresentation: ").Append(VerifiablePresentation).Append("\n");
            sb.Append("  SignedPresentation: ").Append(SignedPresentation).Append("\n");
            sb.Append("  PresentationDefinition: ").Append(PresentationDefinition).Append("\n");
            sb.Append("  PresentationSubmission: ").Append(PresentationSubmission).Append("\n");
            sb.Append("  DcqlQuery: ").Append(DcqlQuery).Append("\n");
            sb.Append("  Challenge: ").Append(Challenge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
