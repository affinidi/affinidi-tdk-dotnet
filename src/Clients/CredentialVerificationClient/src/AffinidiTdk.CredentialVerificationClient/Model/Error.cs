/*
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.CredentialVerificationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialVerificationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialVerificationClient.Model
{
    /// <summary>
    /// Error object
    /// </summary>
    [DataContract(Name = "Error")]
    public partial class Error : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="errorCode">Error code.</param>
        /// <param name="errorMessage">Error message.</param>
        /// <param name="message">Verbose message.</param>
        /// <param name="name">Error name.</param>
        /// <param name="debugId">Debug identifier.</param>
        /// <param name="details">Error details.</param>
        public Error(string errorCode = default, string errorMessage = default, string message = default, string name = default, string debugId = default, List<ErrorDetail> details = default)
        {
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
            this.Message = message;
            this.Name = name;
            this.DebugId = debugId;
            this.Details = details;
        }

        /// <summary>
        /// Error code
        /// </summary>
        /// <value>Error code</value>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Error message
        /// </summary>
        /// <value>Error message</value>
        [DataMember(Name = "errorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Verbose message
        /// </summary>
        /// <value>Verbose message</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Error name
        /// </summary>
        /// <value>Error name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Debug identifier
        /// </summary>
        /// <value>Debug identifier</value>
        [DataMember(Name = "debugId", EmitDefaultValue = false)]
        public string DebugId { get; set; }

        /// <summary>
        /// Error details
        /// </summary>
        /// <value>Error details</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public List<ErrorDetail> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DebugId: ").Append(DebugId).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
