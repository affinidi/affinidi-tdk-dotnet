/*
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.CredentialVerificationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialVerificationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialVerificationClient.Model
{
    /// <summary>
    /// Filter
    /// </summary>
    [DataContract(Name = "Filter")]
    public partial class Filter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Filter" /> class.
        /// </summary>
        /// <param name="varConst">varConst.</param>
        /// <param name="varEnum">varEnum.</param>
        /// <param name="exclusiveMinimum">exclusiveMinimum.</param>
        /// <param name="exclusiveMaximum">exclusiveMaximum.</param>
        /// <param name="format">format.</param>
        /// <param name="formatMaximum">formatMaximum.</param>
        /// <param name="formatMinimum">formatMinimum.</param>
        /// <param name="formatExclusiveMaximum">formatExclusiveMaximum.</param>
        /// <param name="formatExclusiveMinimum">formatExclusiveMinimum.</param>
        /// <param name="minLength">minLength.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="minimum">minimum.</param>
        /// <param name="maximum">maximum.</param>
        /// <param name="not">not.</param>
        /// <param name="pattern">pattern.</param>
        /// <param name="contains">contains.</param>
        /// <param name="items">items.</param>
        /// <param name="type">type.</param>
        public Filter(FilterConst varConst = default, List<FilterConst> varEnum = default, FilterConst exclusiveMinimum = default, FilterConst exclusiveMaximum = default, string format = default, string formatMaximum = default, string formatMinimum = default, string formatExclusiveMaximum = default, string formatExclusiveMinimum = default, int minLength = default, int maxLength = default, FilterConst minimum = default, FilterConst maximum = default, Object not = default, string pattern = default, Filter contains = default, FilterItems items = default, string type = default)
        {
            this.Const = varConst;
            this.Enum = varEnum;
            this.ExclusiveMinimum = exclusiveMinimum;
            this.ExclusiveMaximum = exclusiveMaximum;
            this.Format = format;
            this.FormatMaximum = formatMaximum;
            this.FormatMinimum = formatMinimum;
            this.FormatExclusiveMaximum = formatExclusiveMaximum;
            this.FormatExclusiveMinimum = formatExclusiveMinimum;
            this.MinLength = minLength;
            this.MaxLength = maxLength;
            this.Minimum = minimum;
            this.Maximum = maximum;
            this.Not = not;
            this.Pattern = pattern;
            this.Contains = contains;
            this.Items = items;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Const
        /// </summary>
        [DataMember(Name = "_const", EmitDefaultValue = false)]
        public FilterConst Const { get; set; }

        /// <summary>
        /// Gets or Sets Enum
        /// </summary>
        [DataMember(Name = "_enum", EmitDefaultValue = false)]
        public List<FilterConst> Enum { get; set; }

        /// <summary>
        /// Gets or Sets ExclusiveMinimum
        /// </summary>
        [DataMember(Name = "exclusiveMinimum", EmitDefaultValue = false)]
        public FilterConst ExclusiveMinimum { get; set; }

        /// <summary>
        /// Gets or Sets ExclusiveMaximum
        /// </summary>
        [DataMember(Name = "exclusiveMaximum", EmitDefaultValue = false)]
        public FilterConst ExclusiveMaximum { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets FormatMaximum
        /// </summary>
        [DataMember(Name = "formatMaximum", EmitDefaultValue = false)]
        public string FormatMaximum { get; set; }

        /// <summary>
        /// Gets or Sets FormatMinimum
        /// </summary>
        [DataMember(Name = "formatMinimum", EmitDefaultValue = false)]
        public string FormatMinimum { get; set; }

        /// <summary>
        /// Gets or Sets FormatExclusiveMaximum
        /// </summary>
        [DataMember(Name = "formatExclusiveMaximum", EmitDefaultValue = false)]
        public string FormatExclusiveMaximum { get; set; }

        /// <summary>
        /// Gets or Sets FormatExclusiveMinimum
        /// </summary>
        [DataMember(Name = "formatExclusiveMinimum", EmitDefaultValue = false)]
        public string FormatExclusiveMinimum { get; set; }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name = "minLength", EmitDefaultValue = false)]
        public int MinLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name = "maxLength", EmitDefaultValue = false)]
        public int MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>
        [DataMember(Name = "minimum", EmitDefaultValue = false)]
        public FilterConst Minimum { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name = "maximum", EmitDefaultValue = false)]
        public FilterConst Maximum { get; set; }

        /// <summary>
        /// Gets or Sets Not
        /// </summary>
        [DataMember(Name = "not", EmitDefaultValue = false)]
        public Object Not { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name = "pattern", EmitDefaultValue = false)]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets Contains
        /// </summary>
        [DataMember(Name = "contains", EmitDefaultValue = false)]
        public Filter Contains { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public FilterItems Items { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Filter {\n");
            sb.Append("  Const: ").Append(Const).Append("\n");
            sb.Append("  Enum: ").Append(Enum).Append("\n");
            sb.Append("  ExclusiveMinimum: ").Append(ExclusiveMinimum).Append("\n");
            sb.Append("  ExclusiveMaximum: ").Append(ExclusiveMaximum).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  FormatMaximum: ").Append(FormatMaximum).Append("\n");
            sb.Append("  FormatMinimum: ").Append(FormatMinimum).Append("\n");
            sb.Append("  FormatExclusiveMaximum: ").Append(FormatExclusiveMaximum).Append("\n");
            sb.Append("  FormatExclusiveMinimum: ").Append(FormatExclusiveMinimum).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Not: ").Append(Not).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Contains: ").Append(Contains).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
