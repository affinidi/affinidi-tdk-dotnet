/*
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.CredentialVerificationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialVerificationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialVerificationClient.Model
{
    /// <summary>
    /// PresentationSubmission
    /// </summary>
    [DataContract(Name = "PresentationSubmission")]
    public partial class PresentationSubmission : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PresentationSubmission" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PresentationSubmission() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PresentationSubmission" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="definitionId">definitionId (required).</param>
        /// <param name="descriptorMap">descriptorMap (required).</param>
        public PresentationSubmission(string id = default, string definitionId = default, List<Descriptor> descriptorMap = default)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PresentationSubmission and cannot be null");
            }
            this.Id = id;
            // to ensure "definitionId" is required (not null)
            if (definitionId == null)
            {
                throw new ArgumentNullException("definitionId is a required property for PresentationSubmission and cannot be null");
            }
            this.DefinitionId = definitionId;
            // to ensure "descriptorMap" is required (not null)
            if (descriptorMap == null)
            {
                throw new ArgumentNullException("descriptorMap is a required property for PresentationSubmission and cannot be null");
            }
            this.DescriptorMap = descriptorMap;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DefinitionId
        /// </summary>
        [DataMember(Name = "definition_id", IsRequired = true, EmitDefaultValue = true)]
        public string DefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets DescriptorMap
        /// </summary>
        [DataMember(Name = "descriptor_map", IsRequired = true, EmitDefaultValue = true)]
        public List<Descriptor> DescriptorMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PresentationSubmission {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DefinitionId: ").Append(DefinitionId).Append("\n");
            sb.Append("  DescriptorMap: ").Append(DescriptorMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
