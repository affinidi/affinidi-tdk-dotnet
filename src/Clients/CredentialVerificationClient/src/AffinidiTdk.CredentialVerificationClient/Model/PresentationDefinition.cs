/*
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.CredentialVerificationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialVerificationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialVerificationClient.Model
{
    /// <summary>
    /// Presentation definition
    /// </summary>
    [DataContract(Name = "PresentationDefinition")]
    public partial class PresentationDefinition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PresentationDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PresentationDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PresentationDefinition" /> class.
        /// </summary>
        /// <param name="id">Definition id (required).</param>
        /// <param name="name">Definition name.</param>
        /// <param name="purpose">Definition purpose.</param>
        /// <param name="format">format.</param>
        /// <param name="submissionRequirements">submissionRequirements.</param>
        /// <param name="inputDescriptors">inputDescriptors (required).</param>
        /// <param name="frame">Dynamic model.</param>
        public PresentationDefinition(string id = default, string name = default, string purpose = default, Format format = default, List<SubmissionRequirement> submissionRequirements = default, List<InputDescriptor> inputDescriptors = default, Dictionary<string, Object> frame = default)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PresentationDefinition and cannot be null");
            }
            this.Id = id;
            // to ensure "inputDescriptors" is required (not null)
            if (inputDescriptors == null)
            {
                throw new ArgumentNullException("inputDescriptors is a required property for PresentationDefinition and cannot be null");
            }
            this.InputDescriptors = inputDescriptors;
            this.Name = name;
            this.Purpose = purpose;
            this.Format = format;
            this.SubmissionRequirements = submissionRequirements;
            this.Frame = frame;
        }

        /// <summary>
        /// Definition id
        /// </summary>
        /// <value>Definition id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Definition name
        /// </summary>
        /// <value>Definition name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Definition purpose
        /// </summary>
        /// <value>Definition purpose</value>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public Format Format { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionRequirements
        /// </summary>
        [DataMember(Name = "submission_requirements", EmitDefaultValue = false)]
        public List<SubmissionRequirement> SubmissionRequirements { get; set; }

        /// <summary>
        /// Gets or Sets InputDescriptors
        /// </summary>
        [DataMember(Name = "input_descriptors", IsRequired = true, EmitDefaultValue = true)]
        public List<InputDescriptor> InputDescriptors { get; set; }

        /// <summary>
        /// Dynamic model
        /// </summary>
        /// <value>Dynamic model</value>
        [DataMember(Name = "frame", EmitDefaultValue = false)]
        public Dictionary<string, Object> Frame { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PresentationDefinition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  SubmissionRequirements: ").Append(SubmissionRequirements).Append("\n");
            sb.Append("  InputDescriptors: ").Append(InputDescriptors).Append("\n");
            sb.Append("  Frame: ").Append(Frame).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
