/*
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.CredentialVerificationClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.CredentialVerificationClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.CredentialVerificationClient.Model
{
    /// <summary>
    /// W3cProof
    /// </summary>
    [DataContract(Name = "W3cProof")]
    public partial class W3cProof : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="W3cProof" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected W3cProof() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="W3cProof" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="created">created.</param>
        /// <param name="verificationMethod">verificationMethod (required).</param>
        /// <param name="proofPurpose">proofPurpose (required).</param>
        /// <param name="jws">jws.</param>
        /// <param name="proofValue">proofValue.</param>
        /// <param name="nonce">nonce.</param>
        public W3cProof(string type = default, string created = default, string verificationMethod = default, string proofPurpose = default, string jws = default, string proofValue = default, string nonce = default)
        {
            // to ensure "verificationMethod" is required (not null)
            if (verificationMethod == null)
            {
                throw new ArgumentNullException("verificationMethod is a required property for W3cProof and cannot be null");
            }
            this.VerificationMethod = verificationMethod;
            // to ensure "proofPurpose" is required (not null)
            if (proofPurpose == null)
            {
                throw new ArgumentNullException("proofPurpose is a required property for W3cProof and cannot be null");
            }
            this.ProofPurpose = proofPurpose;
            this.Type = type;
            this.Created = created;
            this.Jws = jws;
            this.ProofValue = proofValue;
            this.Nonce = nonce;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets VerificationMethod
        /// </summary>
        [DataMember(Name = "verificationMethod", IsRequired = true, EmitDefaultValue = true)]
        public string VerificationMethod { get; set; }

        /// <summary>
        /// Gets or Sets ProofPurpose
        /// </summary>
        [DataMember(Name = "proofPurpose", IsRequired = true, EmitDefaultValue = true)]
        public string ProofPurpose { get; set; }

        /// <summary>
        /// Gets or Sets Jws
        /// </summary>
        [DataMember(Name = "jws", EmitDefaultValue = true)]
        public string Jws { get; set; }

        /// <summary>
        /// Gets or Sets ProofValue
        /// </summary>
        [DataMember(Name = "proofValue", EmitDefaultValue = true)]
        public string ProofValue { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class W3cProof {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  VerificationMethod: ").Append(VerificationMethod).Append("\n");
            sb.Append("  ProofPurpose: ").Append(ProofPurpose).Append("\n");
            sb.Append("  Jws: ").Append(Jws).Append("\n");
            sb.Append("  ProofValue: ").Append(ProofValue).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
