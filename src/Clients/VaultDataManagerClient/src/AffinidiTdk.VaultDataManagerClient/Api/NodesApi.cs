/*
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.VaultDataManagerClient.Client;
using AffinidiTdk.VaultDataManagerClient.Model;

namespace AffinidiTdk.VaultDataManagerClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INodesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// creates child node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">parent node id</param>
        /// <param name="createChildNodeInput">CreateChildNode</param>
        /// <returns>CreateNodeOK</returns>
        CreateNodeOK CreateChildNode(string nodeId, CreateChildNodeInput createChildNodeInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// creates child node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">parent node id</param>
        /// <param name="createChildNodeInput">CreateChildNode</param>
        /// <returns>ApiResponse of CreateNodeOK</returns>
        ApiResponse<CreateNodeOK> CreateChildNodeWithHttpInfo(string nodeId, CreateChildNodeInput createChildNodeInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNodeInput">CreateNode</param>
        /// <returns>CreateNodeOK</returns>
        CreateNodeOK CreateNode(CreateNodeInput createNodeInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNodeInput">CreateNode</param>
        /// <returns>ApiResponse of CreateNodeOK</returns>
        ApiResponse<CreateNodeOK> CreateNodeWithHttpInfo(CreateNodeInput createNodeInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>DeleteNodeDto</returns>
        DeleteNodeDto DeleteNode(string nodeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResponse of DeleteNodeDto</returns>
        ApiResponse<DeleteNodeDto> DeleteNodeWithHttpInfo(string nodeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets detailed information about the node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="dek">A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)</param>
        /// <returns>GetDetailedNodeInfoOK</returns>
        GetDetailedNodeInfoOK GetDetailedNodeInfo(string nodeId, string? dek = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets detailed information about the node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="dek">A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)</param>
        /// <returns>ApiResponse of GetDetailedNodeInfoOK</returns>
        ApiResponse<GetDetailedNodeInfoOK> GetDetailedNodeInfoWithHttpInfo(string nodeId, string? dek = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize root node, and TRASH_BIN
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InitNodesOK</returns>
        [Obsolete]
        InitNodesOK InitNodes();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize root node, and TRASH_BIN
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InitNodesOK</returns>
        [Obsolete]
        ApiResponse<InitNodesOK> InitNodesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists children of the node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <returns>ListNodeChildrenOK</returns>
        ListNodeChildrenOK ListNodeChildren(string nodeId, int? limit = default, string? exclusiveStartKey = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists children of the node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <returns>ApiResponse of ListNodeChildrenOK</returns>
        ApiResponse<ListNodeChildrenOK> ListNodeChildrenWithHttpInfo(string nodeId, int? limit = default, string? exclusiveStartKey = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists children of the root node for the consumer
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListRootNodeChildrenOK</returns>
        ListRootNodeChildrenOK ListRootNodeChildren();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists children of the root node for the consumer
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListRootNodeChildrenOK</returns>
        ApiResponse<ListRootNodeChildrenOK> ListRootNodeChildrenWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Moves a node from source to destination along with the hierarchy
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="moveNodeInput">MoveNode</param>
        /// <returns>MoveNodeDto</returns>
        MoveNodeDto MoveNode(string nodeId, MoveNodeInput moveNodeInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Moves a node from source to destination along with the hierarchy
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="moveNodeInput">MoveNode</param>
        /// <returns>ApiResponse of MoveNodeDto</returns>
        ApiResponse<MoveNodeDto> MoveNodeWithHttpInfo(string nodeId, MoveNodeInput moveNodeInput);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRemove">nodeId of the node to be deleted from TRASH_BIN</param>
        /// <returns></returns>
        void PermanentlyDeleteNode(string nodeId, string nodeIdToRemove);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRemove">nodeId of the node to be deleted from TRASH_BIN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PermanentlyDeleteNodeWithHttpInfo(string nodeId, string nodeIdToRemove);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restore node marked for deletion from TRASH_BIN
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRestore">nodeId of the node to be restored from TRASH_BIN</param>
        /// <param name="restoreNodeFromTrashbin">RestoreNodeFromTrashbin</param>
        /// <returns>MoveNodeDto</returns>
        MoveNodeDto RestoreNodeFromTrashbin(string nodeId, string nodeIdToRestore, RestoreNodeFromTrashbin restoreNodeFromTrashbin);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restore node marked for deletion from TRASH_BIN
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRestore">nodeId of the node to be restored from TRASH_BIN</param>
        /// <param name="restoreNodeFromTrashbin">RestoreNodeFromTrashbin</param>
        /// <returns>ApiResponse of MoveNodeDto</returns>
        ApiResponse<MoveNodeDto> RestoreNodeFromTrashbinWithHttpInfo(string nodeId, string nodeIdToRestore, RestoreNodeFromTrashbin restoreNodeFromTrashbin);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="updateNodeInput">UpdateNodeInput</param>
        /// <returns>NodeDto</returns>
        NodeDto UpdateNode(string nodeId, UpdateNodeInput updateNodeInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="updateNodeInput">UpdateNodeInput</param>
        /// <returns>ApiResponse of NodeDto</returns>
        ApiResponse<NodeDto> UpdateNodeWithHttpInfo(string nodeId, UpdateNodeInput updateNodeInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INodesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// creates child node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">parent node id</param>
        /// <param name="createChildNodeInput">CreateChildNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNodeOK</returns>
        System.Threading.Tasks.Task<CreateNodeOK> CreateChildNodeAsync(string nodeId, CreateChildNodeInput createChildNodeInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// creates child node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">parent node id</param>
        /// <param name="createChildNodeInput">CreateChildNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNodeOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNodeOK>> CreateChildNodeWithHttpInfoAsync(string nodeId, CreateChildNodeInput createChildNodeInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNodeInput">CreateNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNodeOK</returns>
        System.Threading.Tasks.Task<CreateNodeOK> CreateNodeAsync(CreateNodeInput createNodeInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNodeInput">CreateNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNodeOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNodeOK>> CreateNodeWithHttpInfoAsync(CreateNodeInput createNodeInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteNodeDto</returns>
        System.Threading.Tasks.Task<DeleteNodeDto> DeleteNodeAsync(string nodeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteNodeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteNodeDto>> DeleteNodeWithHttpInfoAsync(string nodeId, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets detailed information about the node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="dek">A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDetailedNodeInfoOK</returns>
        System.Threading.Tasks.Task<GetDetailedNodeInfoOK> GetDetailedNodeInfoAsync(string nodeId, string? dek = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets detailed information about the node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="dek">A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDetailedNodeInfoOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDetailedNodeInfoOK>> GetDetailedNodeInfoWithHttpInfoAsync(string nodeId, string? dek = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize root node, and TRASH_BIN
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitNodesOK</returns>
        [Obsolete]
        System.Threading.Tasks.Task<InitNodesOK> InitNodesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize root node, and TRASH_BIN
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitNodesOK)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<InitNodesOK>> InitNodesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists children of the node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNodeChildrenOK</returns>
        System.Threading.Tasks.Task<ListNodeChildrenOK> ListNodeChildrenAsync(string nodeId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists children of the node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNodeChildrenOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListNodeChildrenOK>> ListNodeChildrenWithHttpInfoAsync(string nodeId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists children of the root node for the consumer
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRootNodeChildrenOK</returns>
        System.Threading.Tasks.Task<ListRootNodeChildrenOK> ListRootNodeChildrenAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// lists children of the root node for the consumer
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRootNodeChildrenOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRootNodeChildrenOK>> ListRootNodeChildrenWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Moves a node from source to destination along with the hierarchy
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="moveNodeInput">MoveNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MoveNodeDto</returns>
        System.Threading.Tasks.Task<MoveNodeDto> MoveNodeAsync(string nodeId, MoveNodeInput moveNodeInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Moves a node from source to destination along with the hierarchy
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="moveNodeInput">MoveNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MoveNodeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MoveNodeDto>> MoveNodeWithHttpInfoAsync(string nodeId, MoveNodeInput moveNodeInput, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRemove">nodeId of the node to be deleted from TRASH_BIN</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PermanentlyDeleteNodeAsync(string nodeId, string nodeIdToRemove, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRemove">nodeId of the node to be deleted from TRASH_BIN</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PermanentlyDeleteNodeWithHttpInfoAsync(string nodeId, string nodeIdToRemove, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restore node marked for deletion from TRASH_BIN
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRestore">nodeId of the node to be restored from TRASH_BIN</param>
        /// <param name="restoreNodeFromTrashbin">RestoreNodeFromTrashbin</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MoveNodeDto</returns>
        System.Threading.Tasks.Task<MoveNodeDto> RestoreNodeFromTrashbinAsync(string nodeId, string nodeIdToRestore, RestoreNodeFromTrashbin restoreNodeFromTrashbin, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restore node marked for deletion from TRASH_BIN
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRestore">nodeId of the node to be restored from TRASH_BIN</param>
        /// <param name="restoreNodeFromTrashbin">RestoreNodeFromTrashbin</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MoveNodeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MoveNodeDto>> RestoreNodeFromTrashbinWithHttpInfoAsync(string nodeId, string nodeIdToRestore, RestoreNodeFromTrashbin restoreNodeFromTrashbin, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="updateNodeInput">UpdateNodeInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NodeDto</returns>
        System.Threading.Tasks.Task<NodeDto> UpdateNodeAsync(string nodeId, UpdateNodeInput updateNodeInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a node
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="updateNodeInput">UpdateNodeInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NodeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeDto>> UpdateNodeWithHttpInfoAsync(string nodeId, UpdateNodeInput updateNodeInput, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INodesApi : INodesApiSync, INodesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NodesApi : IDisposable, INodesApi
    {
        private AffinidiTdk.VaultDataManagerClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public NodesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public NodesApi(string basePath)
        {
            this.Configuration = AffinidiTdk.VaultDataManagerClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.VaultDataManagerClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.VaultDataManagerClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.VaultDataManagerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public NodesApi(AffinidiTdk.VaultDataManagerClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.VaultDataManagerClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.VaultDataManagerClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.VaultDataManagerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NodesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NodesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.VaultDataManagerClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.VaultDataManagerClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.VaultDataManagerClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.VaultDataManagerClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NodesApi(HttpClient client, AffinidiTdk.VaultDataManagerClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.VaultDataManagerClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.VaultDataManagerClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.VaultDataManagerClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public NodesApi(AffinidiTdk.VaultDataManagerClient.Client.ISynchronousClient client, AffinidiTdk.VaultDataManagerClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.VaultDataManagerClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.VaultDataManagerClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.VaultDataManagerClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.VaultDataManagerClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.VaultDataManagerClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  creates child node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">parent node id</param>
        /// <param name="createChildNodeInput">CreateChildNode</param>
        /// <returns>CreateNodeOK</returns>
        public CreateNodeOK CreateChildNode(string nodeId, CreateChildNodeInput createChildNodeInput)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<CreateNodeOK> localVarResponse = CreateChildNodeWithHttpInfo(nodeId, createChildNodeInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  creates child node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">parent node id</param>
        /// <param name="createChildNodeInput">CreateChildNode</param>
        /// <returns>ApiResponse of CreateNodeOK</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<CreateNodeOK> CreateChildNodeWithHttpInfo(string nodeId, CreateChildNodeInput createChildNodeInput)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->CreateChildNode");

            // verify the required parameter 'createChildNodeInput' is set
            if (createChildNodeInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'createChildNodeInput' when calling NodesApi->CreateChildNode");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.Data = createChildNodeInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateNodeOK>("/v1/nodes/{nodeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChildNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  creates child node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">parent node id</param>
        /// <param name="createChildNodeInput">CreateChildNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNodeOK</returns>
        public async System.Threading.Tasks.Task<CreateNodeOK> CreateChildNodeAsync(string nodeId, CreateChildNodeInput createChildNodeInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<CreateNodeOK> localVarResponse = await CreateChildNodeWithHttpInfoAsync(nodeId, createChildNodeInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  creates child node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">parent node id</param>
        /// <param name="createChildNodeInput">CreateChildNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNodeOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<CreateNodeOK>> CreateChildNodeWithHttpInfoAsync(string nodeId, CreateChildNodeInput createChildNodeInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->CreateChildNode");

            // verify the required parameter 'createChildNodeInput' is set
            if (createChildNodeInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'createChildNodeInput' when calling NodesApi->CreateChildNode");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.Data = createChildNodeInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateNodeOK>("/v1/nodes/{nodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChildNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  create a node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNodeInput">CreateNode</param>
        /// <returns>CreateNodeOK</returns>
        public CreateNodeOK CreateNode(CreateNodeInput createNodeInput)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<CreateNodeOK> localVarResponse = CreateNodeWithHttpInfo(createNodeInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  create a node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNodeInput">CreateNode</param>
        /// <returns>ApiResponse of CreateNodeOK</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<CreateNodeOK> CreateNodeWithHttpInfo(CreateNodeInput createNodeInput)
        {
            // verify the required parameter 'createNodeInput' is set
            if (createNodeInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'createNodeInput' when calling NodesApi->CreateNode");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createNodeInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateNodeOK>("/v1/nodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  create a node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNodeInput">CreateNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNodeOK</returns>
        public async System.Threading.Tasks.Task<CreateNodeOK> CreateNodeAsync(CreateNodeInput createNodeInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<CreateNodeOK> localVarResponse = await CreateNodeWithHttpInfoAsync(createNodeInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  create a node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNodeInput">CreateNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNodeOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<CreateNodeOK>> CreateNodeWithHttpInfoAsync(CreateNodeInput createNodeInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createNodeInput' is set
            if (createNodeInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'createNodeInput' when calling NodesApi->CreateNode");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createNodeInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateNodeOK>("/v1/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>DeleteNodeDto</returns>
        public DeleteNodeDto DeleteNode(string nodeId)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<DeleteNodeDto> localVarResponse = DeleteNodeWithHttpInfo(nodeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResponse of DeleteNodeDto</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<DeleteNodeDto> DeleteNodeWithHttpInfo(string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->DeleteNode");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteNodeDto>("/v1/nodes/{nodeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteNodeDto</returns>
        public async System.Threading.Tasks.Task<DeleteNodeDto> DeleteNodeAsync(string nodeId, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<DeleteNodeDto> localVarResponse = await DeleteNodeWithHttpInfoAsync(nodeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteNodeDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<DeleteNodeDto>> DeleteNodeWithHttpInfoAsync(string nodeId, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->DeleteNode");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteNodeDto>("/v1/nodes/{nodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets detailed information about the node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="dek">A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)</param>
        /// <returns>GetDetailedNodeInfoOK</returns>
        public GetDetailedNodeInfoOK GetDetailedNodeInfo(string nodeId, string? dek = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<GetDetailedNodeInfoOK> localVarResponse = GetDetailedNodeInfoWithHttpInfo(nodeId, dek);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets detailed information about the node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="dek">A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)</param>
        /// <returns>ApiResponse of GetDetailedNodeInfoOK</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<GetDetailedNodeInfoOK> GetDetailedNodeInfoWithHttpInfo(string nodeId, string? dek = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->GetDetailedNodeInfo");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            if (dek != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToMultiMap("", "dek", dek));
            }

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetDetailedNodeInfoOK>("/v1/nodes/{nodeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDetailedNodeInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets detailed information about the node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="dek">A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDetailedNodeInfoOK</returns>
        public async System.Threading.Tasks.Task<GetDetailedNodeInfoOK> GetDetailedNodeInfoAsync(string nodeId, string? dek = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<GetDetailedNodeInfoOK> localVarResponse = await GetDetailedNodeInfoWithHttpInfoAsync(nodeId, dek, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets detailed information about the node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="dek">A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDetailedNodeInfoOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<GetDetailedNodeInfoOK>> GetDetailedNodeInfoWithHttpInfoAsync(string nodeId, string? dek = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->GetDetailedNodeInfo");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            if (dek != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToMultiMap("", "dek", dek));
            }

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetDetailedNodeInfoOK>("/v1/nodes/{nodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDetailedNodeInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initialize root node, and TRASH_BIN
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InitNodesOK</returns>
        [Obsolete]
        public InitNodesOK InitNodes()
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<InitNodesOK> localVarResponse = InitNodesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initialize root node, and TRASH_BIN
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InitNodesOK</returns>
        [Obsolete]
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<InitNodesOK> InitNodesWithHttpInfo()
        {
            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InitNodesOK>("/v1/nodes/init", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitNodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initialize root node, and TRASH_BIN
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitNodesOK</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<InitNodesOK> InitNodesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<InitNodesOK> localVarResponse = await InitNodesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initialize root node, and TRASH_BIN
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitNodesOK)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<InitNodesOK>> InitNodesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InitNodesOK>("/v1/nodes/init", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitNodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  lists children of the node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <returns>ListNodeChildrenOK</returns>
        public ListNodeChildrenOK ListNodeChildren(string nodeId, int? limit = default, string? exclusiveStartKey = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListNodeChildrenOK> localVarResponse = ListNodeChildrenWithHttpInfo(nodeId, limit, exclusiveStartKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  lists children of the node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <returns>ApiResponse of ListNodeChildrenOK</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListNodeChildrenOK> ListNodeChildrenWithHttpInfo(string nodeId, int? limit = default, string? exclusiveStartKey = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->ListNodeChildren");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListNodeChildrenOK>("/v1/nodes/{nodeId}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNodeChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  lists children of the node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNodeChildrenOK</returns>
        public async System.Threading.Tasks.Task<ListNodeChildrenOK> ListNodeChildrenAsync(string nodeId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListNodeChildrenOK> localVarResponse = await ListNodeChildrenWithHttpInfoAsync(nodeId, limit, exclusiveStartKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  lists children of the node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="limit">Maximum number of records to fetch in a list (optional, default to 10)</param>
        /// <param name="exclusiveStartKey">exclusiveStartKey for retrieving the next batch of data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNodeChildrenOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListNodeChildrenOK>> ListNodeChildrenWithHttpInfoAsync(string nodeId, int? limit = default, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->ListNodeChildren");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListNodeChildrenOK>("/v1/nodes/{nodeId}/children", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNodeChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  lists children of the root node for the consumer
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListRootNodeChildrenOK</returns>
        public ListRootNodeChildrenOK ListRootNodeChildren()
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListRootNodeChildrenOK> localVarResponse = ListRootNodeChildrenWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  lists children of the root node for the consumer
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListRootNodeChildrenOK</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListRootNodeChildrenOK> ListRootNodeChildrenWithHttpInfo()
        {
            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRootNodeChildrenOK>("/v1/nodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRootNodeChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  lists children of the root node for the consumer
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRootNodeChildrenOK</returns>
        public async System.Threading.Tasks.Task<ListRootNodeChildrenOK> ListRootNodeChildrenAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListRootNodeChildrenOK> localVarResponse = await ListRootNodeChildrenWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  lists children of the root node for the consumer
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRootNodeChildrenOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListRootNodeChildrenOK>> ListRootNodeChildrenWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRootNodeChildrenOK>("/v1/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRootNodeChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Moves a node from source to destination along with the hierarchy
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="moveNodeInput">MoveNode</param>
        /// <returns>MoveNodeDto</returns>
        public MoveNodeDto MoveNode(string nodeId, MoveNodeInput moveNodeInput)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<MoveNodeDto> localVarResponse = MoveNodeWithHttpInfo(nodeId, moveNodeInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Moves a node from source to destination along with the hierarchy
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="moveNodeInput">MoveNode</param>
        /// <returns>ApiResponse of MoveNodeDto</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<MoveNodeDto> MoveNodeWithHttpInfo(string nodeId, MoveNodeInput moveNodeInput)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->MoveNode");

            // verify the required parameter 'moveNodeInput' is set
            if (moveNodeInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'moveNodeInput' when calling NodesApi->MoveNode");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.Data = moveNodeInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MoveNodeDto>("/v1/nodes/{nodeId}/move", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Moves a node from source to destination along with the hierarchy
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="moveNodeInput">MoveNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MoveNodeDto</returns>
        public async System.Threading.Tasks.Task<MoveNodeDto> MoveNodeAsync(string nodeId, MoveNodeInput moveNodeInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<MoveNodeDto> localVarResponse = await MoveNodeWithHttpInfoAsync(nodeId, moveNodeInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Moves a node from source to destination along with the hierarchy
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="moveNodeInput">MoveNode</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MoveNodeDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<MoveNodeDto>> MoveNodeWithHttpInfoAsync(string nodeId, MoveNodeInput moveNodeInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->MoveNode");

            // verify the required parameter 'moveNodeInput' is set
            if (moveNodeInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'moveNodeInput' when calling NodesApi->MoveNode");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.Data = moveNodeInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MoveNodeDto>("/v1/nodes/{nodeId}/move", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRemove">nodeId of the node to be deleted from TRASH_BIN</param>
        /// <returns></returns>
        public void PermanentlyDeleteNode(string nodeId, string nodeIdToRemove)
        {
            PermanentlyDeleteNodeWithHttpInfo(nodeId, nodeIdToRemove);
        }

        /// <summary>
        ///  Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRemove">nodeId of the node to be deleted from TRASH_BIN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<Object> PermanentlyDeleteNodeWithHttpInfo(string nodeId, string nodeIdToRemove)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->PermanentlyDeleteNode");

            // verify the required parameter 'nodeIdToRemove' is set
            if (nodeIdToRemove == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeIdToRemove' when calling NodesApi->PermanentlyDeleteNode");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeIdToRemove", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeIdToRemove)); // path parameter

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/nodes/{nodeId}/remove/{nodeIdToRemove}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PermanentlyDeleteNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRemove">nodeId of the node to be deleted from TRASH_BIN</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PermanentlyDeleteNodeAsync(string nodeId, string nodeIdToRemove, System.Threading.CancellationToken cancellationToken = default)
        {
            await PermanentlyDeleteNodeWithHttpInfoAsync(nodeId, nodeIdToRemove, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRemove">nodeId of the node to be deleted from TRASH_BIN</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<Object>> PermanentlyDeleteNodeWithHttpInfoAsync(string nodeId, string nodeIdToRemove, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->PermanentlyDeleteNode");

            // verify the required parameter 'nodeIdToRemove' is set
            if (nodeIdToRemove == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeIdToRemove' when calling NodesApi->PermanentlyDeleteNode");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeIdToRemove", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeIdToRemove)); // path parameter

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/nodes/{nodeId}/remove/{nodeIdToRemove}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PermanentlyDeleteNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Restore node marked for deletion from TRASH_BIN
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRestore">nodeId of the node to be restored from TRASH_BIN</param>
        /// <param name="restoreNodeFromTrashbin">RestoreNodeFromTrashbin</param>
        /// <returns>MoveNodeDto</returns>
        public MoveNodeDto RestoreNodeFromTrashbin(string nodeId, string nodeIdToRestore, RestoreNodeFromTrashbin restoreNodeFromTrashbin)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<MoveNodeDto> localVarResponse = RestoreNodeFromTrashbinWithHttpInfo(nodeId, nodeIdToRestore, restoreNodeFromTrashbin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Restore node marked for deletion from TRASH_BIN
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRestore">nodeId of the node to be restored from TRASH_BIN</param>
        /// <param name="restoreNodeFromTrashbin">RestoreNodeFromTrashbin</param>
        /// <returns>ApiResponse of MoveNodeDto</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<MoveNodeDto> RestoreNodeFromTrashbinWithHttpInfo(string nodeId, string nodeIdToRestore, RestoreNodeFromTrashbin restoreNodeFromTrashbin)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->RestoreNodeFromTrashbin");

            // verify the required parameter 'nodeIdToRestore' is set
            if (nodeIdToRestore == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeIdToRestore' when calling NodesApi->RestoreNodeFromTrashbin");

            // verify the required parameter 'restoreNodeFromTrashbin' is set
            if (restoreNodeFromTrashbin == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'restoreNodeFromTrashbin' when calling NodesApi->RestoreNodeFromTrashbin");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeIdToRestore", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeIdToRestore)); // path parameter
            localVarRequestOptions.Data = restoreNodeFromTrashbin;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MoveNodeDto>("/v1/nodes/{nodeId}/restore/{nodeIdToRestore}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreNodeFromTrashbin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Restore node marked for deletion from TRASH_BIN
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRestore">nodeId of the node to be restored from TRASH_BIN</param>
        /// <param name="restoreNodeFromTrashbin">RestoreNodeFromTrashbin</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MoveNodeDto</returns>
        public async System.Threading.Tasks.Task<MoveNodeDto> RestoreNodeFromTrashbinAsync(string nodeId, string nodeIdToRestore, RestoreNodeFromTrashbin restoreNodeFromTrashbin, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<MoveNodeDto> localVarResponse = await RestoreNodeFromTrashbinWithHttpInfoAsync(nodeId, nodeIdToRestore, restoreNodeFromTrashbin, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Restore node marked for deletion from TRASH_BIN
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">nodeId of the TRASH_BIN</param>
        /// <param name="nodeIdToRestore">nodeId of the node to be restored from TRASH_BIN</param>
        /// <param name="restoreNodeFromTrashbin">RestoreNodeFromTrashbin</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MoveNodeDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<MoveNodeDto>> RestoreNodeFromTrashbinWithHttpInfoAsync(string nodeId, string nodeIdToRestore, RestoreNodeFromTrashbin restoreNodeFromTrashbin, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->RestoreNodeFromTrashbin");

            // verify the required parameter 'nodeIdToRestore' is set
            if (nodeIdToRestore == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeIdToRestore' when calling NodesApi->RestoreNodeFromTrashbin");

            // verify the required parameter 'restoreNodeFromTrashbin' is set
            if (restoreNodeFromTrashbin == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'restoreNodeFromTrashbin' when calling NodesApi->RestoreNodeFromTrashbin");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeIdToRestore", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeIdToRestore)); // path parameter
            localVarRequestOptions.Data = restoreNodeFromTrashbin;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MoveNodeDto>("/v1/nodes/{nodeId}/restore/{nodeIdToRestore}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreNodeFromTrashbin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates a node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="updateNodeInput">UpdateNodeInput</param>
        /// <returns>NodeDto</returns>
        public NodeDto UpdateNode(string nodeId, UpdateNodeInput updateNodeInput)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<NodeDto> localVarResponse = UpdateNodeWithHttpInfo(nodeId, updateNodeInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="updateNodeInput">UpdateNodeInput</param>
        /// <returns>ApiResponse of NodeDto</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<NodeDto> UpdateNodeWithHttpInfo(string nodeId, UpdateNodeInput updateNodeInput)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->UpdateNode");

            // verify the required parameter 'updateNodeInput' is set
            if (updateNodeInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'updateNodeInput' when calling NodesApi->UpdateNode");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.Data = updateNodeInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<NodeDto>("/v1/nodes/{nodeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates a node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="updateNodeInput">UpdateNodeInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NodeDto</returns>
        public async System.Threading.Tasks.Task<NodeDto> UpdateNodeAsync(string nodeId, UpdateNodeInput updateNodeInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<NodeDto> localVarResponse = await UpdateNodeWithHttpInfoAsync(nodeId, updateNodeInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a node
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="updateNodeInput">UpdateNodeInput</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NodeDto)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<NodeDto>> UpdateNodeWithHttpInfoAsync(string nodeId, UpdateNodeInput updateNodeInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->UpdateNode");

            // verify the required parameter 'updateNodeInput' is set
            if (updateNodeInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'updateNodeInput' when calling NodesApi->UpdateNode");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.Data = updateNodeInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<NodeDto>("/v1/nodes/{nodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
