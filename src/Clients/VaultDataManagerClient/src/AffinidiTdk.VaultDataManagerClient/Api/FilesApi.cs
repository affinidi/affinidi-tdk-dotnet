/*
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AffinidiTdk.VaultDataManagerClient.Client;
using AffinidiTdk.VaultDataManagerClient.Model;

namespace AffinidiTdk.VaultDataManagerClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a scanned file using the textract jobId
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannedFileJobId">Scanned file jobId.</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>GetScannedFileInfoOK</returns>
        GetScannedFileInfoOK GetScannedFileInfo(string scannedFileJobId, string? exclusiveStartKey = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a scanned file using the textract jobId
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannedFileJobId">Scanned file jobId.</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of GetScannedFileInfoOK</returns>
        ApiResponse<GetScannedFileInfoOK> GetScannedFileInfoWithHttpInfo(string scannedFileJobId, string? exclusiveStartKey = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all the the scanned files with all the details, e.g. status and jobId
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListScannedFilesOK</returns>
        ListScannedFilesOK ListScannedFiles();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all the the scanned files with all the details, e.g. status and jobId
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListScannedFilesOK</returns>
        ApiResponse<ListScannedFilesOK> ListScannedFilesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a scan of the file under this node and provide a textract job
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="startFileScanInput">StartFileScan</param>
        /// <returns>StartFileScanOK</returns>
        StartFileScanOK StartFileScan(string nodeId, StartFileScanInput startFileScanInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a scan of the file under this node and provide a textract job
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="startFileScanInput">StartFileScan</param>
        /// <returns>ApiResponse of StartFileScanOK</returns>
        ApiResponse<StartFileScanOK> StartFileScanWithHttpInfo(string nodeId, StartFileScanInput startFileScanInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a scanned file using the textract jobId
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannedFileJobId">Scanned file jobId.</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetScannedFileInfoOK</returns>
        System.Threading.Tasks.Task<GetScannedFileInfoOK> GetScannedFileInfoAsync(string scannedFileJobId, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a scanned file using the textract jobId
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannedFileJobId">Scanned file jobId.</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetScannedFileInfoOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetScannedFileInfoOK>> GetScannedFileInfoWithHttpInfoAsync(string scannedFileJobId, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all the the scanned files with all the details, e.g. status and jobId
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListScannedFilesOK</returns>
        System.Threading.Tasks.Task<ListScannedFilesOK> ListScannedFilesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all the the scanned files with all the details, e.g. status and jobId
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListScannedFilesOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListScannedFilesOK>> ListScannedFilesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a scan of the file under this node and provide a textract job
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="startFileScanInput">StartFileScan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartFileScanOK</returns>
        System.Threading.Tasks.Task<StartFileScanOK> StartFileScanAsync(string nodeId, StartFileScanInput startFileScanInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a scan of the file under this node and provide a textract job
        /// </remarks>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="startFileScanInput">StartFileScan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartFileScanOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartFileScanOK>> StartFileScanWithHttpInfoAsync(string nodeId, StartFileScanInput startFileScanInput, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IFilesApiSync, IFilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IDisposable, IFilesApi
    {
        private AffinidiTdk.VaultDataManagerClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public FilesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FilesApi(string basePath)
        {
            this.Configuration = AffinidiTdk.VaultDataManagerClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.VaultDataManagerClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.VaultDataManagerClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.VaultDataManagerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FilesApi(AffinidiTdk.VaultDataManagerClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AffinidiTdk.VaultDataManagerClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.VaultDataManagerClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.VaultDataManagerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FilesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FilesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.VaultDataManagerClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.VaultDataManagerClient.Client.GlobalConfiguration.Instance,
                new AffinidiTdk.VaultDataManagerClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AffinidiTdk.VaultDataManagerClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FilesApi(HttpClient client, AffinidiTdk.VaultDataManagerClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AffinidiTdk.VaultDataManagerClient.Client.Configuration.MergeConfigurations(
                AffinidiTdk.VaultDataManagerClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AffinidiTdk.VaultDataManagerClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FilesApi(AffinidiTdk.VaultDataManagerClient.Client.ISynchronousClient client, AffinidiTdk.VaultDataManagerClient.Client.IAsynchronousClient asyncClient, AffinidiTdk.VaultDataManagerClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AffinidiTdk.VaultDataManagerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AffinidiTdk.VaultDataManagerClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AffinidiTdk.VaultDataManagerClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AffinidiTdk.VaultDataManagerClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AffinidiTdk.VaultDataManagerClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get the details of a scanned file using the textract jobId
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannedFileJobId">Scanned file jobId.</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>GetScannedFileInfoOK</returns>
        public GetScannedFileInfoOK GetScannedFileInfo(string scannedFileJobId, string? exclusiveStartKey = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<GetScannedFileInfoOK> localVarResponse = GetScannedFileInfoWithHttpInfo(scannedFileJobId, exclusiveStartKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the details of a scanned file using the textract jobId
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannedFileJobId">Scanned file jobId.</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <returns>ApiResponse of GetScannedFileInfoOK</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<GetScannedFileInfoOK> GetScannedFileInfoWithHttpInfo(string scannedFileJobId, string? exclusiveStartKey = default)
        {
            // verify the required parameter 'scannedFileJobId' is set
            if (scannedFileJobId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'scannedFileJobId' when calling FilesApi->GetScannedFileInfo");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scannedFileJobId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(scannedFileJobId)); // path parameter
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetScannedFileInfoOK>("/v1/scanned-files/{scannedFileJobId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScannedFileInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the details of a scanned file using the textract jobId
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannedFileJobId">Scanned file jobId.</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetScannedFileInfoOK</returns>
        public async System.Threading.Tasks.Task<GetScannedFileInfoOK> GetScannedFileInfoAsync(string scannedFileJobId, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<GetScannedFileInfoOK> localVarResponse = await GetScannedFileInfoWithHttpInfoAsync(scannedFileJobId, exclusiveStartKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the details of a scanned file using the textract jobId
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannedFileJobId">Scanned file jobId.</param>
        /// <param name="exclusiveStartKey">The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetScannedFileInfoOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<GetScannedFileInfoOK>> GetScannedFileInfoWithHttpInfoAsync(string scannedFileJobId, string? exclusiveStartKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scannedFileJobId' is set
            if (scannedFileJobId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'scannedFileJobId' when calling FilesApi->GetScannedFileInfo");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scannedFileJobId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(scannedFileJobId)); // path parameter
            if (exclusiveStartKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToMultiMap("", "exclusiveStartKey", exclusiveStartKey));
            }

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetScannedFileInfoOK>("/v1/scanned-files/{scannedFileJobId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScannedFileInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all the the scanned files with all the details, e.g. status and jobId
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListScannedFilesOK</returns>
        public ListScannedFilesOK ListScannedFiles()
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListScannedFilesOK> localVarResponse = ListScannedFilesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all the the scanned files with all the details, e.g. status and jobId
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListScannedFilesOK</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListScannedFilesOK> ListScannedFilesWithHttpInfo()
        {
            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListScannedFilesOK>("/v1/scanned-files/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListScannedFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all the the scanned files with all the details, e.g. status and jobId
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListScannedFilesOK</returns>
        public async System.Threading.Tasks.Task<ListScannedFilesOK> ListScannedFilesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListScannedFilesOK> localVarResponse = await ListScannedFilesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all the the scanned files with all the details, e.g. status and jobId
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListScannedFilesOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<ListScannedFilesOK>> ListScannedFilesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListScannedFilesOK>("/v1/scanned-files/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListScannedFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Start a scan of the file under this node and provide a textract job
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="startFileScanInput">StartFileScan</param>
        /// <returns>StartFileScanOK</returns>
        public StartFileScanOK StartFileScan(string nodeId, StartFileScanInput startFileScanInput)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<StartFileScanOK> localVarResponse = StartFileScanWithHttpInfo(nodeId, startFileScanInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Start a scan of the file under this node and provide a textract job
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="startFileScanInput">StartFileScan</param>
        /// <returns>ApiResponse of StartFileScanOK</returns>
        public AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<StartFileScanOK> StartFileScanWithHttpInfo(string nodeId, StartFileScanInput startFileScanInput)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling FilesApi->StartFileScan");

            // verify the required parameter 'startFileScanInput' is set
            if (startFileScanInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'startFileScanInput' when calling FilesApi->StartFileScan");

            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.Data = startFileScanInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StartFileScanOK>("/v1/nodes/{nodeId}/file/scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartFileScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Start a scan of the file under this node and provide a textract job
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="startFileScanInput">StartFileScan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartFileScanOK</returns>
        public async System.Threading.Tasks.Task<StartFileScanOK> StartFileScanAsync(string nodeId, StartFileScanInput startFileScanInput, System.Threading.CancellationToken cancellationToken = default)
        {
            AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<StartFileScanOK> localVarResponse = await StartFileScanWithHttpInfoAsync(nodeId, startFileScanInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Start a scan of the file under this node and provide a textract job
        /// </summary>
        /// <exception cref="AffinidiTdk.VaultDataManagerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">Description for nodeId.</param>
        /// <param name="startFileScanInput">StartFileScan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartFileScanOK)</returns>
        public async System.Threading.Tasks.Task<AffinidiTdk.VaultDataManagerClient.Client.ApiResponse<StartFileScanOK>> StartFileScanWithHttpInfoAsync(string nodeId, StartFileScanInput startFileScanInput, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling FilesApi->StartFileScan");

            // verify the required parameter 'startFileScanInput' is set
            if (startFileScanInput == null)
                throw new AffinidiTdk.VaultDataManagerClient.Client.ApiException(400, "Missing required parameter 'startFileScanInput' when calling FilesApi->StartFileScan");


            AffinidiTdk.VaultDataManagerClient.Client.RequestOptions localVarRequestOptions = new AffinidiTdk.VaultDataManagerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nodeId", AffinidiTdk.VaultDataManagerClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.Data = startFileScanInput;

            // authentication (ConsumerTokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StartFileScanOK>("/v1/nodes/{nodeId}/file/scan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartFileScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
