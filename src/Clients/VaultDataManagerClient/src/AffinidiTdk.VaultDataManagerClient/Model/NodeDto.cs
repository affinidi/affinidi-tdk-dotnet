/*
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.VaultDataManagerClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.VaultDataManagerClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.VaultDataManagerClient.Model
{
    /// <summary>
    /// NodeDto
    /// </summary>
    [DataContract(Name = "NodeDto")]
    public partial class NodeDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public NodeStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public NodeType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NodeDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeDto" /> class.
        /// </summary>
        /// <param name="nodeId">A unique identifier of current node (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="fileCount">number of files in current node.</param>
        /// <param name="profileCount">number of profiles in current node.</param>
        /// <param name="folderCount">number of folders in current node.</param>
        /// <param name="vcCount">number of vcCount in current node.</param>
        /// <param name="name">display name of current node (required).</param>
        /// <param name="consumerId">unique identifier for consumer (required).</param>
        /// <param name="parentNodeId">parent node path (required).</param>
        /// <param name="profileId">A unique identifier of profile, under which current node is created (required).</param>
        /// <param name="createdAt">creation date/time of the node (required).</param>
        /// <param name="modifiedAt">modification date/time of the node (required).</param>
        /// <param name="createdBy">Identifier of the user who created the node (required).</param>
        /// <param name="modifiedBy">Identifier of the user who last updated the node (required).</param>
        /// <param name="description">Description of the node.</param>
        /// <param name="type">type (required).</param>
        /// <param name="link">id of the file, used for FILE node only.</param>
        /// <param name="schema">name of the schema, used for PROFILE node only.</param>
        /// <param name="consumedFileStorage">amount of bytes used by the stored data, used for ROOT_ELEMENT only for now.</param>
        /// <param name="edekInfo">edekInfo.</param>
        /// <param name="metadata">A JSON string format containing metadata of the node.</param>
        public NodeDto(string nodeId = default, NodeStatus status = default, decimal fileCount = default, decimal profileCount = default, decimal folderCount = default, decimal vcCount = default, string name = default, string consumerId = default, string parentNodeId = default, string profileId = default, string createdAt = default, string modifiedAt = default, string createdBy = default, string modifiedBy = default, string description = default, NodeType type = default, string link = default, string schema = default, decimal consumedFileStorage = default, EdekInfo edekInfo = default, string metadata = default)
        {
            // to ensure "nodeId" is required (not null)
            if (nodeId == null)
            {
                throw new ArgumentNullException("nodeId is a required property for NodeDto and cannot be null");
            }
            this.NodeId = nodeId;
            this.Status = status;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for NodeDto and cannot be null");
            }
            this.Name = name;
            // to ensure "consumerId" is required (not null)
            if (consumerId == null)
            {
                throw new ArgumentNullException("consumerId is a required property for NodeDto and cannot be null");
            }
            this.ConsumerId = consumerId;
            // to ensure "parentNodeId" is required (not null)
            if (parentNodeId == null)
            {
                throw new ArgumentNullException("parentNodeId is a required property for NodeDto and cannot be null");
            }
            this.ParentNodeId = parentNodeId;
            // to ensure "profileId" is required (not null)
            if (profileId == null)
            {
                throw new ArgumentNullException("profileId is a required property for NodeDto and cannot be null");
            }
            this.ProfileId = profileId;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for NodeDto and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "modifiedAt" is required (not null)
            if (modifiedAt == null)
            {
                throw new ArgumentNullException("modifiedAt is a required property for NodeDto and cannot be null");
            }
            this.ModifiedAt = modifiedAt;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new ArgumentNullException("createdBy is a required property for NodeDto and cannot be null");
            }
            this.CreatedBy = createdBy;
            // to ensure "modifiedBy" is required (not null)
            if (modifiedBy == null)
            {
                throw new ArgumentNullException("modifiedBy is a required property for NodeDto and cannot be null");
            }
            this.ModifiedBy = modifiedBy;
            this.Type = type;
            this.FileCount = fileCount;
            this.ProfileCount = profileCount;
            this.FolderCount = folderCount;
            this.VcCount = vcCount;
            this.Description = description;
            this.Link = link;
            this.Schema = schema;
            this.ConsumedFileStorage = consumedFileStorage;
            this.EdekInfo = edekInfo;
            this.Metadata = metadata;
        }

        /// <summary>
        /// A unique identifier of current node
        /// </summary>
        /// <value>A unique identifier of current node</value>
        [DataMember(Name = "nodeId", IsRequired = true, EmitDefaultValue = true)]
        public string NodeId { get; set; }

        /// <summary>
        /// number of files in current node
        /// </summary>
        /// <value>number of files in current node</value>
        [DataMember(Name = "fileCount", EmitDefaultValue = false)]
        public decimal FileCount { get; set; }

        /// <summary>
        /// number of profiles in current node
        /// </summary>
        /// <value>number of profiles in current node</value>
        [DataMember(Name = "profileCount", EmitDefaultValue = false)]
        public decimal ProfileCount { get; set; }

        /// <summary>
        /// number of folders in current node
        /// </summary>
        /// <value>number of folders in current node</value>
        [DataMember(Name = "folderCount", EmitDefaultValue = false)]
        public decimal FolderCount { get; set; }

        /// <summary>
        /// number of vcCount in current node
        /// </summary>
        /// <value>number of vcCount in current node</value>
        [DataMember(Name = "vcCount", EmitDefaultValue = false)]
        public decimal VcCount { get; set; }

        /// <summary>
        /// display name of current node
        /// </summary>
        /// <value>display name of current node</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// unique identifier for consumer
        /// </summary>
        /// <value>unique identifier for consumer</value>
        [DataMember(Name = "consumerId", IsRequired = true, EmitDefaultValue = true)]
        public string ConsumerId { get; set; }

        /// <summary>
        /// parent node path
        /// </summary>
        /// <value>parent node path</value>
        [DataMember(Name = "parentNodeId", IsRequired = true, EmitDefaultValue = true)]
        public string ParentNodeId { get; set; }

        /// <summary>
        /// A unique identifier of profile, under which current node is created
        /// </summary>
        /// <value>A unique identifier of profile, under which current node is created</value>
        [DataMember(Name = "profileId", IsRequired = true, EmitDefaultValue = true)]
        public string ProfileId { get; set; }

        /// <summary>
        /// creation date/time of the node
        /// </summary>
        /// <value>creation date/time of the node</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// modification date/time of the node
        /// </summary>
        /// <value>modification date/time of the node</value>
        [DataMember(Name = "modifiedAt", IsRequired = true, EmitDefaultValue = true)]
        public string ModifiedAt { get; set; }

        /// <summary>
        /// Identifier of the user who created the node
        /// </summary>
        /// <value>Identifier of the user who created the node</value>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Identifier of the user who last updated the node
        /// </summary>
        /// <value>Identifier of the user who last updated the node</value>
        [DataMember(Name = "modifiedBy", IsRequired = true, EmitDefaultValue = true)]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Description of the node
        /// </summary>
        /// <value>Description of the node</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// id of the file, used for FILE node only
        /// </summary>
        /// <value>id of the file, used for FILE node only</value>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// name of the schema, used for PROFILE node only
        /// </summary>
        /// <value>name of the schema, used for PROFILE node only</value>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public string Schema { get; set; }

        /// <summary>
        /// amount of bytes used by the stored data, used for ROOT_ELEMENT only for now
        /// </summary>
        /// <value>amount of bytes used by the stored data, used for ROOT_ELEMENT only for now</value>
        [DataMember(Name = "consumedFileStorage", EmitDefaultValue = false)]
        public decimal ConsumedFileStorage { get; set; }

        /// <summary>
        /// Gets or Sets EdekInfo
        /// </summary>
        [DataMember(Name = "edekInfo", EmitDefaultValue = false)]
        public EdekInfo EdekInfo { get; set; }

        /// <summary>
        /// A JSON string format containing metadata of the node
        /// </summary>
        /// <value>A JSON string format containing metadata of the node</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NodeDto {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("  ProfileCount: ").Append(ProfileCount).Append("\n");
            sb.Append("  FolderCount: ").Append(FolderCount).Append("\n");
            sb.Append("  VcCount: ").Append(VcCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ConsumerId: ").Append(ConsumerId).Append("\n");
            sb.Append("  ParentNodeId: ").Append(ParentNodeId).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  ConsumedFileStorage: ").Append(ConsumedFileStorage).Append("\n");
            sb.Append("  EdekInfo: ").Append(EdekInfo).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
