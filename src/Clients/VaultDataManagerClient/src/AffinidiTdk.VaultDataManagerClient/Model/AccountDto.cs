/*
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.VaultDataManagerClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.VaultDataManagerClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.VaultDataManagerClient.Model
{
    /// <summary>
    /// AccountDto
    /// </summary>
    [DataContract(Name = "AccountDto")]
    public partial class AccountDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDto" /> class.
        /// </summary>
        /// <param name="accountIndex">number that is used for profile DID derivation (required).</param>
        /// <param name="accountDid">Profile DID that is associated with the account number (required).</param>
        /// <param name="alias">Alias of account.</param>
        /// <param name="metadata">Metadata of account.</param>
        /// <param name="description">Description of account.</param>
        public AccountDto(decimal accountIndex = default, string accountDid = default, string alias = default, Object metadata = default, string description = default)
        {
            this.AccountIndex = accountIndex;
            // to ensure "accountDid" is required (not null)
            if (accountDid == null)
            {
                throw new ArgumentNullException("accountDid is a required property for AccountDto and cannot be null");
            }
            this.AccountDid = accountDid;
            this.Alias = alias;
            this.Metadata = metadata;
            this.Description = description;
        }

        /// <summary>
        /// number that is used for profile DID derivation
        /// </summary>
        /// <value>number that is used for profile DID derivation</value>
        [DataMember(Name = "accountIndex", IsRequired = true, EmitDefaultValue = true)]
        public decimal AccountIndex { get; set; }

        /// <summary>
        /// Profile DID that is associated with the account number
        /// </summary>
        /// <value>Profile DID that is associated with the account number</value>
        [DataMember(Name = "accountDid", IsRequired = true, EmitDefaultValue = true)]
        public string AccountDid { get; set; }

        /// <summary>
        /// Alias of account
        /// </summary>
        /// <value>Alias of account</value>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// Metadata of account
        /// </summary>
        /// <value>Metadata of account</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Description of account
        /// </summary>
        /// <value>Description of account</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountDto {\n");
            sb.Append("  AccountIndex: ").Append(AccountIndex).Append("\n");
            sb.Append("  AccountDid: ").Append(AccountDid).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.AccountDid != null)
            {
                // AccountDid (string) pattern
                Regex regexAccountDid = new Regex(@"^did:.*$", RegexOptions.CultureInvariant);
                if (!regexAccountDid.Match(this.AccountDid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountDid, must match a pattern of " + regexAccountDid, new[] { "AccountDid" });
                }
            }

            yield break;
        }
    }

}
