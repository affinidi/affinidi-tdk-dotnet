/*
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = AffinidiTdk.VaultDataManagerClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.VaultDataManagerClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.VaultDataManagerClient.Model
{
    /// <summary>
    /// MoveNodeInput
    /// </summary>
    [DataContract(Name = "MoveNodeInput")]
    public partial class MoveNodeInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoveNodeInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MoveNodeInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MoveNodeInput" /> class.
        /// </summary>
        /// <param name="destinationNodeId">Parent to which current node should be moved (required).</param>
        /// <param name="resolveNameConflictsAutomatically">automatically update the name of Node if target Node has children with the same name. If not provided, name won&#39;t be updated automatically (default to false).</param>
        public MoveNodeInput(string destinationNodeId = default, bool resolveNameConflictsAutomatically = false)
        {
            // to ensure "destinationNodeId" is required (not null)
            if (destinationNodeId == null)
            {
                throw new ArgumentNullException("destinationNodeId is a required property for MoveNodeInput and cannot be null");
            }
            this.DestinationNodeId = destinationNodeId;
            this.ResolveNameConflictsAutomatically = resolveNameConflictsAutomatically;
        }

        /// <summary>
        /// Parent to which current node should be moved
        /// </summary>
        /// <value>Parent to which current node should be moved</value>
        [DataMember(Name = "destinationNodeId", IsRequired = true, EmitDefaultValue = true)]
        public string DestinationNodeId { get; set; }

        /// <summary>
        /// automatically update the name of Node if target Node has children with the same name. If not provided, name won&#39;t be updated automatically
        /// </summary>
        /// <value>automatically update the name of Node if target Node has children with the same name. If not provided, name won&#39;t be updated automatically</value>
        [DataMember(Name = "resolveNameConflictsAutomatically", EmitDefaultValue = true)]
        public bool ResolveNameConflictsAutomatically { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoveNodeInput {\n");
            sb.Append("  DestinationNodeId: ").Append(DestinationNodeId).Append("\n");
            sb.Append("  ResolveNameConflictsAutomatically: ").Append(ResolveNameConflictsAutomatically).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
