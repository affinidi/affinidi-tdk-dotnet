/*
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.VaultDataManagerClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.VaultDataManagerClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.VaultDataManagerClient.Model
{
    /// <summary>
    /// CreateNodeInput
    /// </summary>
    [DataContract(Name = "CreateNodeInput")]
    public partial class CreateNodeInput : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public NodeType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNodeInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateNodeInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNodeInput" /> class.
        /// </summary>
        /// <param name="name">Name of the item (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="description">description of profile if creating a new profile.</param>
        /// <param name="parentNodeId">parent node id, if not provided then root element is used.</param>
        /// <param name="edekInfo">edekInfo.</param>
        /// <param name="dek">A base64 encoded data encryption key, encrypted using VFS public key, required for node types [FILE, PROFILE].</param>
        /// <param name="metadata">metadata of the node in stringified json format.</param>
        public CreateNodeInput(string name = default, NodeType type = default, string description = default, string parentNodeId = default, EdekInfo edekInfo = default, string dek = default, string metadata = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateNodeInput and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.Description = description;
            this.ParentNodeId = parentNodeId;
            this.EdekInfo = edekInfo;
            this.Dek = dek;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Name of the item
        /// </summary>
        /// <value>Name of the item</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// description of profile if creating a new profile
        /// </summary>
        /// <value>description of profile if creating a new profile</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// parent node id, if not provided then root element is used
        /// </summary>
        /// <value>parent node id, if not provided then root element is used</value>
        [DataMember(Name = "parentNodeId", EmitDefaultValue = false)]
        public string ParentNodeId { get; set; }

        /// <summary>
        /// Gets or Sets EdekInfo
        /// </summary>
        [DataMember(Name = "edekInfo", EmitDefaultValue = false)]
        public EdekInfo EdekInfo { get; set; }

        /// <summary>
        /// A base64 encoded data encryption key, encrypted using VFS public key, required for node types [FILE, PROFILE]
        /// </summary>
        /// <value>A base64 encoded data encryption key, encrypted using VFS public key, required for node types [FILE, PROFILE]</value>
        [DataMember(Name = "dek", EmitDefaultValue = false)]
        public string Dek { get; set; }

        /// <summary>
        /// metadata of the node in stringified json format
        /// </summary>
        /// <value>metadata of the node in stringified json format</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateNodeInput {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ParentNodeId: ").Append(ParentNodeId).Append("\n");
            sb.Append("  EdekInfo: ").Append(EdekInfo).Append("\n");
            sb.Append("  Dek: ").Append(Dek).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            yield break;
        }
    }

}
