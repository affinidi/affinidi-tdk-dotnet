/*
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AffinidiTdk.VaultDataManagerClient.Client.FileParameter;
using OpenAPIDateConverter = AffinidiTdk.VaultDataManagerClient.Client.OpenAPIDateConverter;

namespace AffinidiTdk.VaultDataManagerClient.Model
{
    /// <summary>
    /// ListScannedFilesOKScannedFilesInner
    /// </summary>
    [DataContract(Name = "ListScannedFilesOK_scannedFiles_inner")]
    public partial class ListScannedFilesOKScannedFilesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListScannedFilesOKScannedFilesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListScannedFilesOKScannedFilesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListScannedFilesOKScannedFilesInner" /> class.
        /// </summary>
        /// <param name="jobId">A unique, randomly generated identifier (required).</param>
        /// <param name="status">The Status of the listed files (required).</param>
        /// <param name="profileId">A unique, randomly generated identifier (required).</param>
        /// <param name="nodeId">nodeId (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="name">name (required).</param>
        public ListScannedFilesOKScannedFilesInner(string jobId = default, string status = default, string profileId = default, string nodeId = default, string createdAt = default, string name = default)
        {
            // to ensure "jobId" is required (not null)
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId is a required property for ListScannedFilesOKScannedFilesInner and cannot be null");
            }
            this.JobId = jobId;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ListScannedFilesOKScannedFilesInner and cannot be null");
            }
            this.Status = status;
            // to ensure "profileId" is required (not null)
            if (profileId == null)
            {
                throw new ArgumentNullException("profileId is a required property for ListScannedFilesOKScannedFilesInner and cannot be null");
            }
            this.ProfileId = profileId;
            // to ensure "nodeId" is required (not null)
            if (nodeId == null)
            {
                throw new ArgumentNullException("nodeId is a required property for ListScannedFilesOKScannedFilesInner and cannot be null");
            }
            this.NodeId = nodeId;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for ListScannedFilesOKScannedFilesInner and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ListScannedFilesOKScannedFilesInner and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// A unique, randomly generated identifier
        /// </summary>
        /// <value>A unique, randomly generated identifier</value>
        [DataMember(Name = "jobId", IsRequired = true, EmitDefaultValue = true)]
        public string JobId { get; set; }

        /// <summary>
        /// The Status of the listed files
        /// </summary>
        /// <value>The Status of the listed files</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// A unique, randomly generated identifier
        /// </summary>
        /// <value>A unique, randomly generated identifier</value>
        [DataMember(Name = "profileId", IsRequired = true, EmitDefaultValue = true)]
        public string ProfileId { get; set; }

        /// <summary>
        /// Gets or Sets NodeId
        /// </summary>
        [DataMember(Name = "nodeId", IsRequired = true, EmitDefaultValue = true)]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListScannedFilesOKScannedFilesInner {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
